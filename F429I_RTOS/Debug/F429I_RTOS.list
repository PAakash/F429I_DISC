
F429I_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c65c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800c80c  0800c80c  0001c80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c980  0800c980  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c988  0800c988  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c988  0800c988  0001c988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800c990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          0000a3d8  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a53c  2000a53c  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f5f6  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006d24  00000000  00000000  0004f78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002638  00000000  00000000  000564b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002338  00000000  00000000  00058ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ede7  00000000  00000000  0005ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000332f2  00000000  00000000  00089c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa8c2  00000000  00000000  000bcef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b77bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1c8  00000000  00000000  001b780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c7f4 	.word	0x0800c7f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	0800c7f4 	.word	0x0800c7f4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_CRC_Init+0x20>)
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <MX_CRC_Init+0x24>)
 80004fc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_CRC_Init+0x20>)
 8000500:	f001 fbe2 	bl	8001cc8 <HAL_CRC_Init>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800050a:	f000 febd 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000180 	.word	0x20000180
 8000518:	40023000 	.word	0x40023000

0800051c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <HAL_CRC_MspInit+0x3c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10d      	bne.n	800054a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_CRC_MspInit+0x40>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <HAL_CRC_MspInit+0x40>)
 8000538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_CRC_MspInit+0x40>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023000 	.word	0x40023000
 800055c:	40023800 	.word	0x40023800

08000560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_DMA_Init+0x4c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <MX_DMA_Init+0x4c>)
 8000570:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_DMA_Init+0x4c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	2105      	movs	r1, #5
 8000586:	203a      	movs	r0, #58	; 0x3a
 8000588:	f001 fb74 	bl	8001c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800058c:	203a      	movs	r0, #58	; 0x3a
 800058e:	f001 fb8d 	bl	8001cac <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2105      	movs	r1, #5
 8000596:	2046      	movs	r0, #70	; 0x46
 8000598:	f001 fb6c 	bl	8001c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800059c:	2046      	movs	r0, #70	; 0x46
 800059e:	f001 fb85 	bl	8001cac <HAL_NVIC_EnableIRQ>

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800

080005b0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005b6:	4a16      	ldr	r2, [pc, #88]	; (8000610 <MX_DMA2D_Init+0x60>)
 80005b8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005e6:	f001 fe75 	bl	80022d4 <HAL_DMA2D_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005f0:	f000 fe4a 	bl	8001288 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005f4:	2101      	movs	r1, #1
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_DMA2D_Init+0x5c>)
 80005f8:	f001 ffc6 	bl	8002588 <HAL_DMA2D_ConfigLayer>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000602:	f000 fe41 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000188 	.word	0x20000188
 8000610:	4002b000 	.word	0x4002b000

08000614 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_DMA2D_MspInit+0x48>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d115      	bne.n	8000652 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <HAL_DMA2D_MspInit+0x4c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a0c      	ldr	r2, [pc, #48]	; (8000660 <HAL_DMA2D_MspInit+0x4c>)
 8000630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <HAL_DMA2D_MspInit+0x4c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2105      	movs	r1, #5
 8000646:	205a      	movs	r0, #90	; 0x5a
 8000648:	f001 fb14 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800064c:	205a      	movs	r0, #90	; 0x5a
 800064e:	f001 fb2d 	bl	8001cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	4002b000 	.word	0x4002b000
 8000660:	40023800 	.word	0x40023800

08000664 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_FMC_Init+0x98>)
 800067e:	4a20      	ldr	r2, [pc, #128]	; (8000700 <MX_FMC_Init+0x9c>)
 8000680:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_FMC_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_FMC_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_FMC_Init+0x98>)
 8000690:	2204      	movs	r2, #4
 8000692:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_FMC_Init+0x98>)
 8000696:	2210      	movs	r2, #16
 8000698:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_FMC_Init+0x98>)
 800069c:	2240      	movs	r2, #64	; 0x40
 800069e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_FMC_Init+0x98>)
 80006a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006a6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_FMC_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_FMC_Init+0x98>)
 80006b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_FMC_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_FMC_Init+0x98>)
 80006be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006c8:	2307      	movs	r3, #7
 80006ca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_FMC_Init+0x98>)
 80006e6:	f005 fb13 	bl	8005d10 <HAL_SDRAM_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006f0:	f000 fdca 	bl	8001288 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200001c8 	.word	0x200001c8
 8000700:	a0000140 	.word	0xa0000140

08000704 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <HAL_FMC_MspInit+0x104>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d16f      	bne.n	8000800 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <HAL_FMC_MspInit+0x104>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <HAL_FMC_MspInit+0x108>)
 800072c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800072e:	4a37      	ldr	r2, [pc, #220]	; (800080c <HAL_FMC_MspInit+0x108>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6393      	str	r3, [r2, #56]	; 0x38
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <HAL_FMC_MspInit+0x108>)
 8000738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000742:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000746:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000754:	230c      	movs	r3, #12
 8000756:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	482c      	ldr	r0, [pc, #176]	; (8000810 <HAL_FMC_MspInit+0x10c>)
 800075e:	f001 ffa5 	bl	80026ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000762:	2301      	movs	r3, #1
 8000764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076e:	2303      	movs	r3, #3
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000772:	230c      	movs	r3, #12
 8000774:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4826      	ldr	r0, [pc, #152]	; (8000814 <HAL_FMC_MspInit+0x110>)
 800077c:	f001 ff96 	bl	80026ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000780:	f248 1333 	movw	r3, #33075	; 0x8133
 8000784:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000792:	230c      	movs	r3, #12
 8000794:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	481f      	ldr	r0, [pc, #124]	; (8000818 <HAL_FMC_MspInit+0x114>)
 800079c:	f001 ff86 	bl	80026ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80007a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007a4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007b2:	230c      	movs	r3, #12
 80007b4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <HAL_FMC_MspInit+0x118>)
 80007bc:	f001 ff76 	bl	80026ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80007c0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80007c4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007d2:	230c      	movs	r3, #12
 80007d4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <HAL_FMC_MspInit+0x11c>)
 80007dc:	f001 ff66 	bl	80026ac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80007e0:	2360      	movs	r3, #96	; 0x60
 80007e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f0:	230c      	movs	r3, #12
 80007f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <HAL_FMC_MspInit+0x120>)
 80007fa:	f001 ff57 	bl	80026ac <HAL_GPIO_Init>
 80007fe:	e000      	b.n	8000802 <HAL_FMC_MspInit+0xfe>
    return;
 8000800:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001fc 	.word	0x200001fc
 800080c:	40023800 	.word	0x40023800
 8000810:	40021400 	.word	0x40021400
 8000814:	40020800 	.word	0x40020800
 8000818:	40021800 	.word	0x40021800
 800081c:	40021000 	.word	0x40021000
 8000820:	40020c00 	.word	0x40020c00
 8000824:	40020400 	.word	0x40020400

08000828 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000830:	f7ff ff68 	bl	8000704 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <vApplicationGetIdleTaskMemory+0x2c>)
 8000880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000210 	.word	0x20000210
 80008a0:	200002c8 	.word	0x200002c8

080008a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b09c      	sub	sp, #112	; 0x70
 80008a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of statusTask */
  osThreadDef(statusTask, statusTaskFcn, osPriorityNormal, 0, 4096);
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <MX_FREERTOS_Init+0xa4>)
 80008ac:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80008b0:	461d      	mov	r5, r3
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statusTaskHandle = osThreadCreate(osThread(statusTask), NULL);
 80008be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f009 fed8 	bl	800a67a <osThreadCreate>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a1f      	ldr	r2, [pc, #124]	; (800094c <MX_FREERTOS_Init+0xa8>)
 80008ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayUpdate */
  osThreadDef(displayUpdate, displayUpdateFcn, osPriorityAboveNormal, 0, 128);
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_FREERTOS_Init+0xac>)
 80008d2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80008d6:	461d      	mov	r5, r3
 80008d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayUpdateHandle = osThreadCreate(osThread(displayUpdate), NULL);
 80008e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f009 fec5 	bl	800a67a <osThreadCreate>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_FREERTOS_Init+0xb0>)
 80008f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchUpdate */
  osThreadDef(touchUpdate, touchUpdateFcn, osPriorityAboveNormal, 0, 128);
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_FREERTOS_Init+0xb4>)
 80008f8:	f107 041c 	add.w	r4, r7, #28
 80008fc:	461d      	mov	r5, r3
 80008fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchUpdateHandle = osThreadCreate(osThread(touchUpdate), NULL);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f009 feb2 	bl	800a67a <osThreadCreate>
 8000916:	4603      	mov	r3, r0
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <MX_FREERTOS_Init+0xb8>)
 800091a:	6013      	str	r3, [r2, #0]

  /* definition and creation of usbProcess */
  osThreadDef(usbProcess, usbProcessFcn, osPriorityIdle, 0, 128);
 800091c:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_FREERTOS_Init+0xbc>)
 800091e:	463c      	mov	r4, r7
 8000920:	461d      	mov	r5, r3
 8000922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000926:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800092a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  usbProcessHandle = osThreadCreate(osThread(usbProcess), NULL);
 800092e:	463b      	mov	r3, r7
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f009 fea1 	bl	800a67a <osThreadCreate>
 8000938:	4603      	mov	r3, r0
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <MX_FREERTOS_Init+0xc0>)
 800093c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800093e:	bf00      	nop
 8000940:	3770      	adds	r7, #112	; 0x70
 8000942:	46bd      	mov	sp, r7
 8000944:	bdb0      	pop	{r4, r5, r7, pc}
 8000946:	bf00      	nop
 8000948:	0800c840 	.word	0x0800c840
 800094c:	20000200 	.word	0x20000200
 8000950:	0800c85c 	.word	0x0800c85c
 8000954:	20000204 	.word	0x20000204
 8000958:	0800c878 	.word	0x0800c878
 800095c:	20000208 	.word	0x20000208
 8000960:	0800c894 	.word	0x0800c894
 8000964:	2000020c 	.word	0x2000020c

08000968 <statusTaskFcn>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_statusTaskFcn */
void statusTaskFcn(void const * argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000970:	f00b f918 	bl	800bba4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN statusTaskFcn */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <statusTaskFcn+0x20>)
 800097a:	f002 f85c 	bl	8002a36 <HAL_GPIO_TogglePin>
      osDelay(200);
 800097e:	20c8      	movs	r0, #200	; 0xc8
 8000980:	f009 fec7 	bl	800a712 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000984:	e7f6      	b.n	8000974 <statusTaskFcn+0xc>
 8000986:	bf00      	nop
 8000988:	40021800 	.word	0x40021800

0800098c <displayUpdateFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayUpdateFcn */
void displayUpdateFcn(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUpdateFcn */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f009 febc 	bl	800a712 <osDelay>
 800099a:	e7fb      	b.n	8000994 <displayUpdateFcn+0x8>

0800099c <touchUpdateFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_touchUpdateFcn */
void touchUpdateFcn(void const * argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN touchUpdateFcn */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f009 feb4 	bl	800a712 <osDelay>
 80009aa:	e7fb      	b.n	80009a4 <touchUpdateFcn+0x8>

080009ac <usbProcessFcn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_usbProcessFcn */
void usbProcessFcn(void const * argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN usbProcessFcn */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f009 feac 	bl	800a712 <osDelay>
 80009ba:	e7fb      	b.n	80009b4 <usbProcessFcn+0x8>

080009bc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
 80009d6:	4ba6      	ldr	r3, [pc, #664]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4aa5      	ldr	r2, [pc, #660]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 80009dc:	f043 0310 	orr.w	r3, r3, #16
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4ba3      	ldr	r3, [pc, #652]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	623b      	str	r3, [r7, #32]
 80009ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
 80009f2:	4b9f      	ldr	r3, [pc, #636]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a9e      	ldr	r2, [pc, #632]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b9c      	ldr	r3, [pc, #624]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	4b98      	ldr	r3, [pc, #608]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a97      	ldr	r2, [pc, #604]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b95      	ldr	r3, [pc, #596]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0320 	and.w	r3, r3, #32
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	4b91      	ldr	r3, [pc, #580]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a90      	ldr	r2, [pc, #576]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b8e      	ldr	r3, [pc, #568]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b8a      	ldr	r3, [pc, #552]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a89      	ldr	r2, [pc, #548]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b87      	ldr	r3, [pc, #540]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b83      	ldr	r3, [pc, #524]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a82      	ldr	r2, [pc, #520]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b80      	ldr	r3, [pc, #512]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b7c      	ldr	r3, [pc, #496]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a7b      	ldr	r2, [pc, #492]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b79      	ldr	r3, [pc, #484]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b75      	ldr	r3, [pc, #468]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a74      	ldr	r2, [pc, #464]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b72      	ldr	r3, [pc, #456]	; (8000c70 <MX_GPIO_Init+0x2b4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2116      	movs	r1, #22
 8000ab6:	486f      	ldr	r0, [pc, #444]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000ab8:	f001 ffa4 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	486d      	ldr	r0, [pc, #436]	; (8000c78 <MX_GPIO_Init+0x2bc>)
 8000ac2:	f001 ff9f 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000acc:	486b      	ldr	r0, [pc, #428]	; (8000c7c <MX_GPIO_Init+0x2c0>)
 8000ace:	f001 ff99 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ad8:	4869      	ldr	r0, [pc, #420]	; (8000c80 <MX_GPIO_Init+0x2c4>)
 8000ada:	f001 ff93 	bl	8002a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ade:	237c      	movs	r3, #124	; 0x7c
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4864      	ldr	r0, [pc, #400]	; (8000c84 <MX_GPIO_Init+0x2c8>)
 8000af2:	f001 fddb 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC3 PC8 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11
 8000af6:	f643 1308 	movw	r3, #14600	; 0x3908
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	2303      	movs	r3, #3
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	485a      	ldr	r0, [pc, #360]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000b0c:	f001 fdce 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b10:	2340      	movs	r3, #64	; 0x40
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4859      	ldr	r0, [pc, #356]	; (8000c88 <MX_GPIO_Init+0x2cc>)
 8000b24:	f001 fdc2 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b28:	2316      	movs	r3, #22
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	484d      	ldr	r0, [pc, #308]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000b40:	f001 fdb4 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b44:	f248 0307 	movw	r3, #32775	; 0x8007
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b4a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4847      	ldr	r0, [pc, #284]	; (8000c78 <MX_GPIO_Init+0x2bc>)
 8000b5c:	f001 fda6 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b60:	2320      	movs	r3, #32
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b70:	4619      	mov	r1, r3
 8000b72:	4841      	ldr	r0, [pc, #260]	; (8000c78 <MX_GPIO_Init+0x2bc>)
 8000b74:	f001 fd9a 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	483a      	ldr	r0, [pc, #232]	; (8000c78 <MX_GPIO_Init+0x2bc>)
 8000b90:	f001 fd8c 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b94:	2320      	movs	r3, #32
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b98:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x2b8>)
 8000baa:	f001 fd7f 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4832      	ldr	r0, [pc, #200]	; (8000c8c <MX_GPIO_Init+0x2d0>)
 8000bc2:	f001 fd73 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4828      	ldr	r0, [pc, #160]	; (8000c7c <MX_GPIO_Init+0x2c0>)
 8000bdc:	f001 fd66 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000be0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4820      	ldr	r0, [pc, #128]	; (8000c7c <MX_GPIO_Init+0x2c0>)
 8000bfa:	f001 fd57 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9;
 8000bfe:	f44f 7303 	mov.w	r3, #524	; 0x20c
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c04:	2303      	movs	r3, #3
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <MX_GPIO_Init+0x2c4>)
 8000c14:	f001 fd4a 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD2 PD4 PD5 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000c18:	23b4      	movs	r3, #180	; 0xb4
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x2c0>)
 8000c2c:	f001 fd3e 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c30:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_GPIO_Init+0x2c4>)
 8000c4a:	f001 fd2f 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7;
 8000c4e:	2398      	movs	r3, #152	; 0x98
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480a      	ldr	r0, [pc, #40]	; (8000c8c <MX_GPIO_Init+0x2d0>)
 8000c62:	f001 fd23 	bl	80026ac <HAL_GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3738      	adds	r7, #56	; 0x38
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40021400 	.word	0x40021400
 8000c8c:	40020400 	.word	0x40020400

08000c90 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C3_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C3_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cce:	f001 fecd 	bl	8002a6c <HAL_I2C_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000cd8:	f000 fad6 	bl	8001288 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000ce0:	f002 f808 	bl	8002cf4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000cea:	f000 facd 	bl	8001288 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_I2C3_Init+0x74>)
 8000cf2:	f002 f83b 	bl	8002d6c <HAL_I2CEx_ConfigDigitalFilter>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f000 fac4 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200004c8 	.word	0x200004c8
 8000d08:	40005c00 	.word	0x40005c00
 8000d0c:	000186a0 	.word	0x000186a0

08000d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a29      	ldr	r2, [pc, #164]	; (8000dd4 <HAL_I2C_MspInit+0xc4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d14b      	bne.n	8000dca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a27      	ldr	r2, [pc, #156]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a20      	ldr	r2, [pc, #128]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <HAL_I2C_MspInit+0xcc>)
 8000d88:	f001 fc90 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d92:	2312      	movs	r3, #18
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <HAL_I2C_MspInit+0xd0>)
 8000daa:	f001 fc7f 	bl	80026ac <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_I2C_MspInit+0xc8>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40005c00 	.word	0x40005c00
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000

08000de4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2234      	movs	r2, #52	; 0x34
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00b fc35 	bl	800c660 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000df6:	4b39      	ldr	r3, [pc, #228]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000df8:	4a39      	ldr	r2, [pc, #228]	; (8000ee0 <MX_LTDC_Init+0xfc>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dfc:	4b37      	ldr	r3, [pc, #220]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e02:	4b36      	ldr	r3, [pc, #216]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000e14:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e16:	2209      	movs	r2, #9
 8000e18:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000e1a:	4b30      	ldr	r3, [pc, #192]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000e20:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e22:	221d      	movs	r2, #29
 8000e24:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000e26:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e2e:	f240 120d 	movw	r2, #269	; 0x10d
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e36:	f240 1243 	movw	r2, #323	; 0x143
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e3e:	f240 1217 	movw	r2, #279	; 0x117
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e46:	f240 1247 	movw	r2, #327	; 0x147
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e64:	481d      	ldr	r0, [pc, #116]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000e66:	f001 ffc1 	bl	8002dec <HAL_LTDC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e70:	f000 fa0a 	bl	8001288 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000e78:	23f0      	movs	r3, #240	; 0xf0
 8000e7a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000e80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e84:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e86:	2302      	movs	r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e8a:	23ff      	movs	r3, #255	; 0xff
 8000e8c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e92:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e96:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e9c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000ea2:	23f0      	movs	r3, #240	; 0xf0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000ea6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_LTDC_Init+0xf8>)
 8000ec6:	f002 f923 	bl	8003110 <HAL_LTDC_ConfigLayer>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ed0:	f000 f9da 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3738      	adds	r7, #56	; 0x38
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000051c 	.word	0x2000051c
 8000ee0:	40016800 	.word	0x40016800

08000ee4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b09a      	sub	sp, #104	; 0x68
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	2230      	movs	r2, #48	; 0x30
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00b fbab 	bl	800c660 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a85      	ldr	r2, [pc, #532]	; (8001124 <HAL_LTDC_MspInit+0x240>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	f040 8102 	bne.w	800111a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f16:	2308      	movs	r3, #8
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f1a:	2332      	movs	r3, #50	; 0x32
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f22:	2300      	movs	r3, #0
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fa0c 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f36:	f000 f9a7 	bl	8001288 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	4b7a      	ldr	r3, [pc, #488]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a79      	ldr	r2, [pc, #484]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b77      	ldr	r3, [pc, #476]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f52:	623b      	str	r3, [r7, #32]
 8000f54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	4b73      	ldr	r3, [pc, #460]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a72      	ldr	r2, [pc, #456]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b70      	ldr	r3, [pc, #448]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0320 	and.w	r3, r3, #32
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	4b6c      	ldr	r3, [pc, #432]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a6b      	ldr	r2, [pc, #428]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b69      	ldr	r3, [pc, #420]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	4b65      	ldr	r3, [pc, #404]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a64      	ldr	r2, [pc, #400]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b62      	ldr	r3, [pc, #392]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a5d      	ldr	r2, [pc, #372]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b5b      	ldr	r3, [pc, #364]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b57      	ldr	r3, [pc, #348]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a56      	ldr	r2, [pc, #344]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b54      	ldr	r3, [pc, #336]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001010:	230e      	movs	r3, #14
 8001012:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001018:	4619      	mov	r1, r3
 800101a:	4844      	ldr	r0, [pc, #272]	; (800112c <HAL_LTDC_MspInit+0x248>)
 800101c:	f001 fb46 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001020:	f641 0358 	movw	r3, #6232	; 0x1858
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001032:	230e      	movs	r3, #14
 8001034:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800103a:	4619      	mov	r1, r3
 800103c:	483c      	ldr	r0, [pc, #240]	; (8001130 <HAL_LTDC_MspInit+0x24c>)
 800103e:	f001 fb35 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001042:	2303      	movs	r3, #3
 8001044:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001052:	2309      	movs	r3, #9
 8001054:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001056:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800105a:	4619      	mov	r1, r3
 800105c:	4835      	ldr	r0, [pc, #212]	; (8001134 <HAL_LTDC_MspInit+0x250>)
 800105e:	f001 fb25 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001062:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001066:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001074:	230e      	movs	r3, #14
 8001076:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107c:	4619      	mov	r1, r3
 800107e:	482d      	ldr	r0, [pc, #180]	; (8001134 <HAL_LTDC_MspInit+0x250>)
 8001080:	f001 fb14 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001084:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001088:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001096:	230e      	movs	r3, #14
 8001098:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800109e:	4619      	mov	r1, r3
 80010a0:	4825      	ldr	r0, [pc, #148]	; (8001138 <HAL_LTDC_MspInit+0x254>)
 80010a2:	f001 fb03 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010a6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b8:	230e      	movs	r3, #14
 80010ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010c0:	4619      	mov	r1, r3
 80010c2:	481e      	ldr	r0, [pc, #120]	; (800113c <HAL_LTDC_MspInit+0x258>)
 80010c4:	f001 faf2 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010c8:	2348      	movs	r3, #72	; 0x48
 80010ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d8:	230e      	movs	r3, #14
 80010da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010e0:	4619      	mov	r1, r3
 80010e2:	4817      	ldr	r0, [pc, #92]	; (8001140 <HAL_LTDC_MspInit+0x25c>)
 80010e4:	f001 fae2 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010fa:	2309      	movs	r3, #9
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <HAL_LTDC_MspInit+0x254>)
 8001106:	f001 fad1 	bl	80026ac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	2058      	movs	r0, #88	; 0x58
 8001110:	f000 fdb0 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001114:	2058      	movs	r0, #88	; 0x58
 8001116:	f000 fdc9 	bl	8001cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3768      	adds	r7, #104	; 0x68
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40016800 	.word	0x40016800
 8001128:	40023800 	.word	0x40023800
 800112c:	40021400 	.word	0x40021400
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40021800 	.word	0x40021800
 800113c:	40020800 	.word	0x40020800
 8001140:	40020c00 	.word	0x40020c00

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f000 fc76 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f81c 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f7ff fc34 	bl	80009bc <MX_GPIO_Init>
  MX_CRC_Init();
 8001154:	f7ff f9ce 	bl	80004f4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001158:	f7ff fa2a 	bl	80005b0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800115c:	f7ff fa82 	bl	8000664 <MX_FMC_Init>
  MX_I2C3_Init();
 8001160:	f7ff fd96 	bl	8000c90 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001164:	f7ff fe3e 	bl	8000de4 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001168:	f000 f932 	bl	80013d0 <MX_SPI5_Init>
  MX_DMA_Init();
 800116c:	f7ff f9f8 	bl	8000560 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001170:	f000 fb4c 	bl	800180c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001174:	f000 f88e 	bl	8001294 <MX_RTC_Init>
  MX_TIM1_Init();
 8001178:	f000 fad6 	bl	8001728 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800117c:	f7ff fb92 	bl	80008a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001180:	f009 fa74 	bl	800a66c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001184:	e7fe      	b.n	8001184 <main+0x40>
	...

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f00b fa62 	bl	800c660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <SystemClock_Config+0xd4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a29      	ldr	r2, [pc, #164]	; (800125c <SystemClock_Config+0xd4>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <SystemClock_Config+0xd4>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <SystemClock_Config+0xd8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011d4:	4a22      	ldr	r2, [pc, #136]	; (8001260 <SystemClock_Config+0xd8>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <SystemClock_Config+0xd8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011e8:	2309      	movs	r3, #9
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011f2:	2301      	movs	r3, #1
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f6:	2302      	movs	r3, #2
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001204:	2378      	movs	r3, #120	; 0x78
 8001206:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800120c:	2305      	movs	r3, #5
 800120e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0320 	add.w	r3, r7, #32
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fbcd 	bl	80049b4 <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001220:	f000 f832 	bl	8001288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2302      	movs	r3, #2
 800122a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001230:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2103      	movs	r1, #3
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fe2e 	bl	8004ea4 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800124e:	f000 f81b 	bl	8001288 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001276:	f000 fc01 	bl	8001a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40001000 	.word	0x40001000

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <MX_RTC_Init+0xd0>)
 80012ae:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <MX_RTC_Init+0xd4>)
 80012b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <MX_RTC_Init+0xd0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <MX_RTC_Init+0xd0>)
 80012ba:	227f      	movs	r2, #127	; 0x7f
 80012bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <MX_RTC_Init+0xd0>)
 80012c0:	22ff      	movs	r2, #255	; 0xff
 80012c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <MX_RTC_Init+0xd0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <MX_RTC_Init+0xd0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <MX_RTC_Init+0xd0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012d6:	4823      	ldr	r0, [pc, #140]	; (8001364 <MX_RTC_Init+0xd0>)
 80012d8:	f004 f9f6 	bl	80056c8 <HAL_RTC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012e2:	f7ff ffd1 	bl	8001288 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <MX_RTC_Init+0xd0>)
 8001302:	f004 fa57 	bl	80057b4 <HAL_RTC_SetTime>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800130c:	f7ff ffbc 	bl	8001288 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001310:	2301      	movs	r3, #1
 8001312:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001314:	2301      	movs	r3, #1
 8001316:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001318:	2301      	movs	r3, #1
 800131a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800131c:	2300      	movs	r3, #0
 800131e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	480f      	ldr	r0, [pc, #60]	; (8001364 <MX_RTC_Init+0xd0>)
 8001328:	f004 fade 	bl	80058e8 <HAL_RTC_SetDate>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001332:	f7ff ffa9 	bl	8001288 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_RTC_Init+0xd0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_RTC_Init+0xd0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001346:	60da      	str	r2, [r3, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001348:	2200      	movs	r2, #0
 800134a:	2100      	movs	r1, #0
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_RTC_Init+0xd0>)
 800134e:	f004 fbf1 	bl	8005b34 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001358:	f7ff ff96 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200005c4 	.word	0x200005c4
 8001368:	40002800 	.word	0x40002800

0800136c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08e      	sub	sp, #56	; 0x38
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2230      	movs	r2, #48	; 0x30
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00b f96f 	bl	800c660 <memset>
  if(rtcHandle->Instance==RTC)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_RTC_MspInit+0x5c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d119      	bne.n	80013c0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800138c:	2320      	movs	r3, #32
 800138e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4618      	mov	r0, r3
 800139c:	f003 ffd4 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013a6:	f7ff ff6f 	bl	8001288 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_RTC_MspInit+0x60>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2105      	movs	r1, #5
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 fc5d 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 fc76 	bl	8001cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	; 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40002800 	.word	0x40002800
 80013cc:	42470e3c 	.word	0x42470e3c

080013d0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <MX_SPI5_Init+0x64>)
 80013d6:	4a18      	ldr	r2, [pc, #96]	; (8001438 <MX_SPI5_Init+0x68>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_SPI5_Init+0x64>)
 80013dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_SPI5_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_SPI5_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI5_Init+0x64>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_SPI5_Init+0x64>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_SPI5_Init+0x64>)
 80013fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001400:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_SPI5_Init+0x64>)
 8001404:	2218      	movs	r2, #24
 8001406:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <MX_SPI5_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_SPI5_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <MX_SPI5_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_SPI5_Init+0x64>)
 800141c:	220a      	movs	r2, #10
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <MX_SPI5_Init+0x64>)
 8001422:	f004 fca9 	bl	8005d78 <HAL_SPI_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800142c:	f7ff ff2c 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200005e4 	.word	0x200005e4
 8001438:	40015000 	.word	0x40015000

0800143c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_SPI_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12c      	bne.n	80014b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_SPI_MspInit+0x88>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_SPI_MspInit+0x88>)
 8001468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_SPI_MspInit+0x88>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_SPI_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_SPI_MspInit+0x88>)
 8001484:	f043 0320 	orr.w	r3, r3, #32
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_SPI_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0320 	and.w	r3, r3, #32
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001496:	f44f 7360 	mov.w	r3, #896	; 0x380
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014a8:	2305      	movs	r3, #5
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <HAL_SPI_MspInit+0x8c>)
 80014b4:	f001 f8fa 	bl	80026ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40015000 	.word	0x40015000
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40021400 	.word	0x40021400

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_MspInit+0x54>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_MspInit+0x54>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x54>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_MspInit+0x54>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <HAL_MspInit+0x54>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_MspInit+0x54>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	210f      	movs	r1, #15
 800150e:	f06f 0001 	mvn.w	r0, #1
 8001512:	f000 fbaf 	bl	8001c74 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2036      	movs	r0, #54	; 0x36
 800153a:	f000 fb9b 	bl	8001c74 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800153e:	2036      	movs	r0, #54	; 0x36
 8001540:	f000 fbb4 	bl	8001cac <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <HAL_InitTick+0xa4>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a1e      	ldr	r2, [pc, #120]	; (80015c8 <HAL_InitTick+0xa4>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_InitTick+0xa4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f003 feba 	bl	80052e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001570:	f003 fe90 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8001574:	4603      	mov	r3, r0
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_InitTick+0xa8>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	3b01      	subs	r3, #1
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_InitTick+0xac>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_InitTick+0xb0>)
 800158c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_InitTick+0xac>)
 8001590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001594:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001596:	4a0e      	ldr	r2, [pc, #56]	; (80015d0 <HAL_InitTick+0xac>)
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <HAL_InitTick+0xac>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_InitTick+0xac>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <HAL_InitTick+0xac>)
 80015aa:	f004 fc6e 	bl	8005e8a <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d104      	bne.n	80015be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015b4:	4806      	ldr	r0, [pc, #24]	; (80015d0 <HAL_InitTick+0xac>)
 80015b6:	f004 fcb7 	bl	8005f28 <HAL_TIM_Base_Start_IT>
 80015ba:	4603      	mov	r3, r0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3730      	adds	r7, #48	; 0x30
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	2000063c 	.word	0x2000063c
 80015d4:	40001000 	.word	0x40001000

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <RTC_WKUP_IRQHandler+0x10>)
 800160a:	f004 fb53 	bl	8005cb4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200005c4 	.word	0x200005c4

08001618 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM6_DAC_IRQHandler+0x10>)
 800161e:	f004 fcf3 	bl	8006008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000063c 	.word	0x2000063c

0800162c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <DMA2_Stream2_IRQHandler+0x10>)
 8001632:	f000 fc13 	bl	8001e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000710 	.word	0x20000710

08001640 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DMA2_Stream7_IRQHandler+0x10>)
 8001646:	f000 fc09 	bl	8001e5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000770 	.word	0x20000770

08001654 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800165a:	f002 f87e 	bl	800375a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20009e08 	.word	0x20009e08

08001668 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 800166e:	f002 f874 	bl	800375a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20009e08 	.word	0x20009e08

0800167c <OTG_HS_WKUP_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS wake-up interrupt through EXTI line 20.
  */
void OTG_HS_WKUP_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_WKUP_IRQn 0 */

  /* USER CODE END OTG_HS_WKUP_IRQn 0 */
  if ((&hpcd_USB_OTG_HS)->Init.low_power_enable) {
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <OTG_HS_WKUP_IRQHandler+0x40>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <OTG_HS_WKUP_IRQHandler+0x1c>
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <OTG_HS_WKUP_IRQHandler+0x44>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	4a0c      	ldr	r2, [pc, #48]	; (80016c0 <OTG_HS_WKUP_IRQHandler+0x44>)
 800168e:	f023 0306 	bic.w	r3, r3, #6
 8001692:	6113      	str	r3, [r2, #16]
    SystemClock_Config();
 8001694:	f7ff fd78 	bl	8001188 <SystemClock_Config>
  }
  __HAL_PCD_UNGATE_PHYCLOCK(&hpcd_USB_OTG_HS);
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <OTG_HS_WKUP_IRQHandler+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a06      	ldr	r2, [pc, #24]	; (80016bc <OTG_HS_WKUP_IRQHandler+0x40>)
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6013      	str	r3, [r2, #0]
  /* Clear EXTI pending bit */
  __HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG();
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <OTG_HS_WKUP_IRQHandler+0x48>)
 80016b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016b6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN OTG_HS_WKUP_IRQn 1 */

  /* USER CODE END OTG_HS_WKUP_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20009e08 	.word	0x20009e08
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <OTG_HS_IRQHandler+0x10>)
 80016ce:	f002 f844 	bl	800375a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20009e08 	.word	0x20009e08

080016dc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <LTDC_IRQHandler+0x10>)
 80016e2:	f001 fc53 	bl	8002f8c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000051c 	.word	0x2000051c

080016f0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA2D_IRQHandler+0x10>)
 80016f6:	f000 fe36 	bl	8002366 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000188 	.word	0x20000188

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001744:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_TIM1_Init+0x98>)
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <MX_TIM1_Init+0x9c>)
 8001748:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_TIM1_Init+0x98>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_TIM1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM1_Init+0x98>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM1_Init+0x98>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM1_Init+0x98>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM1_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM1_Init+0x98>)
 8001772:	f004 fb8a 	bl	8005e8a <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800177c:	f7ff fd84 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM1_Init+0x98>)
 800178e:	f004 fd43 	bl	8006218 <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001798:	f7ff fd76 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM1_Init+0x98>)
 80017aa:	f004 ff5f 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017b4:	f7ff fd68 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000684 	.word	0x20000684
 80017c4:	40010000 	.word	0x40010000

080017c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_TIM_Base_MspInit+0x3c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10d      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_TIM_Base_MspInit+0x40>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_TIM_Base_MspInit+0x40>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_TIM_Base_MspInit+0x40>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40010000 	.word	0x40010000
 8001808:	40023800 	.word	0x40023800

0800180c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_USART1_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART1_UART_Init+0x4c>)
 8001844:	f004 ffa2 	bl	800678c <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f7ff fd1b 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200006cc 	.word	0x200006cc
 800185c:	40011000 	.word	0x40011000

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a52      	ldr	r2, [pc, #328]	; (80019c8 <HAL_UART_MspInit+0x168>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 809d 	bne.w	80019be <HAL_UART_MspInit+0x15e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_UART_MspInit+0x16c>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_UART_MspInit+0x16c>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6453      	str	r3, [r2, #68]	; 0x44
 8001894:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <HAL_UART_MspInit+0x16c>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
 80018b0:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_UART_MspInit+0x16c>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ce:	2307      	movs	r3, #7
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	483d      	ldr	r0, [pc, #244]	; (80019d0 <HAL_UART_MspInit+0x170>)
 80018da:	f000 fee7 	bl	80026ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018e0:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <HAL_UART_MspInit+0x178>)
 80018e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80018e4:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018f8:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001900:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001906:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800190e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001912:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b2f      	ldr	r3, [pc, #188]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800191c:	2204      	movs	r2, #4
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001922:	2203      	movs	r2, #3
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001926:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001932:	4828      	ldr	r0, [pc, #160]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001934:	f000 f9e4 	bl	8001d00 <HAL_DMA_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800193e:	f7ff fca3 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001946:	639a      	str	r2, [r3, #56]	; 0x38
 8001948:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_UART_MspInit+0x180>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001956:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800195a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_UART_MspInit+0x17c>)
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001968:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_UART_MspInit+0x17c>)
 800196a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x17c>)
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_UART_MspInit+0x17c>)
 800198c:	2204      	movs	r2, #4
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001992:	2203      	movs	r2, #3
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x17c>)
 8001998:	2200      	movs	r2, #0
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_UART_MspInit+0x17c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <HAL_UART_MspInit+0x17c>)
 80019a4:	f000 f9ac 	bl	8001d00 <HAL_DMA_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 80019ae:	f7ff fc6b 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_UART_MspInit+0x17c>)
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <HAL_UART_MspInit+0x17c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40011000 	.word	0x40011000
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	20000710 	.word	0x20000710
 80019d8:	40026440 	.word	0x40026440
 80019dc:	20000770 	.word	0x20000770
 80019e0:	400264b8 	.word	0x400264b8

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff fe79 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f00a fdff 	bl	800c614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fb95 	bl	8001144 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001a28:	0800c990 	.word	0x0800c990
  ldr r2, =_sbss
 8001a2c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001a30:	2000a53c 	.word	0x2000a53c

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f8fc 	bl	8001c5e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fd5c 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fd2e 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	200007d0 	.word	0x200007d0

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	200007d0 	.word	0x200007d0

08001abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff ffee 	bl	8001aa4 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d005      	beq.n	8001ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_Delay+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae2:	bf00      	nop
 8001ae4:	f7ff ffde 	bl	8001aa4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f7      	bhi.n	8001ae4 <HAL_Delay+0x28>
  {
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000008 	.word	0x20000008

08001b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b20:	4013      	ands	r3, r2
 8001b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x44>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__NVIC_GetPriorityGrouping+0x18>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	f003 0307 	and.w	r3, r3, #7
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db0b      	blt.n	8001b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 021f 	and.w	r2, r3, #31
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <__NVIC_EnableIRQ+0x38>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	095b      	lsrs	r3, r3, #5
 8001b88:	2001      	movs	r0, #1
 8001b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff4c 	bl	8001b04 <__NVIC_SetPriorityGrouping>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c86:	f7ff ff61 	bl	8001b4c <__NVIC_GetPriorityGrouping>
 8001c8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	6978      	ldr	r0, [r7, #20]
 8001c92:	f7ff ffb1 	bl	8001bf8 <NVIC_EncodePriority>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff80 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ca4:	bf00      	nop
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff54 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00e      	b.n	8001cf8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	795b      	ldrb	r3, [r3, #5]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fc16 	bl	800051c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff feca 	bl	8001aa4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e099      	b.n	8001e50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d3c:	e00f      	b.n	8001d5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d3e:	f7ff feb1 	bl	8001aa4 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d908      	bls.n	8001d5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2220      	movs	r2, #32
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2203      	movs	r2, #3
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e078      	b.n	8001e50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e8      	bne.n	8001d3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <HAL_DMA_Init+0x158>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d107      	bne.n	8001dc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0307 	bic.w	r3, r3, #7
 8001dde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d117      	bne.n	8001e22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f9e9 	bl	80021dc <DMA_CheckFifoParam>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2240      	movs	r2, #64	; 0x40
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e016      	b.n	8001e50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f9a0 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8001e30:	4603      	mov	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e38:	223f      	movs	r2, #63	; 0x3f
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	f010803f 	.word	0xf010803f

08001e5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e68:	4b8e      	ldr	r3, [pc, #568]	; (80020a4 <HAL_DMA_IRQHandler+0x248>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a8e      	ldr	r2, [pc, #568]	; (80020a8 <HAL_DMA_IRQHandler+0x24c>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2208      	movs	r2, #8
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01a      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d013      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0204 	bic.w	r2, r2, #4
 8001eae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec0:	f043 0201 	orr.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	2201      	movs	r2, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d012      	beq.n	8001efe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f043 0202 	orr.w	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2204      	movs	r2, #4
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2204      	movs	r2, #4
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0204 	orr.w	r2, r3, #4
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	2210      	movs	r2, #16
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d043      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03c      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2210      	movs	r2, #16
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d018      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d024      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
 8001f8a:	e01f      	b.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e016      	b.n	8001fcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0208 	bic.w	r2, r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 808f 	beq.w	80020fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8087 	beq.w	80020fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b05      	cmp	r3, #5
 8002004:	d136      	bne.n	8002074 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0216 	bic.w	r2, r2, #22
 8002014:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002024:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <HAL_DMA_IRQHandler+0x1da>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0208 	bic.w	r2, r2, #8
 8002044:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	223f      	movs	r2, #63	; 0x3f
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	2b00      	cmp	r3, #0
 8002068:	d07e      	beq.n	8002168 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	4798      	blx	r3
        }
        return;
 8002072:	e079      	b.n	8002168 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01d      	beq.n	80020be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	2b00      	cmp	r3, #0
 8002096:	d031      	beq.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e02c      	b.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000
 80020a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e01e      	b.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0210 	bic.w	r2, r2, #16
 80020da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	2b00      	cmp	r3, #0
 8002102:	d032      	beq.n	800216a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d022      	beq.n	8002156 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2205      	movs	r2, #5
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3301      	adds	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d307      	bcc.n	8002144 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f2      	bne.n	8002128 <HAL_DMA_IRQHandler+0x2cc>
 8002142:	e000      	b.n	8002146 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002144:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
 8002166:	e000      	b.n	800216a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002168:	bf00      	nop
    }
  }
}
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3b10      	subs	r3, #16
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <DMA_CalcBaseAndBitshift+0x68>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d909      	bls.n	80021b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	1d1a      	adds	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	; 0x58
 80021b0:	e007      	b.n	80021c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	aaaaaaab 	.word	0xaaaaaaab
 80021d8:	0800c918 	.word	0x0800c918

080021dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11f      	bne.n	8002236 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d856      	bhi.n	80022aa <DMA_CheckFifoParam+0xce>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <DMA_CheckFifoParam+0x28>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002215 	.word	0x08002215
 8002208:	08002227 	.word	0x08002227
 800220c:	08002215 	.word	0x08002215
 8002210:	080022ab 	.word	0x080022ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d046      	beq.n	80022ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002224:	e043      	b.n	80022ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800222e:	d140      	bne.n	80022b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002234:	e03d      	b.n	80022b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223e:	d121      	bne.n	8002284 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d837      	bhi.n	80022b6 <DMA_CheckFifoParam+0xda>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <DMA_CheckFifoParam+0x70>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002263 	.word	0x08002263
 8002254:	0800225d 	.word	0x0800225d
 8002258:	08002275 	.word	0x08002275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      break;
 8002260:	e030      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d025      	beq.n	80022ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002272:	e022      	b.n	80022ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800227c:	d11f      	bne.n	80022be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002282:	e01c      	b.n	80022be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d903      	bls.n	8002292 <DMA_CheckFifoParam+0xb6>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d003      	beq.n	8002298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002290:	e018      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      break;
 8002296:	e015      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e00b      	b.n	80022c2 <DMA_CheckFifoParam+0xe6>
      break;
 80022aa:	bf00      	nop
 80022ac:	e00a      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e008      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e006      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e004      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e002      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
    }
  } 
  
  return status; 
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e03b      	b.n	800235e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe f98a 	bl	8000614 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	f023 0107 	bic.w	r1, r3, #7
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800233e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68d1      	ldr	r1, [r2, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	430b      	orrs	r3, r1
 800234c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d026      	beq.n	80023d6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d021      	beq.n	80023d6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023a0:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2201      	movs	r2, #1
 80023b4:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d026      	beq.n	800242e <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d021      	beq.n	800242e <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	f043 0202 	orr.w	r2, r3, #2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d026      	beq.n	8002486 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243e:	2b00      	cmp	r3, #0
 8002440:	d021      	beq.n	8002486 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002450:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2208      	movs	r2, #8
 8002458:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	f043 0204 	orr.w	r2, r3, #4
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2204      	movs	r2, #4
 800246a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2204      	movs	r2, #4
 80024b0:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f853 	bl	800255e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d024      	beq.n	800250c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01f      	beq.n	800250c <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2202      	movs	r2, #2
 80024e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01f      	beq.n	8002556 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01a      	beq.n	8002556 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800252e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2210      	movs	r2, #16
 8002536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f80e 	bl	8002572 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_DMA2D_ConfigLayer+0x20>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e079      	b.n	800269c <HAL_DMA2D_ConfigLayer+0x114>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	3318      	adds	r3, #24
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80025d4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b0a      	cmp	r3, #10
 80025dc:	d003      	beq.n	80025e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d107      	bne.n	80025f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e005      	b.n	8002602 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d120      	bne.n	800264a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	ea02 0103 	and.w	r1, r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	430a      	orrs	r2, r1
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d003      	beq.n	800263a <HAL_DMA2D_ConfigLayer+0xb2>
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b09      	cmp	r3, #9
 8002638:	d127      	bne.n	800268a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
 8002648:	e01f      	b.n	800268a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43db      	mvns	r3, r3
 8002654:	ea02 0103 	and.w	r1, r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	430a      	orrs	r2, r1
 8002660:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b0a      	cmp	r3, #10
 8002672:	d003      	beq.n	800267c <HAL_DMA2D_ConfigLayer+0xf4>
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d106      	bne.n	800268a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002688:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	ff03000f 	.word	0xff03000f

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e177      	b.n	80029b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8166 	bne.w	80029b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80c0 	beq.w	80029b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_GPIO_Init+0x324>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a61      	ldr	r2, [pc, #388]	; (80029d4 <HAL_GPIO_Init+0x328>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a58      	ldr	r2, [pc, #352]	; (80029d8 <HAL_GPIO_Init+0x32c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d037      	beq.n	80028ea <HAL_GPIO_Init+0x23e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a57      	ldr	r2, [pc, #348]	; (80029dc <HAL_GPIO_Init+0x330>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d031      	beq.n	80028e6 <HAL_GPIO_Init+0x23a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a56      	ldr	r2, [pc, #344]	; (80029e0 <HAL_GPIO_Init+0x334>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d02b      	beq.n	80028e2 <HAL_GPIO_Init+0x236>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_GPIO_Init+0x338>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d025      	beq.n	80028de <HAL_GPIO_Init+0x232>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a54      	ldr	r2, [pc, #336]	; (80029e8 <HAL_GPIO_Init+0x33c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01f      	beq.n	80028da <HAL_GPIO_Init+0x22e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a53      	ldr	r2, [pc, #332]	; (80029ec <HAL_GPIO_Init+0x340>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d019      	beq.n	80028d6 <HAL_GPIO_Init+0x22a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_GPIO_Init+0x344>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d013      	beq.n	80028d2 <HAL_GPIO_Init+0x226>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_GPIO_Init+0x348>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00d      	beq.n	80028ce <HAL_GPIO_Init+0x222>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a50      	ldr	r2, [pc, #320]	; (80029f8 <HAL_GPIO_Init+0x34c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <HAL_GPIO_Init+0x21e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <HAL_GPIO_Init+0x350>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_GPIO_Init+0x21a>
 80028c2:	2309      	movs	r3, #9
 80028c4:	e012      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028c6:	230a      	movs	r3, #10
 80028c8:	e010      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028ca:	2308      	movs	r3, #8
 80028cc:	e00e      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028ce:	2307      	movs	r3, #7
 80028d0:	e00c      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028d2:	2306      	movs	r3, #6
 80028d4:	e00a      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028d6:	2305      	movs	r3, #5
 80028d8:	e008      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028da:	2304      	movs	r3, #4
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028de:	2303      	movs	r3, #3
 80028e0:	e004      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e002      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <HAL_GPIO_Init+0x240>
 80028ea:	2300      	movs	r3, #0
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f002 0203 	and.w	r2, r2, #3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4093      	lsls	r3, r2
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028fc:	4935      	ldr	r1, [pc, #212]	; (80029d4 <HAL_GPIO_Init+0x328>)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	089b      	lsrs	r3, r3, #2
 8002902:	3302      	adds	r3, #2
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_GPIO_Init+0x354>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800292e:	4a34      	ldr	r2, [pc, #208]	; (8002a00 <HAL_GPIO_Init+0x354>)
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <HAL_GPIO_Init+0x354>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_GPIO_Init+0x354>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800295e:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_GPIO_Init+0x354>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_GPIO_Init+0x354>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_GPIO_Init+0x354>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_GPIO_Init+0x354>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b0f      	cmp	r3, #15
 80029bc:	f67f ae84 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	bf00      	nop
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020400 	.word	0x40020400
 80029e0:	40020800 	.word	0x40020800
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40021400 	.word	0x40021400
 80029f0:	40021800 	.word	0x40021800
 80029f4:	40021c00 	.word	0x40021c00
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40022400 	.word	0x40022400
 8002a00:	40013c00 	.word	0x40013c00

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	807b      	strh	r3, [r7, #2]
 8002a10:	4613      	mov	r3, r2
 8002a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a14:	787b      	ldrb	r3, [r7, #1]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a1a:	887a      	ldrh	r2, [r7, #2]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a20:	e003      	b.n	8002a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a48:	887a      	ldrh	r2, [r7, #2]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	041a      	lsls	r2, r3, #16
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	400b      	ands	r3, r1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e12b      	b.n	8002cd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe f93c 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2224      	movs	r2, #36	; 0x24
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f002 fbe0 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4a81      	ldr	r2, [pc, #516]	; (8002ce0 <HAL_I2C_Init+0x274>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d807      	bhi.n	8002af0 <HAL_I2C_Init+0x84>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a80      	ldr	r2, [pc, #512]	; (8002ce4 <HAL_I2C_Init+0x278>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	bf94      	ite	ls
 8002ae8:	2301      	movls	r3, #1
 8002aea:	2300      	movhi	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e006      	b.n	8002afe <HAL_I2C_Init+0x92>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a7d      	ldr	r2, [pc, #500]	; (8002ce8 <HAL_I2C_Init+0x27c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	bf94      	ite	ls
 8002af8:	2301      	movls	r3, #1
 8002afa:	2300      	movhi	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0e7      	b.n	8002cd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a78      	ldr	r2, [pc, #480]	; (8002cec <HAL_I2C_Init+0x280>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_I2C_Init+0x274>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d802      	bhi.n	8002b40 <HAL_I2C_Init+0xd4>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	e009      	b.n	8002b54 <HAL_I2C_Init+0xe8>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	4a69      	ldr	r2, [pc, #420]	; (8002cf0 <HAL_I2C_Init+0x284>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	099b      	lsrs	r3, r3, #6
 8002b52:	3301      	adds	r3, #1
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	495c      	ldr	r1, [pc, #368]	; (8002ce0 <HAL_I2C_Init+0x274>)
 8002b70:	428b      	cmp	r3, r1
 8002b72:	d819      	bhi.n	8002ba8 <HAL_I2C_Init+0x13c>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1e59      	subs	r1, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b88:	400b      	ands	r3, r1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_I2C_Init+0x138>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1e59      	subs	r1, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	e051      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	e04f      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <HAL_I2C_Init+0x168>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1e58      	subs	r0, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	440b      	add	r3, r1
 8002bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e012      	b.n	8002bfa <HAL_I2C_Init+0x18e>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e58      	subs	r0, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	0099      	lsls	r1, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Init+0x196>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10e      	bne.n	8002c28 <HAL_I2C_Init+0x1bc>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1e58      	subs	r0, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	440b      	add	r3, r1
 8002c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	e00f      	b.n	8002c48 <HAL_I2C_Init+0x1dc>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	6809      	ldr	r1, [r1, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6911      	ldr	r1, [r2, #16]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	000186a0 	.word	0x000186a0
 8002ce4:	001e847f 	.word	0x001e847f
 8002ce8:	003d08ff 	.word	0x003d08ff
 8002cec:	431bde83 	.word	0x431bde83
 8002cf0:	10624dd3 	.word	0x10624dd3

08002cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d129      	bne.n	8002d5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2224      	movs	r2, #36	; 0x24
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0201 	orr.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
  }
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d12a      	bne.n	8002ddc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2224      	movs	r2, #36	; 0x24
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	f023 030f 	bic.w	r3, r3, #15
 8002dac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	89fa      	ldrh	r2, [r7, #14]
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0bf      	b.n	8002f7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f866 	bl	8000ee4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002e2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <HAL_LTDC_Init+0x19c>)
 8002e60:	400b      	ands	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68d9      	ldr	r1, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <HAL_LTDC_Init+0x19c>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68d9      	ldr	r1, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6919      	ldr	r1, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <HAL_LTDC_Init+0x19c>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6919      	ldr	r1, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6959      	ldr	r1, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_LTDC_Init+0x19c>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6959      	ldr	r1, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0206 	orr.w	r2, r2, #6
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	f000f800 	.word	0xf000f800

08002f8c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d023      	beq.n	8002ff6 <HAL_LTDC_IRQHandler+0x6a>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01e      	beq.n	8002ff6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f86f 	bl	80030d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d023      	beq.n	8003048 <HAL_LTDC_IRQHandler+0xbc>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d01e      	beq.n	8003048 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0202 	bic.w	r2, r2, #2
 8003018:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2202      	movs	r2, #2
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003028:	f043 0202 	orr.w	r2, r3, #2
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f846 	bl	80030d4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01b      	beq.n	800308a <HAL_LTDC_IRQHandler+0xfe>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2201      	movs	r2, #1
 8003072:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f82f 	bl	80030e8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HAL_LTDC_IRQHandler+0x140>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2208      	movs	r2, #8
 80030b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f818 	bl	80030fc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_LTDC_ConfigLayer+0x1a>
 8003126:	2302      	movs	r3, #2
 8003128:	e02c      	b.n	8003184 <HAL_LTDC_ConfigLayer+0x74>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2134      	movs	r1, #52	; 0x34
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f811 	bl	800318c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}

0800318c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	0c1b      	lsrs	r3, r3, #16
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	4413      	add	r3, r2
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	01db      	lsls	r3, r3, #7
 80031b8:	4413      	add	r3, r2
 80031ba:	3384      	adds	r3, #132	; 0x84
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	4611      	mov	r1, r2
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	01d2      	lsls	r2, r2, #7
 80031c8:	440a      	add	r2, r1
 80031ca:	3284      	adds	r2, #132	; 0x84
 80031cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80031d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031e2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031e4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	01db      	lsls	r3, r3, #7
 80031f0:	440b      	add	r3, r1
 80031f2:	3384      	adds	r3, #132	; 0x84
 80031f4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320a:	4413      	add	r3, r2
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	01db      	lsls	r3, r3, #7
 800321a:	4413      	add	r3, r2
 800321c:	3384      	adds	r3, #132	; 0x84
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	4611      	mov	r1, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	01d2      	lsls	r2, r2, #7
 800322a:	440a      	add	r2, r1
 800322c:	3284      	adds	r2, #132	; 0x84
 800322e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003232:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003242:	4413      	add	r3, r2
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	01db      	lsls	r3, r3, #7
 8003250:	440b      	add	r3, r1
 8003252:	3384      	adds	r3, #132	; 0x84
 8003254:	4619      	mov	r1, r3
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	4413      	add	r3, r2
 8003268:	3384      	adds	r3, #132	; 0x84
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	4611      	mov	r1, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	01d2      	lsls	r2, r2, #7
 8003276:	440a      	add	r2, r1
 8003278:	3284      	adds	r2, #132	; 0x84
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	01db      	lsls	r3, r3, #7
 800328a:	4413      	add	r3, r2
 800328c:	3384      	adds	r3, #132	; 0x84
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	01db      	lsls	r3, r3, #7
 80032bc:	4413      	add	r3, r2
 80032be:	3384      	adds	r3, #132	; 0x84
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	01db      	lsls	r3, r3, #7
 80032cc:	4413      	add	r3, r2
 80032ce:	3384      	adds	r3, #132	; 0x84
 80032d0:	461a      	mov	r2, r3
 80032d2:	2300      	movs	r3, #0
 80032d4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032dc:	461a      	mov	r2, r3
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	01db      	lsls	r3, r3, #7
 80032f0:	440b      	add	r3, r1
 80032f2:	3384      	adds	r3, #132	; 0x84
 80032f4:	4619      	mov	r1, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	461a      	mov	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	01db      	lsls	r3, r3, #7
 8003306:	4413      	add	r3, r2
 8003308:	3384      	adds	r3, #132	; 0x84
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4611      	mov	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	01d2      	lsls	r2, r2, #7
 8003316:	440a      	add	r2, r1
 8003318:	3284      	adds	r2, #132	; 0x84
 800331a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800331e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	01db      	lsls	r3, r3, #7
 800332a:	4413      	add	r3, r2
 800332c:	3384      	adds	r3, #132	; 0x84
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	01db      	lsls	r3, r3, #7
 8003340:	4413      	add	r3, r2
 8003342:	3384      	adds	r3, #132	; 0x84
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	4611      	mov	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	01d2      	lsls	r2, r2, #7
 8003350:	440a      	add	r2, r1
 8003352:	3284      	adds	r2, #132	; 0x84
 8003354:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003358:	f023 0307 	bic.w	r3, r3, #7
 800335c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	69da      	ldr	r2, [r3, #28]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	6809      	ldr	r1, [r1, #0]
 800336a:	4608      	mov	r0, r1
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	01c9      	lsls	r1, r1, #7
 8003370:	4401      	add	r1, r0
 8003372:	3184      	adds	r1, #132	; 0x84
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	01db      	lsls	r3, r3, #7
 8003382:	4413      	add	r3, r2
 8003384:	3384      	adds	r3, #132	; 0x84
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	01db      	lsls	r3, r3, #7
 8003392:	4413      	add	r3, r2
 8003394:	3384      	adds	r3, #132	; 0x84
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	01db      	lsls	r3, r3, #7
 80033a6:	4413      	add	r3, r2
 80033a8:	3384      	adds	r3, #132	; 0x84
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80033ba:	2304      	movs	r3, #4
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e01b      	b.n	80033f8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d102      	bne.n	80033ce <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80033c8:	2303      	movs	r3, #3
 80033ca:	61fb      	str	r3, [r7, #28]
 80033cc:	e014      	b.n	80033f8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00b      	beq.n	80033ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d007      	beq.n	80033ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d003      	beq.n	80033ee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	d102      	bne.n	80033f4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80033ee:	2302      	movs	r3, #2
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e001      	b.n	80033f8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80033f4:	2301      	movs	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	01db      	lsls	r3, r3, #7
 8003402:	4413      	add	r3, r2
 8003404:	3384      	adds	r3, #132	; 0x84
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	6812      	ldr	r2, [r2, #0]
 800340c:	4611      	mov	r1, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	01d2      	lsls	r2, r2, #7
 8003412:	440a      	add	r2, r1
 8003414:	3284      	adds	r2, #132	; 0x84
 8003416:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800341a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6859      	ldr	r1, [r3, #4]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	1acb      	subs	r3, r1, r3
 8003432:	69f9      	ldr	r1, [r7, #28]
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	6809      	ldr	r1, [r1, #0]
 800343e:	4608      	mov	r0, r1
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	01c9      	lsls	r1, r1, #7
 8003444:	4401      	add	r1, r0
 8003446:	3184      	adds	r1, #132	; 0x84
 8003448:	4313      	orrs	r3, r2
 800344a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	01db      	lsls	r3, r3, #7
 8003456:	4413      	add	r3, r2
 8003458:	3384      	adds	r3, #132	; 0x84
 800345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	4611      	mov	r1, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	01d2      	lsls	r2, r2, #7
 8003466:	440a      	add	r2, r1
 8003468:	3284      	adds	r2, #132	; 0x84
 800346a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	01db      	lsls	r3, r3, #7
 800347e:	4413      	add	r3, r2
 8003480:	3384      	adds	r3, #132	; 0x84
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	01db      	lsls	r3, r3, #7
 8003494:	4413      	add	r3, r2
 8003496:	3384      	adds	r3, #132	; 0x84
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	4611      	mov	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	01d2      	lsls	r2, r2, #7
 80034a4:	440a      	add	r2, r1
 80034a6:	3284      	adds	r2, #132	; 0x84
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6013      	str	r3, [r2, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034bc:	b08f      	sub	sp, #60	; 0x3c
 80034be:	af0a      	add	r7, sp, #40	; 0x28
 80034c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e10f      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f008 fd3c 	bl	800bf64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fddb 	bl	80070c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	687e      	ldr	r6, [r7, #4]
 8003518:	466d      	mov	r5, sp
 800351a:	f106 0410 	add.w	r4, r6, #16
 800351e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800352a:	e885 0003 	stmia.w	r5, {r0, r1}
 800352e:	1d33      	adds	r3, r6, #4
 8003530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f003 fcb2 	bl	8006e9c <USB_CoreInit>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2202      	movs	r2, #2
 8003542:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0d0      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fdc9 	bl	80070e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e04a      	b.n	80035f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	333d      	adds	r3, #61	; 0x3d
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333c      	adds	r3, #60	; 0x3c
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	b298      	uxth	r0, r3
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3344      	adds	r3, #68	; 0x44
 8003598:	4602      	mov	r2, r0
 800359a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	3340      	adds	r3, #64	; 0x40
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3348      	adds	r3, #72	; 0x48
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334c      	adds	r3, #76	; 0x4c
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3354      	adds	r3, #84	; 0x54
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	3301      	adds	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d3af      	bcc.n	800355c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e044      	b.n	800368c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	3301      	adds	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3b5      	bcc.n	8003602 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	687e      	ldr	r6, [r7, #4]
 800369e:	466d      	mov	r5, sp
 80036a0:	f106 0410 	add.w	r4, r6, #16
 80036a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b4:	1d33      	adds	r3, r6, #4
 80036b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f003 fd61 	bl	8007180 <USB_DevInit>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e00d      	b.n	80036ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 feb0 	bl	800844a <USB_DevDisconnect>

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_PCD_Start+0x1c>
 800370c:	2302      	movs	r3, #2
 800370e:	e020      	b.n	8003752 <HAL_PCD_Start+0x5e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b01      	cmp	r3, #1
 800371e:	d109      	bne.n	8003734 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003724:	2b01      	cmp	r3, #1
 8003726:	d005      	beq.n	8003734 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f003 fcb3 	bl	80070a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fe60 	bl	8008408 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b08d      	sub	sp, #52	; 0x34
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f004 ff1e 	bl	80085b2 <USB_GetMode>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 848a 	bne.w	8004092 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f004 fe82 	bl	800848c <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8480 	beq.w	8004090 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fe6f 	bl	800848c <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d107      	bne.n	80037c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f002 0202 	and.w	r2, r2, #2
 80037c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f004 fe5d 	bl	800848c <USB_ReadInterrupts>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d161      	bne.n	80038a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0210 	bic.w	r2, r2, #16
 80037ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	0c5b      	lsrs	r3, r3, #17
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	2b02      	cmp	r3, #2
 8003816:	d124      	bne.n	8003862 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d035      	beq.n	8003890 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800382e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	6a38      	ldr	r0, [r7, #32]
 8003838:	f004 fc94 	bl	8008164 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003848:	441a      	add	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800385a:	441a      	add	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	621a      	str	r2, [r3, #32]
 8003860:	e016      	b.n	8003890 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	0c5b      	lsrs	r3, r3, #17
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	2b06      	cmp	r3, #6
 800386c:	d110      	bne.n	8003890 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003874:	2208      	movs	r2, #8
 8003876:	4619      	mov	r1, r3
 8003878:	6a38      	ldr	r0, [r7, #32]
 800387a:	f004 fc73 	bl	8008164 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388a:	441a      	add	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0210 	orr.w	r2, r2, #16
 800389e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f004 fdf1 	bl	800848c <USB_ReadInterrupts>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038b4:	f040 80a7 	bne.w	8003a06 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 fdf6 	bl	80084b2 <USB_ReadDevAllOutEpInterrupt>
 80038c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038c8:	e099      	b.n	80039fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 808e 	beq.w	80039f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fe1a 	bl	800851a <USB_ReadDevOutEPInterrupt>
 80038e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	2301      	movs	r3, #1
 8003902:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fec2 	bl	8004690 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	461a      	mov	r2, r3
 8003924:	2308      	movs	r3, #8
 8003926:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff98 	bl	8004860 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	2310      	movs	r3, #16
 800394a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d030      	beq.n	80039b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d109      	bne.n	8003976 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003970:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003974:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	4413      	add	r3, r2
 8003988:	3304      	adds	r3, #4
 800398a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d108      	bne.n	80039a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2200      	movs	r2, #0
 8003998:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f008 fc23 	bl	800c1ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	461a      	mov	r2, r3
 80039b4:	2302      	movs	r3, #2
 80039b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ce:	461a      	mov	r2, r3
 80039d0:	2320      	movs	r3, #32
 80039d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	461a      	mov	r2, r3
 80039ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	3301      	adds	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f af62 	bne.w	80038ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fd3e 	bl	800848c <USB_ReadInterrupts>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1a:	f040 80db 	bne.w	8003bd4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f004 fd5f 	bl	80084e6 <USB_ReadDevAllInEpInterrupt>
 8003a28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a2e:	e0cd      	b.n	8003bcc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80c2 	beq.w	8003bc0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f004 fd85 	bl	8008556 <USB_ReadDevInEPInterrupt>
 8003a4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d057      	beq.n	8003b08 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	2201      	movs	r2, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69f9      	ldr	r1, [r7, #28]
 8003a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a78:	4013      	ands	r3, r2
 8003a7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d132      	bne.n	8003afc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	334c      	adds	r3, #76	; 0x4c
 8003aa6:	6819      	ldr	r1, [r3, #0]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4403      	add	r3, r0
 8003ab6:	3348      	adds	r3, #72	; 0x48
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4419      	add	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	334c      	adds	r3, #76	; 0x4c
 8003acc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d113      	bne.n	8003afc <HAL_PCD_IRQHandler+0x3a2>
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3354      	adds	r3, #84	; 0x54
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d108      	bne.n	8003afc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003af4:	461a      	mov	r2, r3
 8003af6:	2101      	movs	r1, #1
 8003af8:	f004 fd8c 	bl	8008614 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f008 faed 	bl	800c0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2308      	movs	r3, #8
 8003b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	461a      	mov	r2, r3
 8003b58:	2340      	movs	r3, #64	; 0x40
 8003b5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d023      	beq.n	8003bae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b68:	6a38      	ldr	r0, [r7, #32]
 8003b6a:	f003 fc6d 	bl	8007448 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	3338      	adds	r3, #56	; 0x38
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3304      	adds	r3, #4
 8003b80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	78db      	ldrb	r3, [r3, #3]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d108      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f008 fb3a 	bl	800c210 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2302      	movs	r3, #2
 8003bac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fcdb 	bl	8004576 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f47f af2e 	bne.w	8003a30 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f004 fc57 	bl	800848c <USB_ReadInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be8:	d122      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf8:	f023 0301 	bic.w	r3, r3, #1
 8003bfc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d108      	bne.n	8003c1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c10:	2100      	movs	r1, #0
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fec2 	bl	800499c <HAL_PCDEx_LPM_Callback>
 8003c18:	e002      	b.n	8003c20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f008 fad8 	bl	800c1d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fc29 	bl	800848c <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c44:	d112      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f008 fa94 	bl	800c184 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c6a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f004 fc0b 	bl	800848c <USB_ReadInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c80:	f040 80b7 	bne.w	8003df2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2110      	movs	r1, #16
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f003 fbd2 	bl	8007448 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca8:	e046      	b.n	8003d38 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cbc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cce:	0151      	lsls	r1, r2, #5
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	440a      	add	r2, r1
 8003cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	461a      	mov	r2, r3
 8003cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d02:	0151      	lsls	r1, r2, #5
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	440a      	add	r2, r1
 8003d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	0151      	lsls	r1, r2, #5
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	440a      	add	r2, r1
 8003d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	3301      	adds	r3, #1
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d3b3      	bcc.n	8003caa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6e:	f043 030b 	orr.w	r3, r3, #11
 8003d72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d84:	f043 030b 	orr.w	r3, r3, #11
 8003d88:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8a:	e015      	b.n	8003db8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003da2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f043 030b 	orr.w	r3, r3, #11
 8003db6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f004 fc19 	bl	8008614 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f004 fb48 	bl	800848c <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e06:	d124      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fbde 	bl	80085ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 fb93 	bl	8007542 <USB_GetDevSpeed>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681c      	ldr	r4, [r3, #0]
 8003e28:	f001 fa28 	bl	800527c <HAL_RCC_GetHCLKFreq>
 8003e2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	4620      	mov	r0, r4
 8003e38:	f003 f892 	bl	8006f60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f008 f978 	bl	800c132 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 fb18 	bl	800848c <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d10a      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f008 f955 	bl	800c116 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f002 0208 	and.w	r2, r2, #8
 8003e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f004 fb03 	bl	800848c <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b80      	cmp	r3, #128	; 0x80
 8003e8e:	d122      	bne.n	8003ed6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea0:	e014      	b.n	8003ecc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fb27 	bl	8004514 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	3301      	adds	r3, #1
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d3e5      	bcc.n	8003ea2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f004 fad6 	bl	800848c <USB_ReadInterrupts>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eea:	d13b      	bne.n	8003f64 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef0:	e02b      	b.n	8003f4a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	3340      	adds	r3, #64	; 0x40
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d115      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da12      	bge.n	8003f44 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	4613      	mov	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4413      	add	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	333f      	adds	r3, #63	; 0x3f
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fae8 	bl	8004514 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3ce      	bcc.n	8003ef2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f004 fa8f 	bl	800848c <USB_ReadInterrupts>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f78:	d155      	bne.n	8004026 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7e:	e045      	b.n	800400c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d12e      	bne.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da2b      	bge.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003fba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d121      	bne.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004002:	6053      	str	r3, [r2, #4]
            break;
 8004004:	e007      	b.n	8004016 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	3301      	adds	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	429a      	cmp	r2, r3
 8004014:	d3b4      	bcc.n	8003f80 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f004 fa2e 	bl	800848c <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d10a      	bne.n	8004052 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f008 f8f9 	bl	800c234 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004050:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 fa18 	bl	800848c <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d115      	bne.n	8004092 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f008 f8e9 	bl	800c250 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	e000      	b.n	8004092 <HAL_PCD_IRQHandler+0x938>
      return;
 8004090:	bf00      	nop
    }
  }
}
 8004092:	3734      	adds	r7, #52	; 0x34
 8004094:	46bd      	mov	sp, r7
 8004096:	bd90      	pop	{r4, r7, pc}

08004098 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_PCD_SetAddress+0x1a>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e013      	b.n	80040da <HAL_PCD_SetAddress+0x42>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f004 f976 	bl	80083bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	4608      	mov	r0, r1
 80040ec:	4611      	mov	r1, r2
 80040ee:	461a      	mov	r2, r3
 80040f0:	4603      	mov	r3, r0
 80040f2:	70fb      	strb	r3, [r7, #3]
 80040f4:	460b      	mov	r3, r1
 80040f6:	803b      	strh	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	da0f      	bge.n	8004128 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 020f 	and.w	r2, r3, #15
 800410e:	4613      	mov	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	3338      	adds	r3, #56	; 0x38
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	705a      	strb	r2, [r3, #1]
 8004126:	e00f      	b.n	8004148 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	b2da      	uxtb	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004154:	883a      	ldrh	r2, [r7, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	78ba      	ldrb	r2, [r7, #2]
 800415e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004172:	78bb      	ldrb	r3, [r7, #2]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d102      	bne.n	800417e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_PCD_EP_Open+0xaa>
 8004188:	2302      	movs	r3, #2
 800418a:	e00e      	b.n	80041aa <HAL_PCD_EP_Open+0xc8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68f9      	ldr	r1, [r7, #12]
 800419a:	4618      	mov	r0, r3
 800419c:	f003 f9f6 	bl	800758c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80041a8:	7afb      	ldrb	r3, [r7, #11]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da0f      	bge.n	80041e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3338      	adds	r3, #56	; 0x38
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	705a      	strb	r2, [r3, #1]
 80041e4:	e00f      	b.n	8004206 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004206:	78fb      	ldrb	r3, [r7, #3]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_PCD_EP_Close+0x6e>
 800421c:	2302      	movs	r3, #2
 800421e:	e00e      	b.n	800423e <HAL_PCD_EP_Close+0x8c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68f9      	ldr	r1, [r7, #12]
 800422e:	4618      	mov	r0, r3
 8004230:	f003 fa34 	bl	800769c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	460b      	mov	r3, r1
 8004254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	f003 020f 	and.w	r2, r3, #15
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	3304      	adds	r3, #4
 800426e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004288:	7afb      	ldrb	r3, [r7, #11]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	b2da      	uxtb	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d102      	bne.n	80042a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042a2:	7afb      	ldrb	r3, [r7, #11]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	6979      	ldr	r1, [r7, #20]
 80042ba:	f003 fd13 	bl	8007ce4 <USB_EP0StartXfer>
 80042be:	e008      	b.n	80042d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6979      	ldr	r1, [r7, #20]
 80042ce:	f003 fac1 	bl	8007854 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	460b      	mov	r3, r1
 800431a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	3338      	adds	r3, #56	; 0x38
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2201      	movs	r2, #1
 800434a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800434c:	7afb      	ldrb	r3, [r7, #11]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	b2da      	uxtb	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004366:	7afb      	ldrb	r3, [r7, #11]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	f003 fcb1 	bl	8007ce4 <USB_EP0StartXfer>
 8004382:	e008      	b.n	8004396 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	6979      	ldr	r1, [r7, #20]
 8004392:	f003 fa5f 	bl	8007854 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d901      	bls.n	80043be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e050      	b.n	8004460 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0f      	bge.n	80043e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	3338      	adds	r3, #56	; 0x38
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	705a      	strb	r2, [r3, #1]
 80043e4:	e00d      	b.n	8004402 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	4613      	mov	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4413      	add	r3, r2
 80043f8:	3304      	adds	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	b2da      	uxtb	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_PCD_EP_SetStall+0x82>
 800441e:	2302      	movs	r3, #2
 8004420:	e01e      	b.n	8004460 <HAL_PCD_EP_SetStall+0xc0>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68f9      	ldr	r1, [r7, #12]
 8004430:	4618      	mov	r0, r3
 8004432:	f003 feef 	bl	8008214 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	b2d9      	uxtb	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004450:	461a      	mov	r2, r3
 8004452:	f004 f8df 	bl	8008614 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	d901      	bls.n	8004486 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e042      	b.n	800450c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da0f      	bge.n	80044ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 020f 	and.w	r2, r3, #15
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	3338      	adds	r3, #56	; 0x38
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	3304      	adds	r3, #4
 80044a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	705a      	strb	r2, [r3, #1]
 80044ac:	e00f      	b.n	80044ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ae:	78fb      	ldrb	r3, [r7, #3]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d4:	78fb      	ldrb	r3, [r7, #3]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_PCD_EP_ClrStall+0x86>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e00e      	b.n	800450c <HAL_PCD_EP_ClrStall+0xa4>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f003 fef7 	bl	80082f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004524:	2b00      	cmp	r3, #0
 8004526:	da0c      	bge.n	8004542 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	f003 020f 	and.w	r2, r3, #15
 800452e:	4613      	mov	r3, r2
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	3338      	adds	r3, #56	; 0x38
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	3304      	adds	r3, #4
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e00c      	b.n	800455c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 020f 	and.w	r2, r3, #15
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	4413      	add	r3, r2
 8004558:	3304      	adds	r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	4618      	mov	r0, r3
 8004564:	f003 fd16 	bl	8007f94 <USB_EPStopXfer>
 8004568:	4603      	mov	r3, r0
 800456a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800456c:	7afb      	ldrb	r3, [r7, #11]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af02      	add	r7, sp, #8
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3338      	adds	r3, #56	; 0x38
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	3304      	adds	r3, #4
 800459c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d901      	bls.n	80045ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e06c      	b.n	8004688 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d902      	bls.n	80045ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3303      	adds	r3, #3
 80045ce:	089b      	lsrs	r3, r3, #2
 80045d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045d2:	e02b      	b.n	800462c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d902      	bls.n	80045f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	3303      	adds	r3, #3
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6919      	ldr	r1, [r3, #16]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004608:	b2db      	uxtb	r3, r3
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4603      	mov	r3, r0
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f003 fd6a 	bl	80080e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	441a      	add	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	b29b      	uxth	r3, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	429a      	cmp	r2, r3
 8004640:	d809      	bhi.n	8004656 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1a      	ldr	r2, [r3, #32]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800464a:	429a      	cmp	r2, r3
 800464c:	d203      	bcs.n	8004656 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1be      	bne.n	80045d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	429a      	cmp	r2, r3
 8004660:	d811      	bhi.n	8004686 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	2201      	movs	r2, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	43db      	mvns	r3, r3
 800467c:	6939      	ldr	r1, [r7, #16]
 800467e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004682:	4013      	ands	r3, r2
 8004684:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	333c      	adds	r3, #60	; 0x3c
 80046a8:	3304      	adds	r3, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d17b      	bne.n	80047be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d015      	beq.n	80046fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	4a61      	ldr	r2, [pc, #388]	; (8004858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	f240 80b9 	bls.w	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80b3 	beq.w	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f8:	6093      	str	r3, [r2, #8]
 80046fa:	e0a7      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	2320      	movs	r3, #32
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	e098      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 8093 	bne.w	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4a4b      	ldr	r2, [pc, #300]	; (8004858 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d90f      	bls.n	800474e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004744:	461a      	mov	r2, r3
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	e07e      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	0159      	lsls	r1, r3, #5
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	440b      	add	r3, r1
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d114      	bne.n	80047b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004798:	461a      	mov	r2, r3
 800479a:	2101      	movs	r1, #1
 800479c:	f003 ff3a 	bl	8008614 <USB_EP0_OutStart>
 80047a0:	e006      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f007 fc78 	bl	800c0ac <HAL_PCD_DataOutStageCallback>
 80047bc:	e046      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	4a26      	ldr	r2, [pc, #152]	; (800485c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d124      	bne.n	8004810 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e2:	6093      	str	r3, [r2, #8]
 80047e4:	e032      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	461a      	mov	r2, r3
 80047fe:	2320      	movs	r3, #32
 8004800:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f007 fc4f 	bl	800c0ac <HAL_PCD_DataOutStageCallback>
 800480e:	e01d      	b.n	800484c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d114      	bne.n	8004840 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d108      	bne.n	8004840 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004838:	461a      	mov	r2, r3
 800483a:	2100      	movs	r1, #0
 800483c:	f003 feea 	bl	8008614 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	4619      	mov	r1, r3
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f007 fc30 	bl	800c0ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	4f54300a 	.word	0x4f54300a
 800485c:	4f54310a 	.word	0x4f54310a

08004860 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	333c      	adds	r3, #60	; 0x3c
 8004878:	3304      	adds	r3, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4a15      	ldr	r2, [pc, #84]	; (80048e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d90e      	bls.n	80048b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	461a      	mov	r2, r3
 80048ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f007 fbe7 	bl	800c088 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d90c      	bls.n	80048dc <PCD_EP_OutSetupPacket_int+0x7c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d108      	bne.n	80048dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048d4:	461a      	mov	r2, r3
 80048d6:	2101      	movs	r1, #1
 80048d8:	f003 fe9c 	bl	8008614 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	4f54300a 	.word	0x4f54300a

080048ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	70fb      	strb	r3, [r7, #3]
 80048f8:	4613      	mov	r3, r2
 80048fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800490a:	883b      	ldrh	r3, [r7, #0]
 800490c:	0419      	lsls	r1, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	430a      	orrs	r2, r1
 8004916:	629a      	str	r2, [r3, #40]	; 0x28
 8004918:	e028      	b.n	800496c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004928:	2300      	movs	r3, #0
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e00d      	b.n	800494a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	3340      	adds	r3, #64	; 0x40
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	3301      	adds	r3, #1
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	7bfa      	ldrb	r2, [r7, #15]
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	3b01      	subs	r3, #1
 8004950:	429a      	cmp	r2, r3
 8004952:	d3ec      	bcc.n	800492e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004954:	883b      	ldrh	r3, [r7, #0]
 8004956:	0418      	lsls	r0, r3, #16
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6819      	ldr	r1, [r3, #0]
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	3b01      	subs	r3, #1
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4302      	orrs	r2, r0
 8004964:	3340      	adds	r3, #64	; 0x40
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	460b      	mov	r3, r1
 8004984:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e267      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d075      	beq.n	8004abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049d2:	4b88      	ldr	r3, [pc, #544]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d00c      	beq.n	80049f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049de:	4b85      	ldr	r3, [pc, #532]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d112      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ea:	4b82      	ldr	r3, [pc, #520]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f6:	d10b      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	4b7e      	ldr	r3, [pc, #504]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05b      	beq.n	8004abc <HAL_RCC_OscConfig+0x108>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d157      	bne.n	8004abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e242      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_OscConfig+0x74>
 8004a1a:	4b76      	ldr	r3, [pc, #472]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a75      	ldr	r2, [pc, #468]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x98>
 8004a32:	4b70      	ldr	r3, [pc, #448]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a6f      	ldr	r2, [pc, #444]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b6d      	ldr	r3, [pc, #436]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6c      	ldr	r2, [pc, #432]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a4c:	4b69      	ldr	r3, [pc, #420]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a68      	ldr	r2, [pc, #416]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b66      	ldr	r3, [pc, #408]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a65      	ldr	r2, [pc, #404]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fd f81a 	bl	8001aa4 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd f816 	bl	8001aa4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e207      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b5b      	ldr	r3, [pc, #364]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xc0>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fd f806 	bl	8001aa4 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd f802 	bl	8001aa4 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1f3      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	4b51      	ldr	r3, [pc, #324]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0xe8>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d063      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aca:	4b4a      	ldr	r3, [pc, #296]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad6:	4b47      	ldr	r3, [pc, #284]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d11c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b44      	ldr	r3, [pc, #272]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d116      	bne.n	8004b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	4b41      	ldr	r3, [pc, #260]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x152>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1c7      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	4b3b      	ldr	r3, [pc, #236]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4937      	ldr	r1, [pc, #220]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	e03a      	b.n	8004b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <HAL_RCC_OscConfig+0x244>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2a:	f7fc ffbb 	bl	8001aa4 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fc ffb7 	bl	8001aa4 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1a8      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	4b2b      	ldr	r3, [pc, #172]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4925      	ldr	r1, [pc, #148]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	e015      	b.n	8004b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <HAL_RCC_OscConfig+0x244>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fc ff9a 	bl	8001aa4 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fc ff96 	bl	8001aa4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e187      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	4b1b      	ldr	r3, [pc, #108]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d036      	beq.n	8004c0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <HAL_RCC_OscConfig+0x248>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fc ff7a 	bl	8001aa4 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fc ff76 	bl	8001aa4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e167      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x200>
 8004bd2:	e01b      	b.n	8004c0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd4:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_OscConfig+0x248>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fc ff63 	bl	8001aa4 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	e00e      	b.n	8004c00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fc ff5f 	bl	8001aa4 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d907      	bls.n	8004c00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e150      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	42470000 	.word	0x42470000
 8004bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	4b88      	ldr	r3, [pc, #544]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1ea      	bne.n	8004be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 8097 	beq.w	8004d48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1e:	4b81      	ldr	r3, [pc, #516]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	4b7d      	ldr	r3, [pc, #500]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4a7c      	ldr	r2, [pc, #496]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4a:	4b77      	ldr	r3, [pc, #476]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d118      	bne.n	8004c88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c56:	4b74      	ldr	r3, [pc, #464]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a73      	ldr	r2, [pc, #460]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c62:	f7fc ff1f 	bl	8001aa4 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6a:	f7fc ff1b 	bl	8001aa4 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e10c      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7c:	4b6a      	ldr	r3, [pc, #424]	; (8004e28 <HAL_RCC_OscConfig+0x474>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <HAL_RCC_OscConfig+0x2ea>
 8004c90:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	4a63      	ldr	r2, [pc, #396]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004c96:	f043 0301 	orr.w	r3, r3, #1
 8004c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c9c:	e01c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x324>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b05      	cmp	r3, #5
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x30c>
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a5e      	ldr	r2, [pc, #376]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x324>
 8004cc0:	4b58      	ldr	r3, [pc, #352]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
 8004ccc:	4b55      	ldr	r3, [pc, #340]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	4a54      	ldr	r2, [pc, #336]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004cd2:	f023 0304 	bic.w	r3, r3, #4
 8004cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fc fee0 	bl	8001aa4 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fc fedc 	bl	8001aa4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0cb      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfe:	4b49      	ldr	r3, [pc, #292]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0ee      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x334>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0c:	f7fc feca 	bl	8001aa4 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d14:	f7fc fec6 	bl	8001aa4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0b5      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2a:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1ee      	bne.n	8004d14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4a38      	ldr	r2, [pc, #224]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80a1 	beq.w	8004e94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d52:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b08      	cmp	r3, #8
 8004d5c:	d05c      	beq.n	8004e18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d141      	bne.n	8004dea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d66:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_RCC_OscConfig+0x478>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fc fe9a 	bl	8001aa4 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc fe96 	bl	8001aa4 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e087      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	491b      	ldr	r1, [pc, #108]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x478>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc2:	f7fc fe6f 	bl	8001aa4 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fc fe6b 	bl	8001aa4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e05c      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x416>
 8004de8:	e054      	b.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_RCC_OscConfig+0x478>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fc fe58 	bl	8001aa4 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fc fe54 	bl	8001aa4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e045      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_RCC_OscConfig+0x470>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x444>
 8004e16:	e03d      	b.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e038      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <HAL_RCC_OscConfig+0x4ec>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d121      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d11a      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d111      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800

08004ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0cc      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90c      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b8      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	494d      	ldr	r1, [pc, #308]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d044      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d107      	bne.n	8004f52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d119      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e07f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d003      	beq.n	8004f62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f62:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e06f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e067      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f82:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0203 	bic.w	r2, r3, #3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4934      	ldr	r1, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f94:	f7fc fd86 	bl	8001aa4 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fc fd82 	bl	8001aa4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e04f      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 020c 	and.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d1eb      	bne.n	8004f9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d20c      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd2:	4b22      	ldr	r3, [pc, #136]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d001      	beq.n	8004fec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e032      	b.n	8005052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4916      	ldr	r1, [pc, #88]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490e      	ldr	r1, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800502a:	f000 f821 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490a      	ldr	r1, [pc, #40]	; (8005064 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	fa22 f303 	lsr.w	r3, r2, r3
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fc fa6a 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	0800c900 	.word	0x0800c900
 8005068:	20000000 	.word	0x20000000
 800506c:	20000004 	.word	0x20000004

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005074:	b094      	sub	sp, #80	; 0x50
 8005076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
 800507c:	2300      	movs	r3, #0
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	2300      	movs	r3, #0
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 030c 	and.w	r3, r3, #12
 8005090:	2b08      	cmp	r3, #8
 8005092:	d00d      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005094:	2b08      	cmp	r3, #8
 8005096:	f200 80e1 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d003      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0x3a>
 80050a2:	e0db      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b73      	ldr	r3, [pc, #460]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 80050a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050a8:	e0db      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050aa:	4b73      	ldr	r3, [pc, #460]	; (8005278 <HAL_RCC_GetSysClockFreq+0x208>)
 80050ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050ae:	e0d8      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050b0:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ba:	4b6d      	ldr	r3, [pc, #436]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d063      	beq.n	800518e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	099b      	lsrs	r3, r3, #6
 80050cc:	2200      	movs	r2, #0
 80050ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80050d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050e2:	4622      	mov	r2, r4
 80050e4:	462b      	mov	r3, r5
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	0159      	lsls	r1, r3, #5
 80050f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f4:	0150      	lsls	r0, r2, #5
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4621      	mov	r1, r4
 80050fc:	1a51      	subs	r1, r2, r1
 80050fe:	6139      	str	r1, [r7, #16]
 8005100:	4629      	mov	r1, r5
 8005102:	eb63 0301 	sbc.w	r3, r3, r1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005114:	4659      	mov	r1, fp
 8005116:	018b      	lsls	r3, r1, #6
 8005118:	4651      	mov	r1, sl
 800511a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511e:	4651      	mov	r1, sl
 8005120:	018a      	lsls	r2, r1, #6
 8005122:	4651      	mov	r1, sl
 8005124:	ebb2 0801 	subs.w	r8, r2, r1
 8005128:	4659      	mov	r1, fp
 800512a:	eb63 0901 	sbc.w	r9, r3, r1
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800513a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005142:	4690      	mov	r8, r2
 8005144:	4699      	mov	r9, r3
 8005146:	4623      	mov	r3, r4
 8005148:	eb18 0303 	adds.w	r3, r8, r3
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	462b      	mov	r3, r5
 8005150:	eb49 0303 	adc.w	r3, r9, r3
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005162:	4629      	mov	r1, r5
 8005164:	024b      	lsls	r3, r1, #9
 8005166:	4621      	mov	r1, r4
 8005168:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800516c:	4621      	mov	r1, r4
 800516e:	024a      	lsls	r2, r1, #9
 8005170:	4610      	mov	r0, r2
 8005172:	4619      	mov	r1, r3
 8005174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005176:	2200      	movs	r2, #0
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800517c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005180:	f7fb f836 	bl	80001f0 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800518c:	e058      	b.n	8005240 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518e:	4b38      	ldr	r3, [pc, #224]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	2200      	movs	r2, #0
 8005196:	4618      	mov	r0, r3
 8005198:	4611      	mov	r1, r2
 800519a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	2300      	movs	r3, #0
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	f04f 0000 	mov.w	r0, #0
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	0159      	lsls	r1, r3, #5
 80051b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ba:	0150      	lsls	r0, r2, #5
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4641      	mov	r1, r8
 80051c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051e0:	ebb2 040a 	subs.w	r4, r2, sl
 80051e4:	eb63 050b 	sbc.w	r5, r3, fp
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	00eb      	lsls	r3, r5, #3
 80051f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f6:	00e2      	lsls	r2, r4, #3
 80051f8:	4614      	mov	r4, r2
 80051fa:	461d      	mov	r5, r3
 80051fc:	4643      	mov	r3, r8
 80051fe:	18e3      	adds	r3, r4, r3
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	464b      	mov	r3, r9
 8005204:	eb45 0303 	adc.w	r3, r5, r3
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005216:	4629      	mov	r1, r5
 8005218:	028b      	lsls	r3, r1, #10
 800521a:	4621      	mov	r1, r4
 800521c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005220:	4621      	mov	r1, r4
 8005222:	028a      	lsls	r2, r1, #10
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522a:	2200      	movs	r2, #0
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	61fa      	str	r2, [r7, #28]
 8005230:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005234:	f7fa ffdc 	bl	80001f0 <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4613      	mov	r3, r2
 800523e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_RCC_GetSysClockFreq+0x200>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	3301      	adds	r3, #1
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetSysClockFreq+0x204>)
 800525e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005264:	4618      	mov	r0, r3
 8005266:	3750      	adds	r7, #80	; 0x50
 8005268:	46bd      	mov	sp, r7
 800526a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
 8005274:	00f42400 	.word	0x00f42400
 8005278:	007a1200 	.word	0x007a1200

0800527c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <HAL_RCC_GetHCLKFreq+0x14>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000000 	.word	0x20000000

08005294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005298:	f7ff fff0 	bl	800527c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	0800c910 	.word	0x0800c910

080052bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052c0:	f7ff ffdc 	bl	800527c <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0b5b      	lsrs	r3, r3, #13
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40023800 	.word	0x40023800
 80052e0:	0800c910 	.word	0x0800c910

080052e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	220f      	movs	r2, #15
 80052f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052f4:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0203 	and.w	r2, r3, #3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005300:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_RCC_GetClockConfig+0x5c>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005326:	4b07      	ldr	r3, [pc, #28]	; (8005344 <HAL_RCC_GetClockConfig+0x60>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 020f 	and.w	r2, r3, #15
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	40023c00 	.word	0x40023c00

08005348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005378:	2b00      	cmp	r3, #0
 800537a:	d075      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800537c:	4b91      	ldr	r3, [pc, #580]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005382:	f7fc fb8f 	bl	8001aa4 <HAL_GetTick>
 8005386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005388:	e008      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800538a:	f7fc fb8b 	bl	8001aa4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e189      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800539c:	4b8a      	ldr	r3, [pc, #552]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f0      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d009      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	019a      	lsls	r2, r3, #6
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	071b      	lsls	r3, r3, #28
 80053c0:	4981      	ldr	r1, [pc, #516]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01f      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053d4:	4b7c      	ldr	r3, [pc, #496]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053da:	0f1b      	lsrs	r3, r3, #28
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	019a      	lsls	r2, r3, #6
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	431a      	orrs	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	071b      	lsls	r3, r3, #28
 80053f4:	4974      	ldr	r1, [pc, #464]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053fc:	4b72      	ldr	r3, [pc, #456]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005402:	f023 021f 	bic.w	r2, r3, #31
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	3b01      	subs	r3, #1
 800540c:	496e      	ldr	r1, [pc, #440]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	019a      	lsls	r2, r3, #6
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	071b      	lsls	r3, r3, #28
 8005434:	4964      	ldr	r1, [pc, #400]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800543c:	4b61      	ldr	r3, [pc, #388]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800543e:	2201      	movs	r2, #1
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fc fb2f 	bl	8001aa4 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fc fb2b 	bl	8001aa4 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e129      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545c:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800547c:	2b00      	cmp	r3, #0
 800547e:	d079      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005480:	4b52      	ldr	r3, [pc, #328]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005486:	f7fc fb0d 	bl	8001aa4 <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800548e:	f7fc fb09 	bl	8001aa4 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e107      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054a0:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ac:	d0ef      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d020      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054ba:	4b43      	ldr	r3, [pc, #268]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	0f1b      	lsrs	r3, r3, #28
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	019a      	lsls	r2, r3, #6
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	061b      	lsls	r3, r3, #24
 80054d4:	431a      	orrs	r2, r3
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	071b      	lsls	r3, r3, #28
 80054da:	493b      	ldr	r1, [pc, #236]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054e2:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	4934      	ldr	r1, [pc, #208]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01e      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005508:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	0e1b      	lsrs	r3, r3, #24
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	019a      	lsls	r2, r3, #6
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	061b      	lsls	r3, r3, #24
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	071b      	lsls	r3, r3, #28
 8005528:	4927      	ldr	r1, [pc, #156]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	4922      	ldr	r1, [pc, #136]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005546:	4b21      	ldr	r3, [pc, #132]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005548:	2201      	movs	r2, #1
 800554a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800554c:	f7fc faaa 	bl	8001aa4 <HAL_GetTick>
 8005550:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005554:	f7fc faa6 	bl	8001aa4 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0a4      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005572:	d1ef      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 808b 	beq.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	; 0x40
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800559e:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a0b      	ldr	r2, [pc, #44]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055aa:	f7fc fa7b 	bl	8001aa4 <HAL_GetTick>
 80055ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055b0:	e010      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055b2:	f7fc fa77 	bl	8001aa4 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d909      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e075      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80055c4:	42470068 	.word	0x42470068
 80055c8:	40023800 	.word	0x40023800
 80055cc:	42470070 	.word	0x42470070
 80055d0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055d4:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0e8      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055e0:	4b36      	ldr	r3, [pc, #216]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d02f      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d028      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055fe:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005606:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005608:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800560e:	4b2c      	ldr	r3, [pc, #176]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005614:	4a29      	ldr	r2, [pc, #164]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800561a:	4b28      	ldr	r3, [pc, #160]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b01      	cmp	r3, #1
 8005624:	d114      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005626:	f7fc fa3d 	bl	8001aa4 <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562c:	e00a      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562e:	f7fc fa39 	bl	8001aa4 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f241 3288 	movw	r2, #5000	; 0x1388
 800563c:	4293      	cmp	r3, r2
 800563e:	d901      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e035      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005644:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0ee      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800565c:	d10d      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	4912      	ldr	r1, [pc, #72]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005674:	4313      	orrs	r3, r2
 8005676:	608b      	str	r3, [r1, #8]
 8005678:	e005      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800567a:	4b10      	ldr	r3, [pc, #64]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a0f      	ldr	r2, [pc, #60]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005680:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005684:	6093      	str	r3, [r2, #8]
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005688:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005692:	490a      	ldr	r1, [pc, #40]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005694:	4313      	orrs	r3, r2
 8005696:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80056ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40007000 	.word	0x40007000
 80056bc:	40023800 	.word	0x40023800
 80056c0:	42470e40 	.word	0x42470e40
 80056c4:	424711e0 	.word	0x424711e0

080056c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e066      	b.n	80057ac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	7f5b      	ldrb	r3, [r3, #29]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb fe3c 	bl	800136c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	22ca      	movs	r2, #202	; 0xca
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2253      	movs	r2, #83	; 0x53
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f998 	bl	8005a40 <RTC_EnterInitMode>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d12c      	bne.n	8005774 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6899      	ldr	r1, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68d2      	ldr	r2, [r2, #12]
 8005754:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6919      	ldr	r1, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	041a      	lsls	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f99f 	bl	8005aae <RTC_ExitInitMode>
 8005770:	4603      	mov	r3, r0
 8005772:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d113      	bne.n	80057a2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	22ff      	movs	r2, #255	; 0xff
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057b4:	b590      	push	{r4, r7, lr}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	7f1b      	ldrb	r3, [r3, #28]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_RTC_SetTime+0x1c>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e087      	b.n	80058e0 <HAL_RTC_SetTime+0x12c>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2202      	movs	r2, #2
 80057da:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d126      	bne.n	8005830 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f97c 	bl	8005af8 <RTC_ByteToBcd2>
 8005800:	4603      	mov	r3, r0
 8005802:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 f975 	bl	8005af8 <RTC_ByteToBcd2>
 800580e:	4603      	mov	r3, r0
 8005810:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005812:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	789b      	ldrb	r3, [r3, #2]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 f96d 	bl	8005af8 <RTC_ByteToBcd2>
 800581e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005820:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	78db      	ldrb	r3, [r3, #3]
 8005828:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e018      	b.n	8005862 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005850:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005856:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	78db      	ldrb	r3, [r3, #3]
 800585c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ca      	movs	r2, #202	; 0xca
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2253      	movs	r2, #83	; 0x53
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f8e4 	bl	8005a40 <RTC_EnterInitMode>
 8005878:	4603      	mov	r3, r0
 800587a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800587c:	7cfb      	ldrb	r3, [r7, #19]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d120      	bne.n	80058c4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800588c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005890:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6899      	ldr	r1, [r3, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f8f7 	bl	8005aae <RTC_ExitInitMode>
 80058c0:	4603      	mov	r3, r0
 80058c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	22ff      	movs	r2, #255	; 0xff
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	771a      	strb	r2, [r3, #28]

  return status;
 80058de:	7cfb      	ldrb	r3, [r7, #19]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	7f1b      	ldrb	r3, [r3, #28]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_RTC_SetDate+0x1c>
 8005900:	2302      	movs	r3, #2
 8005902:	e071      	b.n	80059e8 <HAL_RTC_SetDate+0x100>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2202      	movs	r2, #2
 800590e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10e      	bne.n	8005934 <HAL_RTC_SetDate+0x4c>
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	785b      	ldrb	r3, [r3, #1]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	f023 0310 	bic.w	r3, r3, #16
 800592a:	b2db      	uxtb	r3, r3
 800592c:	330a      	adds	r3, #10
 800592e:	b2da      	uxtb	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11c      	bne.n	8005974 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	78db      	ldrb	r3, [r3, #3]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f8da 	bl	8005af8 <RTC_ByteToBcd2>
 8005944:	4603      	mov	r3, r0
 8005946:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 f8d3 	bl	8005af8 <RTC_ByteToBcd2>
 8005952:	4603      	mov	r3, r0
 8005954:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005956:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	789b      	ldrb	r3, [r3, #2]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f8cb 	bl	8005af8 <RTC_ByteToBcd2>
 8005962:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005964:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	e00e      	b.n	8005992 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	78db      	ldrb	r3, [r3, #3]
 8005978:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005980:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005986:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	22ca      	movs	r2, #202	; 0xca
 8005998:	625a      	str	r2, [r3, #36]	; 0x24
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2253      	movs	r2, #83	; 0x53
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f84c 	bl	8005a40 <RTC_EnterInitMode>
 80059a8:	4603      	mov	r3, r0
 80059aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10c      	bne.n	80059cc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059c0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f873 	bl	8005aae <RTC_ExitInitMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	22ff      	movs	r2, #255	; 0xff
 80059de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	771a      	strb	r2, [r3, #28]

  return status;
 80059e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd90      	pop	{r4, r7, pc}

080059f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a0c:	f7fc f84a 	bl	8001aa4 <HAL_GetTick>
 8005a10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a12:	e009      	b.n	8005a28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a14:	f7fc f846 	bl	8001aa4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a22:	d901      	bls.n	8005a28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e007      	b.n	8005a38 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0ee      	beq.n	8005a14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d122      	bne.n	8005aa4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a6e:	f7fc f819 	bl	8001aa4 <HAL_GetTick>
 8005a72:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a74:	e00c      	b.n	8005a90 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a76:	f7fc f815 	bl	8001aa4 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a84:	d904      	bls.n	8005a90 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <RTC_EnterInitMode+0x64>
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d1e8      	bne.n	8005a76 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ac8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ff89 	bl	80059f0 <HAL_RTC_WaitForSynchro>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005b06:	e005      	b.n	8005b14 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	3b0a      	subs	r3, #10
 8005b12:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	2b09      	cmp	r3, #9
 8005b18:	d8f6      	bhi.n	8005b08 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b2db      	uxtb	r3, r3
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005b40:	4b59      	ldr	r3, [pc, #356]	; (8005ca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a59      	ldr	r2, [pc, #356]	; (8005cac <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	0adb      	lsrs	r3, r3, #11
 8005b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	7f1b      	ldrb	r3, [r3, #28]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e09b      	b.n	8005c9a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	22ca      	movs	r2, #202	; 0xca
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2253      	movs	r2, #83	; 0x53
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	1e5a      	subs	r2, r3, #1
 8005b90:	617a      	str	r2, [r7, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2203      	movs	r2, #3
 8005ba2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e075      	b.n	8005c9a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e7      	bne.n	8005b8c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005bdc:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005bde:	4b32      	ldr	r3, [pc, #200]	; (8005ca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a32      	ldr	r2, [pc, #200]	; (8005cac <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	0adb      	lsrs	r3, r3, #11
 8005bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bee:	fb02 f303 	mul.w	r3, r2, r3
 8005bf2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    if (count-- == 0U)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1e5a      	subs	r2, r3, #1
 8005bf8:	617a      	str	r2, [r7, #20]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <HAL_RTCEx_SetWakeUpTimer_IT+0xe2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	22ff      	movs	r2, #255	; 0xff
 8005c04:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2203      	movs	r2, #3
 8005c0a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e041      	b.n	8005c9a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0e7      	beq.n	8005bf4 <HAL_RTCEx_SetWakeUpTimer_IT+0xc0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0207 	bic.w	r2, r2, #7
 8005c32:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6899      	ldr	r1, [r3, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005c4c:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005c52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c56:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8005c5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c62:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c72:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c82:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	22ff      	movs	r2, #255	; 0xff
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000000 	.word	0x20000000
 8005cac:	10624dd3 	.word	0x10624dd3
 8005cb0:	40013c00 	.word	0x40013c00

08005cb4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f816 	bl	8005cfc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005ce0:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8005ce4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005ce8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	775a      	strb	r2, [r3, #29]
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40013c00 	.word	0x40013c00

08005cfc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e025      	b.n	8005d70 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fa fd75 	bl	8000828 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2202      	movs	r2, #2
 8005d42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3304      	adds	r3, #4
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4610      	mov	r0, r2
 8005d52:	f000 ffdd 	bl	8006d10 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	f001 f832 	bl	8006dca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07b      	b.n	8005e82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d108      	bne.n	8005da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d9a:	d009      	beq.n	8005db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	61da      	str	r2, [r3, #28]
 8005da2:	e005      	b.n	8005db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb fb36 	bl	800143c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	ea42 0103 	orr.w	r1, r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	f003 0104 	and.w	r1, r3, #4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0210 	and.w	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b082      	sub	sp, #8
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e041      	b.n	8005f20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fb fc89 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f000 fa95 	bl	80063f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d001      	beq.n	8005f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e04e      	b.n	8005fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a23      	ldr	r2, [pc, #140]	; (8005fec <HAL_TIM_Base_Start_IT+0xc4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d022      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6a:	d01d      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a19      	ldr	r2, [pc, #100]	; (8006000 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x80>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d111      	bne.n	8005fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d010      	beq.n	8005fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0201 	orr.w	r2, r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fca:	e007      	b.n	8005fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40000400 	.word	0x40000400
 8005ff4:	40000800 	.word	0x40000800
 8005ff8:	40000c00 	.word	0x40000c00
 8005ffc:	40010400 	.word	0x40010400
 8006000:	40014000 	.word	0x40014000
 8006004:	40001800 	.word	0x40001800

08006008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b02      	cmp	r3, #2
 800601c:	d122      	bne.n	8006064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d11b      	bne.n	8006064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0202 	mvn.w	r2, #2
 8006034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f9b5 	bl	80063ba <HAL_TIM_IC_CaptureCallback>
 8006050:	e005      	b.n	800605e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f9a7 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f9b8 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d122      	bne.n	80060b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b04      	cmp	r3, #4
 800607e:	d11b      	bne.n	80060b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0204 	mvn.w	r2, #4
 8006088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f98b 	bl	80063ba <HAL_TIM_IC_CaptureCallback>
 80060a4:	e005      	b.n	80060b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f97d 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f98e 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d122      	bne.n	800610c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d11b      	bne.n	800610c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0208 	mvn.w	r2, #8
 80060dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2204      	movs	r2, #4
 80060e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f961 	bl	80063ba <HAL_TIM_IC_CaptureCallback>
 80060f8:	e005      	b.n	8006106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f953 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f964 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b10      	cmp	r3, #16
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b10      	cmp	r3, #16
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0210 	mvn.w	r2, #16
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2208      	movs	r2, #8
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f937 	bl	80063ba <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f929 	bl	80063a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f93a 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10e      	bne.n	800618c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b01      	cmp	r3, #1
 800617a:	d107      	bne.n	800618c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0201 	mvn.w	r2, #1
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb f86c 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b80      	cmp	r3, #128	; 0x80
 8006198:	d10e      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a4:	2b80      	cmp	r3, #128	; 0x80
 80061a6:	d107      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fae0 	bl	8006778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d10e      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8ff 	bl	80063e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d10e      	bne.n	8006210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d107      	bne.n	8006210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0220 	mvn.w	r2, #32
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 faaa 	bl	8006764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006210:	bf00      	nop
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_TIM_ConfigClockSource+0x1c>
 8006230:	2302      	movs	r3, #2
 8006232:	e0b4      	b.n	800639e <HAL_TIM_ConfigClockSource+0x186>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800626c:	d03e      	beq.n	80062ec <HAL_TIM_ConfigClockSource+0xd4>
 800626e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006272:	f200 8087 	bhi.w	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 8006276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627a:	f000 8086 	beq.w	800638a <HAL_TIM_ConfigClockSource+0x172>
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006282:	d87f      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b70      	cmp	r3, #112	; 0x70
 8006286:	d01a      	beq.n	80062be <HAL_TIM_ConfigClockSource+0xa6>
 8006288:	2b70      	cmp	r3, #112	; 0x70
 800628a:	d87b      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b60      	cmp	r3, #96	; 0x60
 800628e:	d050      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x11a>
 8006290:	2b60      	cmp	r3, #96	; 0x60
 8006292:	d877      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b50      	cmp	r3, #80	; 0x50
 8006296:	d03c      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0xfa>
 8006298:	2b50      	cmp	r3, #80	; 0x50
 800629a:	d873      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b40      	cmp	r3, #64	; 0x40
 800629e:	d058      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x13a>
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d86f      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d064      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x15a>
 80062a8:	2b30      	cmp	r3, #48	; 0x30
 80062aa:	d86b      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d060      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x15a>
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d867      	bhi.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05c      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x15a>
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d05a      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0x15a>
 80062bc:	e062      	b.n	8006384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6899      	ldr	r1, [r3, #8]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f000 f9ad 	bl	800662c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	609a      	str	r2, [r3, #8]
      break;
 80062ea:	e04f      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6899      	ldr	r1, [r3, #8]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f000 f996 	bl	800662c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800630e:	609a      	str	r2, [r3, #8]
      break;
 8006310:	e03c      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	461a      	mov	r2, r3
 8006320:	f000 f90a 	bl	8006538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2150      	movs	r1, #80	; 0x50
 800632a:	4618      	mov	r0, r3
 800632c:	f000 f963 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006330:	e02c      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6859      	ldr	r1, [r3, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	461a      	mov	r2, r3
 8006340:	f000 f929 	bl	8006596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2160      	movs	r1, #96	; 0x60
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f953 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006350:	e01c      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6859      	ldr	r1, [r3, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	461a      	mov	r2, r3
 8006360:	f000 f8ea 	bl	8006538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2140      	movs	r1, #64	; 0x40
 800636a:	4618      	mov	r0, r3
 800636c:	f000 f943 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006370:	e00c      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f000 f93a 	bl	80065f6 <TIM_ITRx_SetConfig>
      break;
 8006382:	e003      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
      break;
 8006388:	e000      	b.n	800638c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800638a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a40      	ldr	r2, [pc, #256]	; (800650c <TIM_Base_SetConfig+0x114>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <TIM_Base_SetConfig+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d00f      	beq.n	8006438 <TIM_Base_SetConfig+0x40>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a3d      	ldr	r2, [pc, #244]	; (8006510 <TIM_Base_SetConfig+0x118>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_Base_SetConfig+0x40>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a3c      	ldr	r2, [pc, #240]	; (8006514 <TIM_Base_SetConfig+0x11c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_Base_SetConfig+0x40>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3b      	ldr	r2, [pc, #236]	; (8006518 <TIM_Base_SetConfig+0x120>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_Base_SetConfig+0x40>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a3a      	ldr	r2, [pc, #232]	; (800651c <TIM_Base_SetConfig+0x124>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d108      	bne.n	800644a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a2f      	ldr	r2, [pc, #188]	; (800650c <TIM_Base_SetConfig+0x114>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d02b      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	d027      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2c      	ldr	r2, [pc, #176]	; (8006510 <TIM_Base_SetConfig+0x118>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d023      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a2b      	ldr	r2, [pc, #172]	; (8006514 <TIM_Base_SetConfig+0x11c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d01f      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2a      	ldr	r2, [pc, #168]	; (8006518 <TIM_Base_SetConfig+0x120>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01b      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a29      	ldr	r2, [pc, #164]	; (800651c <TIM_Base_SetConfig+0x124>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d017      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a28      	ldr	r2, [pc, #160]	; (8006520 <TIM_Base_SetConfig+0x128>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a27      	ldr	r2, [pc, #156]	; (8006524 <TIM_Base_SetConfig+0x12c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00f      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a26      	ldr	r2, [pc, #152]	; (8006528 <TIM_Base_SetConfig+0x130>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00b      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a25      	ldr	r2, [pc, #148]	; (800652c <TIM_Base_SetConfig+0x134>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a24      	ldr	r2, [pc, #144]	; (8006530 <TIM_Base_SetConfig+0x138>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a23      	ldr	r2, [pc, #140]	; (8006534 <TIM_Base_SetConfig+0x13c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d108      	bne.n	80064bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a0a      	ldr	r2, [pc, #40]	; (800650c <TIM_Base_SetConfig+0x114>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_Base_SetConfig+0xf8>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a0c      	ldr	r2, [pc, #48]	; (800651c <TIM_Base_SetConfig+0x124>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d103      	bne.n	80064f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	615a      	str	r2, [r3, #20]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010000 	.word	0x40010000
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800
 8006518:	40000c00 	.word	0x40000c00
 800651c:	40010400 	.word	0x40010400
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800
 800652c:	40001800 	.word	0x40001800
 8006530:	40001c00 	.word	0x40001c00
 8006534:	40002000 	.word	0x40002000

08006538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f023 0201 	bic.w	r2, r3, #1
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 030a 	bic.w	r3, r3, #10
 8006574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006596:	b480      	push	{r7}
 8006598:	b087      	sub	sp, #28
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f023 0210 	bic.w	r2, r3, #16
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	031b      	lsls	r3, r3, #12
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	011b      	lsls	r3, r3, #4
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	f043 0307 	orr.w	r3, r3, #7
 8006618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	609a      	str	r2, [r3, #8]
}
 8006620:	bf00      	nop
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	021a      	lsls	r2, r3, #8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	431a      	orrs	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	609a      	str	r2, [r3, #8]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e05a      	b.n	800673a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a21      	ldr	r2, [pc, #132]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d01d      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1d      	ldr	r2, [pc, #116]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a18      	ldr	r2, [pc, #96]	; (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d10c      	bne.n	8006728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4313      	orrs	r3, r2
 800671e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	40010000 	.word	0x40010000
 800674c:	40000400 	.word	0x40000400
 8006750:	40000800 	.word	0x40000800
 8006754:	40000c00 	.word	0x40000c00
 8006758:	40010400 	.word	0x40010400
 800675c:	40014000 	.word	0x40014000
 8006760:	40001800 	.word	0x40001800

08006764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e03f      	b.n	800681e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fb f854 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2224      	movs	r2, #36	; 0x24
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f829 	bl	8006828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800682c:	b0c0      	sub	sp, #256	; 0x100
 800682e:	af00      	add	r7, sp, #0
 8006830:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	68d9      	ldr	r1, [r3, #12]
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	ea40 0301 	orr.w	r3, r0, r1
 8006850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	431a      	orrs	r2, r3
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	431a      	orrs	r2, r3
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006880:	f021 010c 	bic.w	r1, r1, #12
 8006884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800688e:	430b      	orrs	r3, r1
 8006890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800689e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a2:	6999      	ldr	r1, [r3, #24]
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	ea40 0301 	orr.w	r3, r0, r1
 80068ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4b8f      	ldr	r3, [pc, #572]	; (8006af4 <UART_SetConfig+0x2cc>)
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d005      	beq.n	80068c8 <UART_SetConfig+0xa0>
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b8d      	ldr	r3, [pc, #564]	; (8006af8 <UART_SetConfig+0x2d0>)
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d104      	bne.n	80068d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068c8:	f7fe fcf8 	bl	80052bc <HAL_RCC_GetPCLK2Freq>
 80068cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068d0:	e003      	b.n	80068da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068d2:	f7fe fcdf 	bl	8005294 <HAL_RCC_GetPCLK1Freq>
 80068d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068e4:	f040 810c 	bne.w	8006b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068fa:	4622      	mov	r2, r4
 80068fc:	462b      	mov	r3, r5
 80068fe:	1891      	adds	r1, r2, r2
 8006900:	65b9      	str	r1, [r7, #88]	; 0x58
 8006902:	415b      	adcs	r3, r3
 8006904:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800690a:	4621      	mov	r1, r4
 800690c:	eb12 0801 	adds.w	r8, r2, r1
 8006910:	4629      	mov	r1, r5
 8006912:	eb43 0901 	adc.w	r9, r3, r1
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800692a:	4690      	mov	r8, r2
 800692c:	4699      	mov	r9, r3
 800692e:	4623      	mov	r3, r4
 8006930:	eb18 0303 	adds.w	r3, r8, r3
 8006934:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006938:	462b      	mov	r3, r5
 800693a:	eb49 0303 	adc.w	r3, r9, r3
 800693e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800694e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006956:	460b      	mov	r3, r1
 8006958:	18db      	adds	r3, r3, r3
 800695a:	653b      	str	r3, [r7, #80]	; 0x50
 800695c:	4613      	mov	r3, r2
 800695e:	eb42 0303 	adc.w	r3, r2, r3
 8006962:	657b      	str	r3, [r7, #84]	; 0x54
 8006964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800696c:	f7f9 fc40 	bl	80001f0 <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4b61      	ldr	r3, [pc, #388]	; (8006afc <UART_SetConfig+0x2d4>)
 8006976:	fba3 2302 	umull	r2, r3, r3, r2
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	011c      	lsls	r4, r3, #4
 800697e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006982:	2200      	movs	r2, #0
 8006984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006988:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800698c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	1891      	adds	r1, r2, r2
 8006996:	64b9      	str	r1, [r7, #72]	; 0x48
 8006998:	415b      	adcs	r3, r3
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800699c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069a0:	4641      	mov	r1, r8
 80069a2:	eb12 0a01 	adds.w	sl, r2, r1
 80069a6:	4649      	mov	r1, r9
 80069a8:	eb43 0b01 	adc.w	fp, r3, r1
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069c0:	4692      	mov	sl, r2
 80069c2:	469b      	mov	fp, r3
 80069c4:	4643      	mov	r3, r8
 80069c6:	eb1a 0303 	adds.w	r3, sl, r3
 80069ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ce:	464b      	mov	r3, r9
 80069d0:	eb4b 0303 	adc.w	r3, fp, r3
 80069d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069ec:	460b      	mov	r3, r1
 80069ee:	18db      	adds	r3, r3, r3
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
 80069f2:	4613      	mov	r3, r2
 80069f4:	eb42 0303 	adc.w	r3, r2, r3
 80069f8:	647b      	str	r3, [r7, #68]	; 0x44
 80069fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a02:	f7f9 fbf5 	bl	80001f0 <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	; (8006afc <UART_SetConfig+0x2d4>)
 8006a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	2264      	movs	r2, #100	; 0x64
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	1acb      	subs	r3, r1, r3
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a22:	4b36      	ldr	r3, [pc, #216]	; (8006afc <UART_SetConfig+0x2d4>)
 8006a24:	fba3 2302 	umull	r2, r3, r3, r2
 8006a28:	095b      	lsrs	r3, r3, #5
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a30:	441c      	add	r4, r3
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a44:	4642      	mov	r2, r8
 8006a46:	464b      	mov	r3, r9
 8006a48:	1891      	adds	r1, r2, r2
 8006a4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a4c:	415b      	adcs	r3, r3
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a54:	4641      	mov	r1, r8
 8006a56:	1851      	adds	r1, r2, r1
 8006a58:	6339      	str	r1, [r7, #48]	; 0x30
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	414b      	adcs	r3, r1
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a6c:	4659      	mov	r1, fp
 8006a6e:	00cb      	lsls	r3, r1, #3
 8006a70:	4651      	mov	r1, sl
 8006a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a76:	4651      	mov	r1, sl
 8006a78:	00ca      	lsls	r2, r1, #3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4642      	mov	r2, r8
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a88:	464b      	mov	r3, r9
 8006a8a:	460a      	mov	r2, r1
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	18db      	adds	r3, r3, r3
 8006aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aae:	4613      	mov	r3, r2
 8006ab0:	eb42 0303 	adc.w	r3, r2, r3
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006abe:	f7f9 fb97 	bl	80001f0 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <UART_SetConfig+0x2d4>)
 8006ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	2164      	movs	r1, #100	; 0x64
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	3332      	adds	r3, #50	; 0x32
 8006ada:	4a08      	ldr	r2, [pc, #32]	; (8006afc <UART_SetConfig+0x2d4>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f003 0207 	and.w	r2, r3, #7
 8006ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4422      	add	r2, r4
 8006aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006af0:	e105      	b.n	8006cfe <UART_SetConfig+0x4d6>
 8006af2:	bf00      	nop
 8006af4:	40011000 	.word	0x40011000
 8006af8:	40011400 	.word	0x40011400
 8006afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b12:	4642      	mov	r2, r8
 8006b14:	464b      	mov	r3, r9
 8006b16:	1891      	adds	r1, r2, r2
 8006b18:	6239      	str	r1, [r7, #32]
 8006b1a:	415b      	adcs	r3, r3
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b22:	4641      	mov	r1, r8
 8006b24:	1854      	adds	r4, r2, r1
 8006b26:	4649      	mov	r1, r9
 8006b28:	eb43 0501 	adc.w	r5, r3, r1
 8006b2c:	f04f 0200 	mov.w	r2, #0
 8006b30:	f04f 0300 	mov.w	r3, #0
 8006b34:	00eb      	lsls	r3, r5, #3
 8006b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b3a:	00e2      	lsls	r2, r4, #3
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	461d      	mov	r5, r3
 8006b40:	4643      	mov	r3, r8
 8006b42:	18e3      	adds	r3, r4, r3
 8006b44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b48:	464b      	mov	r3, r9
 8006b4a:	eb45 0303 	adc.w	r3, r5, r3
 8006b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b62:	f04f 0200 	mov.w	r2, #0
 8006b66:	f04f 0300 	mov.w	r3, #0
 8006b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b6e:	4629      	mov	r1, r5
 8006b70:	008b      	lsls	r3, r1, #2
 8006b72:	4621      	mov	r1, r4
 8006b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b78:	4621      	mov	r1, r4
 8006b7a:	008a      	lsls	r2, r1, #2
 8006b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b80:	f7f9 fb36 	bl	80001f0 <__aeabi_uldivmod>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4b60      	ldr	r3, [pc, #384]	; (8006d0c <UART_SetConfig+0x4e4>)
 8006b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	011c      	lsls	r4, r3, #4
 8006b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b96:	2200      	movs	r2, #0
 8006b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	1891      	adds	r1, r2, r2
 8006baa:	61b9      	str	r1, [r7, #24]
 8006bac:	415b      	adcs	r3, r3
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	1851      	adds	r1, r2, r1
 8006bb8:	6139      	str	r1, [r7, #16]
 8006bba:	4649      	mov	r1, r9
 8006bbc:	414b      	adcs	r3, r1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	f04f 0300 	mov.w	r3, #0
 8006bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bcc:	4659      	mov	r1, fp
 8006bce:	00cb      	lsls	r3, r1, #3
 8006bd0:	4651      	mov	r1, sl
 8006bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd6:	4651      	mov	r1, sl
 8006bd8:	00ca      	lsls	r2, r1, #3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	4642      	mov	r2, r8
 8006be2:	189b      	adds	r3, r3, r2
 8006be4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006be8:	464b      	mov	r3, r9
 8006bea:	460a      	mov	r2, r1
 8006bec:	eb42 0303 	adc.w	r3, r2, r3
 8006bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	4641      	mov	r1, r8
 8006c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c16:	4641      	mov	r1, r8
 8006c18:	008a      	lsls	r2, r1, #2
 8006c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c1e:	f7f9 fae7 	bl	80001f0 <__aeabi_uldivmod>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4b39      	ldr	r3, [pc, #228]	; (8006d0c <UART_SetConfig+0x4e4>)
 8006c28:	fba3 1302 	umull	r1, r3, r3, r2
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	2164      	movs	r1, #100	; 0x64
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	3332      	adds	r3, #50	; 0x32
 8006c3a:	4a34      	ldr	r2, [pc, #208]	; (8006d0c <UART_SetConfig+0x4e4>)
 8006c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c46:	441c      	add	r4, r3
 8006c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c50:	677a      	str	r2, [r7, #116]	; 0x74
 8006c52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c56:	4642      	mov	r2, r8
 8006c58:	464b      	mov	r3, r9
 8006c5a:	1891      	adds	r1, r2, r2
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	415b      	adcs	r3, r3
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c66:	4641      	mov	r1, r8
 8006c68:	1851      	adds	r1, r2, r1
 8006c6a:	6039      	str	r1, [r7, #0]
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	414b      	adcs	r3, r1
 8006c70:	607b      	str	r3, [r7, #4]
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c7e:	4659      	mov	r1, fp
 8006c80:	00cb      	lsls	r3, r1, #3
 8006c82:	4651      	mov	r1, sl
 8006c84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c88:	4651      	mov	r1, sl
 8006c8a:	00ca      	lsls	r2, r1, #3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	4642      	mov	r2, r8
 8006c94:	189b      	adds	r3, r3, r2
 8006c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c98:	464b      	mov	r3, r9
 8006c9a:	460a      	mov	r2, r1
 8006c9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	663b      	str	r3, [r7, #96]	; 0x60
 8006cac:	667a      	str	r2, [r7, #100]	; 0x64
 8006cae:	f04f 0200 	mov.w	r2, #0
 8006cb2:	f04f 0300 	mov.w	r3, #0
 8006cb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006cba:	4649      	mov	r1, r9
 8006cbc:	008b      	lsls	r3, r1, #2
 8006cbe:	4641      	mov	r1, r8
 8006cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	008a      	lsls	r2, r1, #2
 8006cc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ccc:	f7f9 fa90 	bl	80001f0 <__aeabi_uldivmod>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <UART_SetConfig+0x4e4>)
 8006cd6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	2164      	movs	r1, #100	; 0x64
 8006cde:	fb01 f303 	mul.w	r3, r1, r3
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	3332      	adds	r3, #50	; 0x32
 8006ce8:	4a08      	ldr	r2, [pc, #32]	; (8006d0c <UART_SetConfig+0x4e4>)
 8006cea:	fba2 2303 	umull	r2, r3, r2, r3
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4422      	add	r2, r4
 8006cfc:	609a      	str	r2, [r3, #8]
}
 8006cfe:	bf00      	nop
 8006d00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d04:	46bd      	mov	sp, r7
 8006d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0a:	bf00      	nop
 8006d0c:	51eb851f 	.word	0x51eb851f

08006d10 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d123      	bne.n	8006d6a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	6851      	ldr	r1, [r2, #4]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	6892      	ldr	r2, [r2, #8]
 8006d36:	4311      	orrs	r1, r2
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	68d2      	ldr	r2, [r2, #12]
 8006d3c:	4311      	orrs	r1, r2
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	6912      	ldr	r2, [r2, #16]
 8006d42:	4311      	orrs	r1, r2
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	6952      	ldr	r2, [r2, #20]
 8006d48:	4311      	orrs	r1, r2
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	6992      	ldr	r2, [r2, #24]
 8006d4e:	4311      	orrs	r1, r2
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	69d2      	ldr	r2, [r2, #28]
 8006d54:	4311      	orrs	r1, r2
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	6a12      	ldr	r2, [r2, #32]
 8006d5a:	4311      	orrs	r1, r2
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d60:	430a      	orrs	r2, r1
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	e028      	b.n	8006dbc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	69d9      	ldr	r1, [r3, #28]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	4319      	orrs	r1, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	430b      	orrs	r3, r1
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	6851      	ldr	r1, [r2, #4]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	6892      	ldr	r2, [r2, #8]
 8006d9c:	4311      	orrs	r1, r2
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	68d2      	ldr	r2, [r2, #12]
 8006da2:	4311      	orrs	r1, r2
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	6912      	ldr	r2, [r2, #16]
 8006da8:	4311      	orrs	r1, r2
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	6952      	ldr	r2, [r2, #20]
 8006dae:	4311      	orrs	r1, r2
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	6992      	ldr	r2, [r2, #24]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d128      	bne.n	8006e2e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	1e59      	subs	r1, r3, #1
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4319      	orrs	r1, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	4319      	orrs	r1, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	031b      	lsls	r3, r3, #12
 8006e06:	4319      	orrs	r1, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	4319      	orrs	r1, r3
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	051b      	lsls	r3, r3, #20
 8006e1a:	4319      	orrs	r1, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	061b      	lsls	r3, r3, #24
 8006e24:	430b      	orrs	r3, r1
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	e02f      	b.n	8006e8e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	68d2      	ldr	r2, [r2, #12]
 8006e3e:	3a01      	subs	r2, #1
 8006e40:	0311      	lsls	r1, r2, #12
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	6952      	ldr	r2, [r2, #20]
 8006e46:	3a01      	subs	r2, #1
 8006e48:	0512      	lsls	r2, r2, #20
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	1e59      	subs	r1, r3, #1
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	4319      	orrs	r1, r3
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	4319      	orrs	r1, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	4319      	orrs	r1, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	061b      	lsls	r3, r3, #24
 8006e86:	430b      	orrs	r3, r1
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	f107 001c 	add.w	r0, r7, #28
 8006eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d122      	bne.n	8006efa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d105      	bne.n	8006eee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 fbee 	bl	80086d0 <USB_CoreReset>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e01a      	b.n	8006f30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fbe2 	bl	80086d0 <USB_CoreReset>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
 8006f22:	e005      	b.n	8006f30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d10b      	bne.n	8006f4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f043 0206 	orr.w	r2, r3, #6
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f043 0220 	orr.w	r2, r3, #32
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f5a:	b004      	add	sp, #16
 8006f5c:	4770      	bx	lr
	...

08006f60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d165      	bne.n	8007040 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4a41      	ldr	r2, [pc, #260]	; (800707c <USB_SetTurnaroundTime+0x11c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d906      	bls.n	8006f8a <USB_SetTurnaroundTime+0x2a>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4a40      	ldr	r2, [pc, #256]	; (8007080 <USB_SetTurnaroundTime+0x120>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d202      	bcs.n	8006f8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f84:	230f      	movs	r3, #15
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e062      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <USB_SetTurnaroundTime+0x120>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d306      	bcc.n	8006fa0 <USB_SetTurnaroundTime+0x40>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	4a3b      	ldr	r2, [pc, #236]	; (8007084 <USB_SetTurnaroundTime+0x124>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d202      	bcs.n	8006fa0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f9a:	230e      	movs	r3, #14
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e057      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4a38      	ldr	r2, [pc, #224]	; (8007084 <USB_SetTurnaroundTime+0x124>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d306      	bcc.n	8006fb6 <USB_SetTurnaroundTime+0x56>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	4a37      	ldr	r2, [pc, #220]	; (8007088 <USB_SetTurnaroundTime+0x128>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d202      	bcs.n	8006fb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fb0:	230d      	movs	r3, #13
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e04c      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4a33      	ldr	r2, [pc, #204]	; (8007088 <USB_SetTurnaroundTime+0x128>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d306      	bcc.n	8006fcc <USB_SetTurnaroundTime+0x6c>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4a32      	ldr	r2, [pc, #200]	; (800708c <USB_SetTurnaroundTime+0x12c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d802      	bhi.n	8006fcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	e041      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4a2f      	ldr	r2, [pc, #188]	; (800708c <USB_SetTurnaroundTime+0x12c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d906      	bls.n	8006fe2 <USB_SetTurnaroundTime+0x82>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	4a2e      	ldr	r2, [pc, #184]	; (8007090 <USB_SetTurnaroundTime+0x130>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d802      	bhi.n	8006fe2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fdc:	230b      	movs	r3, #11
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	e036      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <USB_SetTurnaroundTime+0x130>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d906      	bls.n	8006ff8 <USB_SetTurnaroundTime+0x98>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	4a29      	ldr	r2, [pc, #164]	; (8007094 <USB_SetTurnaroundTime+0x134>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d802      	bhi.n	8006ff8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e02b      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a26      	ldr	r2, [pc, #152]	; (8007094 <USB_SetTurnaroundTime+0x134>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d906      	bls.n	800700e <USB_SetTurnaroundTime+0xae>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4a25      	ldr	r2, [pc, #148]	; (8007098 <USB_SetTurnaroundTime+0x138>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d202      	bcs.n	800700e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007008:	2309      	movs	r3, #9
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	e020      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4a21      	ldr	r2, [pc, #132]	; (8007098 <USB_SetTurnaroundTime+0x138>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d306      	bcc.n	8007024 <USB_SetTurnaroundTime+0xc4>
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4a20      	ldr	r2, [pc, #128]	; (800709c <USB_SetTurnaroundTime+0x13c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d802      	bhi.n	8007024 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800701e:	2308      	movs	r3, #8
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e015      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4a1d      	ldr	r2, [pc, #116]	; (800709c <USB_SetTurnaroundTime+0x13c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d906      	bls.n	800703a <USB_SetTurnaroundTime+0xda>
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4a1c      	ldr	r2, [pc, #112]	; (80070a0 <USB_SetTurnaroundTime+0x140>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d202      	bcs.n	800703a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007034:	2307      	movs	r3, #7
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	e00a      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800703a:	2306      	movs	r3, #6
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	e007      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007040:	79fb      	ldrb	r3, [r7, #7]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007046:	2309      	movs	r3, #9
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	e001      	b.n	8007050 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800704c:	2309      	movs	r3, #9
 800704e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	029b      	lsls	r3, r3, #10
 8007064:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	00d8acbf 	.word	0x00d8acbf
 8007080:	00e4e1c0 	.word	0x00e4e1c0
 8007084:	00f42400 	.word	0x00f42400
 8007088:	01067380 	.word	0x01067380
 800708c:	011a499f 	.word	0x011a499f
 8007090:	01312cff 	.word	0x01312cff
 8007094:	014ca43f 	.word	0x014ca43f
 8007098:	016e3600 	.word	0x016e3600
 800709c:	01a6ab1f 	.word	0x01a6ab1f
 80070a0:	01e84800 	.word	0x01e84800

080070a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f043 0201 	orr.w	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f023 0201 	bic.w	r2, r3, #1
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d115      	bne.n	8007136 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007116:	2001      	movs	r0, #1
 8007118:	f7fa fcd0 	bl	8001abc <HAL_Delay>
      ms++;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
 8007120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fa45 	bl	80085b2 <USB_GetMode>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d01e      	beq.n	800716c <USB_SetCurrentMode+0x84>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b31      	cmp	r3, #49	; 0x31
 8007132:	d9f0      	bls.n	8007116 <USB_SetCurrentMode+0x2e>
 8007134:	e01a      	b.n	800716c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d115      	bne.n	8007168 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007148:	2001      	movs	r0, #1
 800714a:	f7fa fcb7 	bl	8001abc <HAL_Delay>
      ms++;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3301      	adds	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fa2c 	bl	80085b2 <USB_GetMode>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <USB_SetCurrentMode+0x84>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b31      	cmp	r3, #49	; 0x31
 8007164:	d9f0      	bls.n	8007148 <USB_SetCurrentMode+0x60>
 8007166:	e001      	b.n	800716c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e005      	b.n	8007178 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b32      	cmp	r3, #50	; 0x32
 8007170:	d101      	bne.n	8007176 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007180:	b084      	sub	sp, #16
 8007182:	b580      	push	{r7, lr}
 8007184:	b086      	sub	sp, #24
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800718e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	e009      	b.n	80071b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3340      	adds	r3, #64	; 0x40
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3301      	adds	r3, #1
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b0e      	cmp	r3, #14
 80071b8:	d9f2      	bls.n	80071a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d11c      	bne.n	80071fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ce:	f043 0302 	orr.w	r3, r3, #2
 80071d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
 80071f8:	e00b      	b.n	8007212 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007218:	461a      	mov	r2, r3
 800721a:	2300      	movs	r3, #0
 800721c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007224:	4619      	mov	r1, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722c:	461a      	mov	r2, r3
 800722e:	680b      	ldr	r3, [r1, #0]
 8007230:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10c      	bne.n	8007252 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800723e:	2100      	movs	r1, #0
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f965 	bl	8007510 <USB_SetDevSpeed>
 8007246:	e008      	b.n	800725a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007248:	2101      	movs	r1, #1
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f960 	bl	8007510 <USB_SetDevSpeed>
 8007250:	e003      	b.n	800725a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007252:	2103      	movs	r1, #3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f95b 	bl	8007510 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800725a:	2110      	movs	r1, #16
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f8f3 	bl	8007448 <USB_FlushTxFifo>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f91f 	bl	80074b0 <USB_FlushRxFifo>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	461a      	mov	r2, r3
 8007284:	2300      	movs	r3, #0
 8007286:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728e:	461a      	mov	r2, r3
 8007290:	2300      	movs	r3, #0
 8007292:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	461a      	mov	r2, r3
 800729c:	2300      	movs	r3, #0
 800729e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a0:	2300      	movs	r3, #0
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	e043      	b.n	800732e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072bc:	d118      	bne.n	80072f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	461a      	mov	r2, r3
 80072d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	e013      	b.n	8007302 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e6:	461a      	mov	r2, r3
 80072e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	e008      	b.n	8007302 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fc:	461a      	mov	r2, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800730e:	461a      	mov	r2, r3
 8007310:	2300      	movs	r3, #0
 8007312:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	461a      	mov	r2, r3
 8007322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007326:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3301      	adds	r3, #1
 800732c:	613b      	str	r3, [r7, #16]
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	429a      	cmp	r2, r3
 8007334:	d3b7      	bcc.n	80072a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	e043      	b.n	80073c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800734e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007352:	d118      	bne.n	8007386 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	e013      	b.n	8007398 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	461a      	mov	r2, r3
 800737e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	e008      	b.n	8007398 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	015a      	lsls	r2, r3, #5
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4413      	add	r3, r2
 800738e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007392:	461a      	mov	r2, r3
 8007394:	2300      	movs	r3, #0
 8007396:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a4:	461a      	mov	r2, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	461a      	mov	r2, r3
 80073b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3301      	adds	r3, #1
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d3b7      	bcc.n	800733c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d105      	bne.n	8007400 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	f043 0210 	orr.w	r2, r3, #16
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <USB_DevInit+0x2c4>)
 8007406:	4313      	orrs	r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800740c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d005      	beq.n	800741e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	f043 0208 	orr.w	r2, r3, #8
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007420:	2b01      	cmp	r3, #1
 8007422:	d107      	bne.n	8007434 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800742c:	f043 0304 	orr.w	r3, r3, #4
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007440:	b004      	add	sp, #16
 8007442:	4770      	bx	lr
 8007444:	803c3800 	.word	0x803c3800

08007448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4a13      	ldr	r2, [pc, #76]	; (80074ac <USB_FlushTxFifo+0x64>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d901      	bls.n	8007468 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e01b      	b.n	80074a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	daf2      	bge.n	8007456 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	019b      	lsls	r3, r3, #6
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	3301      	adds	r3, #1
 8007484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4a08      	ldr	r2, [pc, #32]	; (80074ac <USB_FlushTxFifo+0x64>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d901      	bls.n	8007492 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e006      	b.n	80074a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b20      	cmp	r3, #32
 800749c:	d0f0      	beq.n	8007480 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	00030d40 	.word	0x00030d40

080074b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	4a11      	ldr	r2, [pc, #68]	; (800750c <USB_FlushRxFifo+0x5c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d901      	bls.n	80074ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e018      	b.n	8007500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	daf2      	bge.n	80074bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2210      	movs	r2, #16
 80074de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <USB_FlushRxFifo+0x5c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e006      	b.n	8007500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b10      	cmp	r3, #16
 80074fc:	d0f0      	beq.n	80074e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	00030d40 	.word	0x00030d40

08007510 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007530:	4313      	orrs	r3, r2
 8007532:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007542:	b480      	push	{r7}
 8007544:	b087      	sub	sp, #28
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f003 0306 	and.w	r3, r3, #6
 800755a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]
 8007566:	e00a      	b.n	800757e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d002      	beq.n	8007574 <USB_GetDevSpeed+0x32>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b06      	cmp	r3, #6
 8007572:	d102      	bne.n	800757a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007574:	2302      	movs	r3, #2
 8007576:	75fb      	strb	r3, [r7, #23]
 8007578:	e001      	b.n	800757e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800757a:	230f      	movs	r3, #15
 800757c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007580:	4618      	mov	r0, r3
 8007582:	371c      	adds	r7, #28
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d13a      	bne.n	800761e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	69da      	ldr	r2, [r3, #28]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	2101      	movs	r1, #1
 80075ba:	fa01 f303 	lsl.w	r3, r1, r3
 80075be:	b29b      	uxth	r3, r3
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d155      	bne.n	800768c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	791b      	ldrb	r3, [r3, #4]
 80075fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	059b      	lsls	r3, r3, #22
 8007602:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007604:	4313      	orrs	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	0151      	lsls	r1, r2, #5
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	440a      	add	r2, r1
 800760e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	e036      	b.n	800768c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	69da      	ldr	r2, [r3, #28]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	2101      	movs	r1, #1
 8007630:	fa01 f303 	lsl.w	r3, r1, r3
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800763c:	4313      	orrs	r3, r2
 800763e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4413      	add	r3, r2
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d11a      	bne.n	800768c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	791b      	ldrb	r3, [r3, #4]
 8007670:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007672:	430b      	orrs	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d161      	bne.n	800777c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076ce:	d11f      	bne.n	8007710 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	440a      	add	r2, r1
 8007706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800770e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f303 	lsl.w	r3, r1, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	43db      	mvns	r3, r3
 800772a:	68f9      	ldr	r1, [r7, #12]
 800772c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007730:	4013      	ands	r3, r2
 8007732:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773a:	69da      	ldr	r2, [r3, #28]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f003 030f 	and.w	r3, r3, #15
 8007744:	2101      	movs	r1, #1
 8007746:	fa01 f303 	lsl.w	r3, r1, r3
 800774a:	b29b      	uxth	r3, r3
 800774c:	43db      	mvns	r3, r3
 800774e:	68f9      	ldr	r1, [r7, #12]
 8007750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007754:	4013      	ands	r3, r2
 8007756:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	0159      	lsls	r1, r3, #5
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	440b      	add	r3, r1
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	4619      	mov	r1, r3
 8007774:	4b35      	ldr	r3, [pc, #212]	; (800784c <USB_DeactivateEndpoint+0x1b0>)
 8007776:	4013      	ands	r3, r2
 8007778:	600b      	str	r3, [r1, #0]
 800777a:	e060      	b.n	800783e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800778e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007792:	d11f      	bne.n	80077d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	2101      	movs	r1, #1
 80077e6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	43db      	mvns	r3, r3
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077f4:	4013      	ands	r3, r2
 80077f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	69da      	ldr	r2, [r3, #28]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	f003 030f 	and.w	r3, r3, #15
 8007808:	2101      	movs	r1, #1
 800780a:	fa01 f303 	lsl.w	r3, r1, r3
 800780e:	041b      	lsls	r3, r3, #16
 8007810:	43db      	mvns	r3, r3
 8007812:	68f9      	ldr	r1, [r7, #12]
 8007814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007818:	4013      	ands	r3, r2
 800781a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	0159      	lsls	r1, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	440b      	add	r3, r1
 8007832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007836:	4619      	mov	r1, r3
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <USB_DeactivateEndpoint+0x1b4>)
 800783a:	4013      	ands	r3, r2
 800783c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	ec337800 	.word	0xec337800
 8007850:	eff37800 	.word	0xeff37800

08007854 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	; 0x28
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b01      	cmp	r3, #1
 8007872:	f040 815c 	bne.w	8007b2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d132      	bne.n	80078e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007898:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800789c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	0151      	lsls	r1, r2, #5
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	440a      	add	r2, r1
 80078b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078dc:	0cdb      	lsrs	r3, r3, #19
 80078de:	04db      	lsls	r3, r3, #19
 80078e0:	6113      	str	r3, [r2, #16]
 80078e2:	e074      	b.n	80079ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fe:	0cdb      	lsrs	r3, r3, #19
 8007900:	04db      	lsls	r3, r3, #19
 8007902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	69fa      	ldr	r2, [r7, #28]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007922:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007934:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6999      	ldr	r1, [r3, #24]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	440b      	add	r3, r1
 8007940:	1e59      	subs	r1, r3, #1
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	fbb1 f3f3 	udiv	r3, r1, r3
 800794a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800794c:	4b9d      	ldr	r3, [pc, #628]	; (8007bc4 <USB_EPStartXfer+0x370>)
 800794e:	400b      	ands	r3, r1
 8007950:	69b9      	ldr	r1, [r7, #24]
 8007952:	0148      	lsls	r0, r1, #5
 8007954:	69f9      	ldr	r1, [r7, #28]
 8007956:	4401      	add	r1, r0
 8007958:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800795c:	4313      	orrs	r3, r2
 800795e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	691a      	ldr	r2, [r3, #16]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007976:	69b9      	ldr	r1, [r7, #24]
 8007978:	0148      	lsls	r0, r1, #5
 800797a:	69f9      	ldr	r1, [r7, #28]
 800797c:	4401      	add	r1, r0
 800797e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007982:	4313      	orrs	r3, r2
 8007984:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d11f      	bne.n	80079ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80079ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	69fa      	ldr	r2, [r7, #28]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d14b      	bne.n	8007a6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	461a      	mov	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d128      	bne.n	8007a4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d110      	bne.n	8007a2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	e00f      	b.n	8007a4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	e133      	b.n	8007cd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	0151      	lsls	r1, r2, #5
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	440a      	add	r2, r1
 8007a82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	791b      	ldrb	r3, [r3, #4]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d015      	beq.n	8007ac0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 811b 	beq.w	8007cd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	2101      	movs	r1, #1
 8007ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007aba:	4313      	orrs	r3, r2
 8007abc:	634b      	str	r3, [r1, #52]	; 0x34
 8007abe:	e109      	b.n	8007cd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d110      	bne.n	8007af2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	e00f      	b.n	8007b12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6919      	ldr	r1, [r3, #16]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	781a      	ldrb	r2, [r3, #0]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	b298      	uxth	r0, r3
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4603      	mov	r3, r0
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fade 	bl	80080e8 <USB_WritePacket>
 8007b2c:	e0d2      	b.n	8007cd4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	0151      	lsls	r1, r2, #5
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	440a      	add	r2, r1
 8007b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b48:	0cdb      	lsrs	r3, r3, #19
 8007b4a:	04db      	lsls	r3, r3, #19
 8007b4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d126      	bne.n	8007bc8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b90:	69b9      	ldr	r1, [r7, #24]
 8007b92:	0148      	lsls	r0, r1, #5
 8007b94:	69f9      	ldr	r1, [r7, #28]
 8007b96:	4401      	add	r1, r0
 8007b98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bbe:	6113      	str	r3, [r2, #16]
 8007bc0:	e03a      	b.n	8007c38 <USB_EPStartXfer+0x3e4>
 8007bc2:	bf00      	nop
 8007bc4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	1e5a      	subs	r2, r3, #1
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bdc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	8afa      	ldrh	r2, [r7, #22]
 8007be4:	fb03 f202 	mul.w	r2, r3, r2
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	8afb      	ldrh	r3, [r7, #22]
 8007bfc:	04d9      	lsls	r1, r3, #19
 8007bfe:	4b38      	ldr	r3, [pc, #224]	; (8007ce0 <USB_EPStartXfer+0x48c>)
 8007c00:	400b      	ands	r3, r1
 8007c02:	69b9      	ldr	r1, [r7, #24]
 8007c04:	0148      	lsls	r0, r1, #5
 8007c06:	69f9      	ldr	r1, [r7, #28]
 8007c08:	4401      	add	r1, r0
 8007c0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c28:	69b9      	ldr	r1, [r7, #24]
 8007c2a:	0148      	lsls	r0, r1, #5
 8007c2c:	69f9      	ldr	r1, [r7, #28]
 8007c2e:	4401      	add	r1, r0
 8007c30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c34:	4313      	orrs	r3, r2
 8007c36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d10d      	bne.n	8007c5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6919      	ldr	r1, [r3, #16]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	460a      	mov	r2, r1
 8007c58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	791b      	ldrb	r3, [r3, #4]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d128      	bne.n	8007cb4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d110      	bne.n	8007c94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	e00f      	b.n	8007cb4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	69fa      	ldr	r2, [r7, #28]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	1ff80000 	.word	0x1ff80000

08007ce4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	f040 80ce 	bne.w	8007ea2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d132      	bne.n	8007d74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	0151      	lsls	r1, r2, #5
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	440a      	add	r2, r1
 8007d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	0151      	lsls	r1, r2, #5
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	440a      	add	r2, r1
 8007d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6c:	0cdb      	lsrs	r3, r3, #19
 8007d6e:	04db      	lsls	r3, r3, #19
 8007d70:	6113      	str	r3, [r2, #16]
 8007d72:	e04e      	b.n	8007e12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	0151      	lsls	r1, r2, #5
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	440a      	add	r2, r1
 8007d8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d8e:	0cdb      	lsrs	r3, r3, #19
 8007d90:	04db      	lsls	r3, r3, #19
 8007d92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	015a      	lsls	r2, r3, #5
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	0151      	lsls	r1, r2, #5
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	440a      	add	r2, r1
 8007daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007db2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007db6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	699a      	ldr	r2, [r3, #24]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d903      	bls.n	8007dcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e02:	6939      	ldr	r1, [r7, #16]
 8007e04:	0148      	lsls	r0, r1, #5
 8007e06:	6979      	ldr	r1, [r7, #20]
 8007e08:	4401      	add	r1, r0
 8007e0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d11e      	bne.n	8007e56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d009      	beq.n	8007e34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	0151      	lsls	r1, r2, #5
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	440a      	add	r2, r1
 8007e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e52:	6013      	str	r3, [r2, #0]
 8007e54:	e097      	b.n	8007f86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8083 	beq.w	8007f86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	2101      	movs	r1, #1
 8007e92:	fa01 f303 	lsl.w	r3, r1, r3
 8007e96:	6979      	ldr	r1, [r7, #20]
 8007e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	634b      	str	r3, [r1, #52]	; 0x34
 8007ea0:	e071      	b.n	8007f86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	0151      	lsls	r1, r2, #5
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	440a      	add	r2, r1
 8007eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ebc:	0cdb      	lsrs	r3, r3, #19
 8007ebe:	04db      	lsls	r3, r3, #19
 8007ec0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ee4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f34:	6939      	ldr	r1, [r7, #16]
 8007f36:	0148      	lsls	r0, r1, #5
 8007f38:	6979      	ldr	r1, [r7, #20]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f40:	4313      	orrs	r3, r2
 8007f42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10d      	bne.n	8007f66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	6919      	ldr	r1, [r3, #16]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	460a      	mov	r2, r1
 8007f64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	371c      	adds	r7, #28
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d14a      	bne.n	8008048 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fca:	f040 8086 	bne.w	80080da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ff0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008014:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008022:	4293      	cmp	r3, r2
 8008024:	d902      	bls.n	800802c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	75fb      	strb	r3, [r7, #23]
          break;
 800802a:	e056      	b.n	80080da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008044:	d0e7      	beq.n	8008016 <USB_EPStopXfer+0x82>
 8008046:	e048      	b.n	80080da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800805c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008060:	d13b      	bne.n	80080da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008084:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	7812      	ldrb	r2, [r2, #0]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d902      	bls.n	80080c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	75fb      	strb	r3, [r7, #23]
          break;
 80080be:	e00c      	b.n	80080da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d8:	d0e7      	beq.n	80080aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b089      	sub	sp, #36	; 0x24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4611      	mov	r1, r2
 80080f4:	461a      	mov	r2, r3
 80080f6:	460b      	mov	r3, r1
 80080f8:	71fb      	strb	r3, [r7, #7]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008106:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800810a:	2b00      	cmp	r3, #0
 800810c:	d123      	bne.n	8008156 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800810e:	88bb      	ldrh	r3, [r7, #4]
 8008110:	3303      	adds	r3, #3
 8008112:	089b      	lsrs	r3, r3, #2
 8008114:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008116:	2300      	movs	r3, #0
 8008118:	61bb      	str	r3, [r7, #24]
 800811a:	e018      	b.n	800814e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	031a      	lsls	r2, r3, #12
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	4413      	add	r3, r2
 8008124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008128:	461a      	mov	r2, r3
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	3301      	adds	r3, #1
 8008134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	3301      	adds	r3, #1
 800813a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	3301      	adds	r3, #1
 8008140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	3301      	adds	r3, #1
 8008146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	3301      	adds	r3, #1
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	429a      	cmp	r2, r3
 8008154:	d3e2      	bcc.n	800811c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3724      	adds	r7, #36	; 0x24
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008164:	b480      	push	{r7}
 8008166:	b08b      	sub	sp, #44	; 0x2c
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800817a:	88fb      	ldrh	r3, [r7, #6]
 800817c:	089b      	lsrs	r3, r3, #2
 800817e:	b29b      	uxth	r3, r3
 8008180:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800818a:	2300      	movs	r3, #0
 800818c:	623b      	str	r3, [r7, #32]
 800818e:	e014      	b.n	80081ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	601a      	str	r2, [r3, #0]
    pDest++;
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	3301      	adds	r3, #1
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	3301      	adds	r3, #1
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	3301      	adds	r3, #1
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	3301      	adds	r3, #1
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	3301      	adds	r3, #1
 80081b8:	623b      	str	r3, [r7, #32]
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d3e6      	bcc.n	8008190 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081c2:	8bfb      	ldrh	r3, [r7, #30]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01e      	beq.n	8008206 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081d2:	461a      	mov	r2, r3
 80081d4:	f107 0310 	add.w	r3, r7, #16
 80081d8:	6812      	ldr	r2, [r2, #0]
 80081da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	701a      	strb	r2, [r3, #0]
      i++;
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	3301      	adds	r3, #1
 80081f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	3301      	adds	r3, #1
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081fa:	8bfb      	ldrh	r3, [r7, #30]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008200:	8bfb      	ldrh	r3, [r7, #30]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1ea      	bne.n	80081dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008208:	4618      	mov	r0, r3
 800820a:	372c      	adds	r7, #44	; 0x2c
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d12c      	bne.n	800828a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	db12      	blt.n	8008268 <USB_EPSetStall+0x54>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00f      	beq.n	8008268 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008266:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	e02b      	b.n	80082e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	db12      	blt.n	80082c2 <USB_EPSetStall+0xae>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00f      	beq.n	80082c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d128      	bne.n	800835e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	0151      	lsls	r1, r2, #5
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	440a      	add	r2, r1
 8008322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800832a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	791b      	ldrb	r3, [r3, #4]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d003      	beq.n	800833c <USB_EPClearStall+0x4c>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	791b      	ldrb	r3, [r3, #4]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d138      	bne.n	80083ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0151      	lsls	r1, r2, #5
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	440a      	add	r2, r1
 8008352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	e027      	b.n	80083ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	015a      	lsls	r2, r3, #5
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	4413      	add	r3, r2
 8008366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	0151      	lsls	r1, r2, #5
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	440a      	add	r2, r1
 8008374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008378:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800837c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	2b03      	cmp	r3, #3
 8008384:	d003      	beq.n	800838e <USB_EPClearStall+0x9e>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	791b      	ldrb	r3, [r3, #4]
 800838a:	2b02      	cmp	r3, #2
 800838c:	d10f      	bne.n	80083ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083f0:	68f9      	ldr	r1, [r7, #12]
 80083f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083f6:	4313      	orrs	r3, r2
 80083f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008422:	f023 0303 	bic.w	r3, r3, #3
 8008426:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008436:	f023 0302 	bic.w	r3, r3, #2
 800843a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008464:	f023 0303 	bic.w	r3, r3, #3
 8008468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008478:	f043 0302 	orr.w	r3, r3, #2
 800847c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4013      	ands	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084a4:	68fb      	ldr	r3, [r7, #12]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	4013      	ands	r3, r2
 80084d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	0c1b      	lsrs	r3, r3, #16
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	4013      	ands	r3, r2
 8008508:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	b29b      	uxth	r3, r3
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	4013      	ands	r3, r2
 8008546:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008548:	68bb      	ldr	r3, [r7, #8]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008556:	b480      	push	{r7}
 8008558:	b087      	sub	sp, #28
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800857a:	78fb      	ldrb	r3, [r7, #3]
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	fa22 f303 	lsr.w	r3, r2, r3
 8008586:	01db      	lsls	r3, r3, #7
 8008588:	b2db      	uxtb	r3, r3
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	4413      	add	r3, r2
 8008598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4013      	ands	r3, r2
 80085a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085a4:	68bb      	ldr	r3, [r7, #8]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f003 0301 	and.w	r3, r3, #1
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b085      	sub	sp, #20
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80085ec:	f023 0307 	bic.w	r3, r3, #7
 80085f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008614:	b480      	push	{r7}
 8008616:	b087      	sub	sp, #28
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	460b      	mov	r3, r1
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	333c      	adds	r3, #60	; 0x3c
 800862a:	3304      	adds	r3, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4a26      	ldr	r2, [pc, #152]	; (80086cc <USB_EP0_OutStart+0xb8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d90a      	bls.n	800864e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008648:	d101      	bne.n	800864e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	e037      	b.n	80086be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008654:	461a      	mov	r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800866c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800867c:	f043 0318 	orr.w	r3, r3, #24
 8008680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008690:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008694:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008696:	7afb      	ldrb	r3, [r7, #11]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d10f      	bne.n	80086bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	4f54300a 	.word	0x4f54300a

080086d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a13      	ldr	r2, [pc, #76]	; (8008734 <USB_CoreReset+0x64>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e01b      	b.n	8008726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	daf2      	bge.n	80086dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f043 0201 	orr.w	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3301      	adds	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a09      	ldr	r2, [pc, #36]	; (8008734 <USB_CoreReset+0x64>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d901      	bls.n	8008718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e006      	b.n	8008726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d0f0      	beq.n	8008706 <USB_CoreReset+0x36>

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	00030d40 	.word	0x00030d40

08008738 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008744:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008748:	f003 ff20 	bl	800c58c <USBD_static_malloc>
 800874c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d109      	bne.n	8008768 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	32b0      	adds	r2, #176	; 0xb0
 800875e:	2100      	movs	r1, #0
 8008760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008764:	2302      	movs	r3, #2
 8008766:	e0d4      	b.n	8008912 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008768:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800876c:	2100      	movs	r1, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f003 ff76 	bl	800c660 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	32b0      	adds	r2, #176	; 0xb0
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	32b0      	adds	r2, #176	; 0xb0
 800878e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7c1b      	ldrb	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d138      	bne.n	8008812 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087a0:	4b5e      	ldr	r3, [pc, #376]	; (800891c <USBD_CDC_Init+0x1e4>)
 80087a2:	7819      	ldrb	r1, [r3, #0]
 80087a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087a8:	2202      	movs	r2, #2
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f003 fdcb 	bl	800c346 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80087b0:	4b5a      	ldr	r3, [pc, #360]	; (800891c <USBD_CDC_Init+0x1e4>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	6879      	ldr	r1, [r7, #4]
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	440b      	add	r3, r1
 80087c4:	3324      	adds	r3, #36	; 0x24
 80087c6:	2201      	movs	r2, #1
 80087c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087ca:	4b55      	ldr	r3, [pc, #340]	; (8008920 <USBD_CDC_Init+0x1e8>)
 80087cc:	7819      	ldrb	r1, [r3, #0]
 80087ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087d2:	2202      	movs	r2, #2
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f003 fdb6 	bl	800c346 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087da:	4b51      	ldr	r3, [pc, #324]	; (8008920 <USBD_CDC_Init+0x1e8>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f003 020f 	and.w	r2, r3, #15
 80087e2:	6879      	ldr	r1, [r7, #4]
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	440b      	add	r3, r1
 80087ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087f2:	2201      	movs	r2, #1
 80087f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087f6:	4b4b      	ldr	r3, [pc, #300]	; (8008924 <USBD_CDC_Init+0x1ec>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	f003 020f 	and.w	r2, r3, #15
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	3326      	adds	r3, #38	; 0x26
 800880c:	2210      	movs	r2, #16
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e035      	b.n	800887e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008812:	4b42      	ldr	r3, [pc, #264]	; (800891c <USBD_CDC_Init+0x1e4>)
 8008814:	7819      	ldrb	r1, [r3, #0]
 8008816:	2340      	movs	r3, #64	; 0x40
 8008818:	2202      	movs	r2, #2
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f003 fd93 	bl	800c346 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008820:	4b3e      	ldr	r3, [pc, #248]	; (800891c <USBD_CDC_Init+0x1e4>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	f003 020f 	and.w	r2, r3, #15
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	3324      	adds	r3, #36	; 0x24
 8008836:	2201      	movs	r2, #1
 8008838:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800883a:	4b39      	ldr	r3, [pc, #228]	; (8008920 <USBD_CDC_Init+0x1e8>)
 800883c:	7819      	ldrb	r1, [r3, #0]
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	2202      	movs	r2, #2
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f003 fd7f 	bl	800c346 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008848:	4b35      	ldr	r3, [pc, #212]	; (8008920 <USBD_CDC_Init+0x1e8>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 020f 	and.w	r2, r3, #15
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	440b      	add	r3, r1
 800885c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008860:	2201      	movs	r2, #1
 8008862:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008864:	4b2f      	ldr	r3, [pc, #188]	; (8008924 <USBD_CDC_Init+0x1ec>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	3326      	adds	r3, #38	; 0x26
 800887a:	2210      	movs	r2, #16
 800887c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800887e:	4b29      	ldr	r3, [pc, #164]	; (8008924 <USBD_CDC_Init+0x1ec>)
 8008880:	7819      	ldrb	r1, [r3, #0]
 8008882:	2308      	movs	r3, #8
 8008884:	2203      	movs	r2, #3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f003 fd5d 	bl	800c346 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800888c:	4b25      	ldr	r3, [pc, #148]	; (8008924 <USBD_CDC_Init+0x1ec>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	f003 020f 	and.w	r2, r3, #15
 8008894:	6879      	ldr	r1, [r7, #4]
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	440b      	add	r3, r1
 80088a0:	3324      	adds	r3, #36	; 0x24
 80088a2:	2201      	movs	r2, #1
 80088a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	33b0      	adds	r3, #176	; 0xb0
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80088dc:	2302      	movs	r3, #2
 80088de:	e018      	b.n	8008912 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7c1b      	ldrb	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088e8:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <USBD_CDC_Init+0x1e8>)
 80088ea:	7819      	ldrb	r1, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f003 fe14 	bl	800c524 <USBD_LL_PrepareReceive>
 80088fc:	e008      	b.n	8008910 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088fe:	4b08      	ldr	r3, [pc, #32]	; (8008920 <USBD_CDC_Init+0x1e8>)
 8008900:	7819      	ldrb	r1, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008908:	2340      	movs	r3, #64	; 0x40
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f003 fe0a 	bl	800c524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000093 	.word	0x20000093
 8008920:	20000094 	.word	0x20000094
 8008924:	20000095 	.word	0x20000095

08008928 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008934:	4b3a      	ldr	r3, [pc, #232]	; (8008a20 <USBD_CDC_DeInit+0xf8>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f003 fd29 	bl	800c392 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008940:	4b37      	ldr	r3, [pc, #220]	; (8008a20 <USBD_CDC_DeInit+0xf8>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f003 020f 	and.w	r2, r3, #15
 8008948:	6879      	ldr	r1, [r7, #4]
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	440b      	add	r3, r1
 8008954:	3324      	adds	r3, #36	; 0x24
 8008956:	2200      	movs	r2, #0
 8008958:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800895a:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <USBD_CDC_DeInit+0xfc>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f003 fd16 	bl	800c392 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008966:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <USBD_CDC_DeInit+0xfc>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 020f 	and.w	r2, r3, #15
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	4613      	mov	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800897e:	2200      	movs	r2, #0
 8008980:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008982:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <USBD_CDC_DeInit+0x100>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f003 fd02 	bl	800c392 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800898e:	4b26      	ldr	r3, [pc, #152]	; (8008a28 <USBD_CDC_DeInit+0x100>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	f003 020f 	and.w	r2, r3, #15
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	3324      	adds	r3, #36	; 0x24
 80089a4:	2200      	movs	r2, #0
 80089a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80089a8:	4b1f      	ldr	r3, [pc, #124]	; (8008a28 <USBD_CDC_DeInit+0x100>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 020f 	and.w	r2, r3, #15
 80089b0:	6879      	ldr	r1, [r7, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	440b      	add	r3, r1
 80089bc:	3326      	adds	r3, #38	; 0x26
 80089be:	2200      	movs	r2, #0
 80089c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	32b0      	adds	r2, #176	; 0xb0
 80089cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01f      	beq.n	8008a14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	33b0      	adds	r3, #176	; 0xb0
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	32b0      	adds	r2, #176	; 0xb0
 80089f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f003 fdd6 	bl	800c5a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	32b0      	adds	r2, #176	; 0xb0
 8008a06:	2100      	movs	r1, #0
 8008a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000093 	.word	0x20000093
 8008a24:	20000094 	.word	0x20000094
 8008a28:	20000095 	.word	0x20000095

08008a2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	32b0      	adds	r2, #176	; 0xb0
 8008a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a46:	2300      	movs	r3, #0
 8008a48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d101      	bne.n	8008a5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e0bf      	b.n	8008bdc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d050      	beq.n	8008b0a <USBD_CDC_Setup+0xde>
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	f040 80af 	bne.w	8008bcc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	88db      	ldrh	r3, [r3, #6]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d03a      	beq.n	8008aec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	b25b      	sxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	da1b      	bge.n	8008ab8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	33b0      	adds	r3, #176	; 0xb0
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	88d2      	ldrh	r2, [r2, #6]
 8008a9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	88db      	ldrh	r3, [r3, #6]
 8008aa2:	2b07      	cmp	r3, #7
 8008aa4:	bf28      	it	cs
 8008aa6:	2307      	movcs	r3, #7
 8008aa8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	89fa      	ldrh	r2, [r7, #14]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fd43 	bl	800a53c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008ab6:	e090      	b.n	8008bda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	785a      	ldrb	r2, [r3, #1]
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	88db      	ldrh	r3, [r3, #6]
 8008ac6:	2b3f      	cmp	r3, #63	; 0x3f
 8008ac8:	d803      	bhi.n	8008ad2 <USBD_CDC_Setup+0xa6>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	e000      	b.n	8008ad4 <USBD_CDC_Setup+0xa8>
 8008ad2:	2240      	movs	r2, #64	; 0x40
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ada:	6939      	ldr	r1, [r7, #16]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fd55 	bl	800a594 <USBD_CtlPrepareRx>
      break;
 8008aea:	e076      	b.n	8008bda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	33b0      	adds	r3, #176	; 0xb0
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	7850      	ldrb	r0, [r2, #1]
 8008b02:	2200      	movs	r2, #0
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	4798      	blx	r3
      break;
 8008b08:	e067      	b.n	8008bda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	785b      	ldrb	r3, [r3, #1]
 8008b0e:	2b0b      	cmp	r3, #11
 8008b10:	d851      	bhi.n	8008bb6 <USBD_CDC_Setup+0x18a>
 8008b12:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <USBD_CDC_Setup+0xec>)
 8008b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b18:	08008b49 	.word	0x08008b49
 8008b1c:	08008bc5 	.word	0x08008bc5
 8008b20:	08008bb7 	.word	0x08008bb7
 8008b24:	08008bb7 	.word	0x08008bb7
 8008b28:	08008bb7 	.word	0x08008bb7
 8008b2c:	08008bb7 	.word	0x08008bb7
 8008b30:	08008bb7 	.word	0x08008bb7
 8008b34:	08008bb7 	.word	0x08008bb7
 8008b38:	08008bb7 	.word	0x08008bb7
 8008b3c:	08008bb7 	.word	0x08008bb7
 8008b40:	08008b73 	.word	0x08008b73
 8008b44:	08008b9d 	.word	0x08008b9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b03      	cmp	r3, #3
 8008b52:	d107      	bne.n	8008b64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b54:	f107 030a 	add.w	r3, r7, #10
 8008b58:	2202      	movs	r2, #2
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 fced 	bl	800a53c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b62:	e032      	b.n	8008bca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 fc77 	bl	800a45a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	75fb      	strb	r3, [r7, #23]
          break;
 8008b70:	e02b      	b.n	8008bca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d107      	bne.n	8008b8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b7e:	f107 030d 	add.w	r3, r7, #13
 8008b82:	2201      	movs	r2, #1
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fcd8 	bl	800a53c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b8c:	e01d      	b.n	8008bca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fc62 	bl	800a45a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b96:	2303      	movs	r3, #3
 8008b98:	75fb      	strb	r3, [r7, #23]
          break;
 8008b9a:	e016      	b.n	8008bca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d00f      	beq.n	8008bc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 fc55 	bl	800a45a <USBD_CtlError>
            ret = USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008bb4:	e008      	b.n	8008bc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 fc4e 	bl	800a45a <USBD_CtlError>
          ret = USBD_FAIL;
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bc2:	e002      	b.n	8008bca <USBD_CDC_Setup+0x19e>
          break;
 8008bc4:	bf00      	nop
 8008bc6:	e008      	b.n	8008bda <USBD_CDC_Setup+0x1ae>
          break;
 8008bc8:	bf00      	nop
      }
      break;
 8008bca:	e006      	b.n	8008bda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 fc43 	bl	800a45a <USBD_CtlError>
      ret = USBD_FAIL;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	32b0      	adds	r2, #176	; 0xb0
 8008c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e065      	b.n	8008cda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	32b0      	adds	r2, #176	; 0xb0
 8008c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c1e:	78fb      	ldrb	r3, [r7, #3]
 8008c20:	f003 020f 	and.w	r2, r3, #15
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	440b      	add	r3, r1
 8008c30:	3318      	adds	r3, #24
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d02f      	beq.n	8008c98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	f003 020f 	and.w	r2, r3, #15
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	3318      	adds	r3, #24
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	f003 010f 	and.w	r1, r3, #15
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	460b      	mov	r3, r1
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	440b      	add	r3, r1
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4403      	add	r3, r0
 8008c60:	3348      	adds	r3, #72	; 0x48
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c68:	fb01 f303 	mul.w	r3, r1, r3
 8008c6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d112      	bne.n	8008c98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	f003 020f 	and.w	r2, r3, #15
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	3318      	adds	r3, #24
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c8a:	78f9      	ldrb	r1, [r7, #3]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f003 fc26 	bl	800c4e2 <USBD_LL_Transmit>
 8008c96:	e01f      	b.n	8008cd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	33b0      	adds	r3, #176	; 0xb0
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d010      	beq.n	8008cd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	33b0      	adds	r3, #176	; 0xb0
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	32b0      	adds	r2, #176	; 0xb0
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	32b0      	adds	r2, #176	; 0xb0
 8008d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e01a      	b.n	8008d4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f003 fc24 	bl	800c566 <USBD_LL_GetRxDataSize>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	33b0      	adds	r3, #176	; 0xb0
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d44:	4611      	mov	r1, r2
 8008d46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	32b0      	adds	r2, #176	; 0xb0
 8008d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e025      	b.n	8008dc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	33b0      	adds	r3, #176	; 0xb0
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01a      	beq.n	8008dbe <USBD_CDC_EP0_RxReady+0x6c>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d8e:	2bff      	cmp	r3, #255	; 0xff
 8008d90:	d015      	beq.n	8008dbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	33b0      	adds	r3, #176	; 0xb0
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008daa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008db2:	b292      	uxth	r2, r2
 8008db4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	22ff      	movs	r2, #255	; 0xff
 8008dba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008dd0:	2182      	movs	r1, #130	; 0x82
 8008dd2:	4818      	ldr	r0, [pc, #96]	; (8008e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dd4:	f000 fd09 	bl	80097ea <USBD_GetEpDesc>
 8008dd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dda:	2101      	movs	r1, #1
 8008ddc:	4815      	ldr	r0, [pc, #84]	; (8008e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dde:	f000 fd04 	bl	80097ea <USBD_GetEpDesc>
 8008de2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008de4:	2181      	movs	r1, #129	; 0x81
 8008de6:	4813      	ldr	r0, [pc, #76]	; (8008e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008de8:	f000 fcff 	bl	80097ea <USBD_GetEpDesc>
 8008dec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2210      	movs	r2, #16
 8008df8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d006      	beq.n	8008e0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e08:	711a      	strb	r2, [r3, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d006      	beq.n	8008e22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e1c:	711a      	strb	r2, [r3, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2243      	movs	r2, #67	; 0x43
 8008e26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000050 	.word	0x20000050

08008e38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e40:	2182      	movs	r1, #130	; 0x82
 8008e42:	4818      	ldr	r0, [pc, #96]	; (8008ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e44:	f000 fcd1 	bl	80097ea <USBD_GetEpDesc>
 8008e48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	4815      	ldr	r0, [pc, #84]	; (8008ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e4e:	f000 fccc 	bl	80097ea <USBD_GetEpDesc>
 8008e52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e54:	2181      	movs	r1, #129	; 0x81
 8008e56:	4813      	ldr	r0, [pc, #76]	; (8008ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e58:	f000 fcc7 	bl	80097ea <USBD_GetEpDesc>
 8008e5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2210      	movs	r2, #16
 8008e68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d006      	beq.n	8008e7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	2200      	movs	r2, #0
 8008e74:	711a      	strb	r2, [r3, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f042 0202 	orr.w	r2, r2, #2
 8008e7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d006      	beq.n	8008e92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	711a      	strb	r2, [r3, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f042 0202 	orr.w	r2, r2, #2
 8008e90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2243      	movs	r2, #67	; 0x43
 8008e96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e98:	4b02      	ldr	r3, [pc, #8]	; (8008ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3718      	adds	r7, #24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000050 	.word	0x20000050

08008ea8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008eb0:	2182      	movs	r1, #130	; 0x82
 8008eb2:	4818      	ldr	r0, [pc, #96]	; (8008f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008eb4:	f000 fc99 	bl	80097ea <USBD_GetEpDesc>
 8008eb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eba:	2101      	movs	r1, #1
 8008ebc:	4815      	ldr	r0, [pc, #84]	; (8008f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ebe:	f000 fc94 	bl	80097ea <USBD_GetEpDesc>
 8008ec2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ec4:	2181      	movs	r1, #129	; 0x81
 8008ec6:	4813      	ldr	r0, [pc, #76]	; (8008f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ec8:	f000 fc8f 	bl	80097ea <USBD_GetEpDesc>
 8008ecc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d006      	beq.n	8008eee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ee8:	711a      	strb	r2, [r3, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d006      	beq.n	8008f02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008efc:	711a      	strb	r2, [r3, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2243      	movs	r2, #67	; 0x43
 8008f06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f08:	4b02      	ldr	r3, [pc, #8]	; (8008f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20000050 	.word	0x20000050

08008f18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	220a      	movs	r2, #10
 8008f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f26:	4b03      	ldr	r3, [pc, #12]	; (8008f34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	2000000c 	.word	0x2000000c

08008f38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e009      	b.n	8008f60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	33b0      	adds	r3, #176	; 0xb0
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	32b0      	adds	r2, #176	; 0xb0
 8008f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f86:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e008      	b.n	8008fa4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32b0      	adds	r2, #176	; 0xb0
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e004      	b.n	8008fde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
	...

08008fec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	32b0      	adds	r2, #176	; 0xb0
 8008ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009002:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	32b0      	adds	r2, #176	; 0xb0
 800900e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009016:	2303      	movs	r3, #3
 8009018:	e018      	b.n	800904c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7c1b      	ldrb	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009022:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <USBD_CDC_ReceivePacket+0x68>)
 8009024:	7819      	ldrb	r1, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800902c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f003 fa77 	bl	800c524 <USBD_LL_PrepareReceive>
 8009036:	e008      	b.n	800904a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <USBD_CDC_ReceivePacket+0x68>)
 800903a:	7819      	ldrb	r1, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009042:	2340      	movs	r3, #64	; 0x40
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f003 fa6d 	bl	800c524 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	20000094 	.word	0x20000094

08009058 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	4613      	mov	r3, r2
 8009064:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800906c:	2303      	movs	r3, #3
 800906e:	e01f      	b.n	80090b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	79fa      	ldrb	r2, [r7, #7]
 80090a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f003 f8e1 	bl	800c26c <USBD_LL_Init>
 80090aa:	4603      	mov	r3, r0
 80090ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e025      	b.n	800911c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	32ae      	adds	r2, #174	; 0xae
 80090e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00f      	beq.n	800910c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	32ae      	adds	r2, #174	; 0xae
 80090f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fc:	f107 020e 	add.w	r2, r7, #14
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
 8009104:	4602      	mov	r2, r0
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f003 f8ef 	bl	800c310 <USBD_LL_Start>
 8009132:	4603      	mov	r3, r0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b084      	sub	sp, #16
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	4611      	mov	r1, r2
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	4798      	blx	r3
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	4611      	mov	r1, r2
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80091b0:	2303      	movs	r3, #3
 80091b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 f908 	bl	800a3e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091e4:	461a      	mov	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091f2:	f003 031f 	and.w	r3, r3, #31
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d01a      	beq.n	8009230 <USBD_LL_SetupStage+0x72>
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d822      	bhi.n	8009244 <USBD_LL_SetupStage+0x86>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <USBD_LL_SetupStage+0x4a>
 8009202:	2b01      	cmp	r3, #1
 8009204:	d00a      	beq.n	800921c <USBD_LL_SetupStage+0x5e>
 8009206:	e01d      	b.n	8009244 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fb5f 	bl	80098d4 <USBD_StdDevReq>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]
      break;
 800921a:	e020      	b.n	800925e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fbc7 	bl	80099b8 <USBD_StdItfReq>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]
      break;
 800922e:	e016      	b.n	800925e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fc29 	bl	8009a90 <USBD_StdEPReq>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]
      break;
 8009242:	e00c      	b.n	800925e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800924a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800924e:	b2db      	uxtb	r3, r3
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f003 f8bc 	bl	800c3d0 <USBD_LL_StallEP>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]
      break;
 800925c:	bf00      	nop
  }

  return ret;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	460b      	mov	r3, r1
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d16e      	bne.n	800935e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009286:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800928e:	2b03      	cmp	r3, #3
 8009290:	f040 8098 	bne.w	80093c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	429a      	cmp	r2, r3
 800929e:	d913      	bls.n	80092c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	1ad2      	subs	r2, r2, r3
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	4293      	cmp	r3, r2
 80092b8:	bf28      	it	cs
 80092ba:	4613      	movcs	r3, r2
 80092bc:	461a      	mov	r2, r3
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f001 f984 	bl	800a5ce <USBD_CtlContinueRx>
 80092c6:	e07d      	b.n	80093c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092ce:	f003 031f 	and.w	r3, r3, #31
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d014      	beq.n	8009300 <USBD_LL_DataOutStage+0x98>
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d81d      	bhi.n	8009316 <USBD_LL_DataOutStage+0xae>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <USBD_LL_DataOutStage+0x7c>
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d003      	beq.n	80092ea <USBD_LL_DataOutStage+0x82>
 80092e2:	e018      	b.n	8009316 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	75bb      	strb	r3, [r7, #22]
            break;
 80092e8:	e018      	b.n	800931c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	4619      	mov	r1, r3
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fa5e 	bl	80097b6 <USBD_CoreFindIF>
 80092fa:	4603      	mov	r3, r0
 80092fc:	75bb      	strb	r3, [r7, #22]
            break;
 80092fe:	e00d      	b.n	800931c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009306:	b2db      	uxtb	r3, r3
 8009308:	4619      	mov	r1, r3
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fa60 	bl	80097d0 <USBD_CoreFindEP>
 8009310:	4603      	mov	r3, r0
 8009312:	75bb      	strb	r3, [r7, #22]
            break;
 8009314:	e002      	b.n	800931c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	75bb      	strb	r3, [r7, #22]
            break;
 800931a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800931c:	7dbb      	ldrb	r3, [r7, #22]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d119      	bne.n	8009356 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b03      	cmp	r3, #3
 800932c:	d113      	bne.n	8009356 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800932e:	7dba      	ldrb	r2, [r7, #22]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	32ae      	adds	r2, #174	; 0xae
 8009334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00b      	beq.n	8009356 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800933e:	7dba      	ldrb	r2, [r7, #22]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009346:	7dba      	ldrb	r2, [r7, #22]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	32ae      	adds	r2, #174	; 0xae
 800934c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f001 f94a 	bl	800a5f0 <USBD_CtlSendStatus>
 800935c:	e032      	b.n	80093c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009364:	b2db      	uxtb	r3, r3
 8009366:	4619      	mov	r1, r3
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 fa31 	bl	80097d0 <USBD_CoreFindEP>
 800936e:	4603      	mov	r3, r0
 8009370:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009372:	7dbb      	ldrb	r3, [r7, #22]
 8009374:	2bff      	cmp	r3, #255	; 0xff
 8009376:	d025      	beq.n	80093c4 <USBD_LL_DataOutStage+0x15c>
 8009378:	7dbb      	ldrb	r3, [r7, #22]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d122      	bne.n	80093c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b03      	cmp	r3, #3
 8009388:	d117      	bne.n	80093ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800938a:	7dba      	ldrb	r2, [r7, #22]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	32ae      	adds	r2, #174	; 0xae
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00f      	beq.n	80093ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800939a:	7dba      	ldrb	r2, [r7, #22]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093a2:	7dba      	ldrb	r2, [r7, #22]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32ae      	adds	r2, #174	; 0xae
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	7afa      	ldrb	r2, [r7, #11]
 80093b0:	4611      	mov	r1, r2
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	4798      	blx	r3
 80093b6:	4603      	mov	r3, r0
 80093b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	e000      	b.n	80093c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	460b      	mov	r3, r1
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80093dc:	7afb      	ldrb	r3, [r7, #11]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d16f      	bne.n	80094c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3314      	adds	r3, #20
 80093e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d15a      	bne.n	80094a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d914      	bls.n	8009428 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	1ad2      	subs	r2, r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	461a      	mov	r2, r3
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f001 f8ac 	bl	800a572 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800941a:	2300      	movs	r3, #0
 800941c:	2200      	movs	r2, #0
 800941e:	2100      	movs	r1, #0
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f003 f87f 	bl	800c524 <USBD_LL_PrepareReceive>
 8009426:	e03f      	b.n	80094a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	429a      	cmp	r2, r3
 8009432:	d11c      	bne.n	800946e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800943c:	429a      	cmp	r2, r3
 800943e:	d316      	bcc.n	800946e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800944a:	429a      	cmp	r2, r3
 800944c:	d20f      	bcs.n	800946e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800944e:	2200      	movs	r2, #0
 8009450:	2100      	movs	r1, #0
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f001 f88d 	bl	800a572 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009460:	2300      	movs	r3, #0
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f003 f85c 	bl	800c524 <USBD_LL_PrepareReceive>
 800946c:	e01c      	b.n	80094a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009474:	b2db      	uxtb	r3, r3
 8009476:	2b03      	cmp	r3, #3
 8009478:	d10f      	bne.n	800949a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d009      	beq.n	800949a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800949a:	2180      	movs	r1, #128	; 0x80
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f002 ff97 	bl	800c3d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f001 f8b7 	bl	800a616 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d03a      	beq.n	8009528 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff fe42 	bl	800913c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094c0:	e032      	b.n	8009528 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094c2:	7afb      	ldrb	r3, [r7, #11]
 80094c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	4619      	mov	r1, r3
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f97f 	bl	80097d0 <USBD_CoreFindEP>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	2bff      	cmp	r3, #255	; 0xff
 80094da:	d025      	beq.n	8009528 <USBD_LL_DataInStage+0x15a>
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d122      	bne.n	8009528 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d11c      	bne.n	8009528 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80094ee:	7dfa      	ldrb	r2, [r7, #23]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	32ae      	adds	r2, #174	; 0xae
 80094f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d014      	beq.n	8009528 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80094fe:	7dfa      	ldrb	r2, [r7, #23]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009506:	7dfa      	ldrb	r2, [r7, #23]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	32ae      	adds	r2, #174	; 0xae
 800950c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009510:	695b      	ldr	r3, [r3, #20]
 8009512:	7afa      	ldrb	r2, [r7, #11]
 8009514:	4611      	mov	r1, r2
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	4798      	blx	r3
 800951a:	4603      	mov	r3, r0
 800951c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800951e:	7dbb      	ldrb	r3, [r7, #22]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009524:	7dbb      	ldrb	r3, [r7, #22]
 8009526:	e000      	b.n	800952a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}

08009532 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009532:	b580      	push	{r7, lr}
 8009534:	b084      	sub	sp, #16
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d014      	beq.n	8009598 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00e      	beq.n	8009598 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6852      	ldr	r2, [r2, #4]
 8009586:	b2d2      	uxtb	r2, r2
 8009588:	4611      	mov	r1, r2
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009594:	2303      	movs	r3, #3
 8009596:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009598:	2340      	movs	r3, #64	; 0x40
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f002 fed1 	bl	800c346 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2240      	movs	r2, #64	; 0x40
 80095b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	2200      	movs	r2, #0
 80095b8:	2180      	movs	r1, #128	; 0x80
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f002 fec3 	bl	800c346 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2240      	movs	r2, #64	; 0x40
 80095ca:	621a      	str	r2, [r3, #32]

  return ret;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	460b      	mov	r3, r1
 80095e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	78fa      	ldrb	r2, [r7, #3]
 80095e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009604:	b2da      	uxtb	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2204      	movs	r2, #4
 8009610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b04      	cmp	r3, #4
 8009634:	d106      	bne.n	8009644 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800963c:	b2da      	uxtb	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d110      	bne.n	8009688 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d005      	beq.n	8009688 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	32ae      	adds	r2, #174	; 0xae
 80096a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e01c      	b.n	80096ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d115      	bne.n	80096ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	32ae      	adds	r2, #174	; 0xae
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	32ae      	adds	r2, #174	; 0xae
 80096de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	4611      	mov	r1, r2
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	32ae      	adds	r2, #174	; 0xae
 800970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e01c      	b.n	8009752 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d115      	bne.n	8009750 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	32ae      	adds	r2, #174	; 0xae
 800972e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	32ae      	adds	r2, #174	; 0xae
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800975a:	b480      	push	{r7}
 800975c:	b083      	sub	sp, #12
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00e      	beq.n	80097ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	6852      	ldr	r2, [r2, #4]
 800979a:	b2d2      	uxtb	r2, r2
 800979c:	4611      	mov	r1, r2
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80097a8:	2303      	movs	r3, #3
 80097aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097de:	4618      	mov	r0, r3
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b086      	sub	sp, #24
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80097fe:	2300      	movs	r3, #0
 8009800:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b29b      	uxth	r3, r3
 800980e:	429a      	cmp	r2, r3
 8009810:	d920      	bls.n	8009854 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800981a:	e013      	b.n	8009844 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800981c:	f107 030a 	add.w	r3, r7, #10
 8009820:	4619      	mov	r1, r3
 8009822:	6978      	ldr	r0, [r7, #20]
 8009824:	f000 f81b 	bl	800985e <USBD_GetNextDesc>
 8009828:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2b05      	cmp	r3, #5
 8009830:	d108      	bne.n	8009844 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	789b      	ldrb	r3, [r3, #2]
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	429a      	cmp	r2, r3
 800983e:	d008      	beq.n	8009852 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009840:	2300      	movs	r3, #0
 8009842:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	885b      	ldrh	r3, [r3, #2]
 8009848:	b29a      	uxth	r2, r3
 800984a:	897b      	ldrh	r3, [r7, #10]
 800984c:	429a      	cmp	r2, r3
 800984e:	d8e5      	bhi.n	800981c <USBD_GetEpDesc+0x32>
 8009850:	e000      	b.n	8009854 <USBD_GetEpDesc+0x6a>
          break;
 8009852:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009854:	693b      	ldr	r3, [r7, #16]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800985e:	b480      	push	{r7}
 8009860:	b085      	sub	sp, #20
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	881a      	ldrh	r2, [r3, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b29b      	uxth	r3, r3
 8009876:	4413      	add	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4413      	add	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800988a:	68fb      	ldr	r3, [r7, #12]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	3301      	adds	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098b6:	8a3b      	ldrh	r3, [r7, #16]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	b21a      	sxth	r2, r3
 80098bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	b21b      	sxth	r3, r3
 80098c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098c6:	89fb      	ldrh	r3, [r7, #14]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ea:	2b40      	cmp	r3, #64	; 0x40
 80098ec:	d005      	beq.n	80098fa <USBD_StdDevReq+0x26>
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d857      	bhi.n	80099a2 <USBD_StdDevReq+0xce>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00f      	beq.n	8009916 <USBD_StdDevReq+0x42>
 80098f6:	2b20      	cmp	r3, #32
 80098f8:	d153      	bne.n	80099a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	32ae      	adds	r2, #174	; 0xae
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	4798      	blx	r3
 8009910:	4603      	mov	r3, r0
 8009912:	73fb      	strb	r3, [r7, #15]
      break;
 8009914:	e04a      	b.n	80099ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	2b09      	cmp	r3, #9
 800991c:	d83b      	bhi.n	8009996 <USBD_StdDevReq+0xc2>
 800991e:	a201      	add	r2, pc, #4	; (adr r2, 8009924 <USBD_StdDevReq+0x50>)
 8009920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009924:	08009979 	.word	0x08009979
 8009928:	0800998d 	.word	0x0800998d
 800992c:	08009997 	.word	0x08009997
 8009930:	08009983 	.word	0x08009983
 8009934:	08009997 	.word	0x08009997
 8009938:	08009957 	.word	0x08009957
 800993c:	0800994d 	.word	0x0800994d
 8009940:	08009997 	.word	0x08009997
 8009944:	0800996f 	.word	0x0800996f
 8009948:	08009961 	.word	0x08009961
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800994c:	6839      	ldr	r1, [r7, #0]
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fa3c 	bl	8009dcc <USBD_GetDescriptor>
          break;
 8009954:	e024      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fba1 	bl	800a0a0 <USBD_SetAddress>
          break;
 800995e:	e01f      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fbe0 	bl	800a128 <USBD_SetConfig>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]
          break;
 800996c:	e018      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fc83 	bl	800a27c <USBD_GetConfig>
          break;
 8009976:	e013      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fcb4 	bl	800a2e8 <USBD_GetStatus>
          break;
 8009980:	e00e      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009982:	6839      	ldr	r1, [r7, #0]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fce3 	bl	800a350 <USBD_SetFeature>
          break;
 800998a:	e009      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fd07 	bl	800a3a2 <USBD_ClrFeature>
          break;
 8009994:	e004      	b.n	80099a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fd5e 	bl	800a45a <USBD_CtlError>
          break;
 800999e:	bf00      	nop
      }
      break;
 80099a0:	e004      	b.n	80099ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fd58 	bl	800a45a <USBD_CtlError>
      break;
 80099aa:	bf00      	nop
  }

  return ret;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop

080099b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099ce:	2b40      	cmp	r3, #64	; 0x40
 80099d0:	d005      	beq.n	80099de <USBD_StdItfReq+0x26>
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d852      	bhi.n	8009a7c <USBD_StdItfReq+0xc4>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <USBD_StdItfReq+0x26>
 80099da:	2b20      	cmp	r3, #32
 80099dc:	d14e      	bne.n	8009a7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	3b01      	subs	r3, #1
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d840      	bhi.n	8009a6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	889b      	ldrh	r3, [r3, #4]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d836      	bhi.n	8009a64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	889b      	ldrh	r3, [r3, #4]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff fed9 	bl	80097b6 <USBD_CoreFindIF>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	2bff      	cmp	r3, #255	; 0xff
 8009a0c:	d01d      	beq.n	8009a4a <USBD_StdItfReq+0x92>
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11a      	bne.n	8009a4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a14:	7bba      	ldrb	r2, [r7, #14]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	32ae      	adds	r2, #174	; 0xae
 8009a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00f      	beq.n	8009a44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a24:	7bba      	ldrb	r2, [r7, #14]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a2c:	7bba      	ldrb	r2, [r7, #14]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32ae      	adds	r2, #174	; 0xae
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a42:	e004      	b.n	8009a4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a44:	2303      	movs	r3, #3
 8009a46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a48:	e001      	b.n	8009a4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	88db      	ldrh	r3, [r3, #6]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d110      	bne.n	8009a78 <USBD_StdItfReq+0xc0>
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10d      	bne.n	8009a78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fdc7 	bl	800a5f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a62:	e009      	b.n	8009a78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fcf7 	bl	800a45a <USBD_CtlError>
          break;
 8009a6c:	e004      	b.n	8009a78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fcf2 	bl	800a45a <USBD_CtlError>
          break;
 8009a76:	e000      	b.n	8009a7a <USBD_StdItfReq+0xc2>
          break;
 8009a78:	bf00      	nop
      }
      break;
 8009a7a:	e004      	b.n	8009a86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fceb 	bl	800a45a <USBD_CtlError>
      break;
 8009a84:	bf00      	nop
  }

  return ret;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	889b      	ldrh	r3, [r3, #4]
 8009aa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	d007      	beq.n	8009ac0 <USBD_StdEPReq+0x30>
 8009ab0:	2b40      	cmp	r3, #64	; 0x40
 8009ab2:	f200 817f 	bhi.w	8009db4 <USBD_StdEPReq+0x324>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d02a      	beq.n	8009b10 <USBD_StdEPReq+0x80>
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	f040 817a 	bne.w	8009db4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fe83 	bl	80097d0 <USBD_CoreFindEP>
 8009aca:	4603      	mov	r3, r0
 8009acc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ace:	7b7b      	ldrb	r3, [r7, #13]
 8009ad0:	2bff      	cmp	r3, #255	; 0xff
 8009ad2:	f000 8174 	beq.w	8009dbe <USBD_StdEPReq+0x32e>
 8009ad6:	7b7b      	ldrb	r3, [r7, #13]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f040 8170 	bne.w	8009dbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009ade:	7b7a      	ldrb	r2, [r7, #13]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ae6:	7b7a      	ldrb	r2, [r7, #13]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	32ae      	adds	r2, #174	; 0xae
 8009aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8163 	beq.w	8009dbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009af8:	7b7a      	ldrb	r2, [r7, #13]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	32ae      	adds	r2, #174	; 0xae
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b0e:	e156      	b.n	8009dbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d008      	beq.n	8009b2a <USBD_StdEPReq+0x9a>
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	f300 8145 	bgt.w	8009da8 <USBD_StdEPReq+0x318>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f000 809b 	beq.w	8009c5a <USBD_StdEPReq+0x1ca>
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d03c      	beq.n	8009ba2 <USBD_StdEPReq+0x112>
 8009b28:	e13e      	b.n	8009da8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d002      	beq.n	8009b3c <USBD_StdEPReq+0xac>
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d016      	beq.n	8009b68 <USBD_StdEPReq+0xd8>
 8009b3a:	e02c      	b.n	8009b96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00d      	beq.n	8009b5e <USBD_StdEPReq+0xce>
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	2b80      	cmp	r3, #128	; 0x80
 8009b46:	d00a      	beq.n	8009b5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f002 fc3f 	bl	800c3d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b52:	2180      	movs	r1, #128	; 0x80
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f002 fc3b 	bl	800c3d0 <USBD_LL_StallEP>
 8009b5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b5c:	e020      	b.n	8009ba0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fc7a 	bl	800a45a <USBD_CtlError>
              break;
 8009b66:	e01b      	b.n	8009ba0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	885b      	ldrh	r3, [r3, #2]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d10e      	bne.n	8009b8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <USBD_StdEPReq+0xfe>
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b80      	cmp	r3, #128	; 0x80
 8009b7a:	d008      	beq.n	8009b8e <USBD_StdEPReq+0xfe>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	88db      	ldrh	r3, [r3, #6]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d104      	bne.n	8009b8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f002 fc21 	bl	800c3d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fd2e 	bl	800a5f0 <USBD_CtlSendStatus>

              break;
 8009b94:	e004      	b.n	8009ba0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc5e 	bl	800a45a <USBD_CtlError>
              break;
 8009b9e:	bf00      	nop
          }
          break;
 8009ba0:	e107      	b.n	8009db2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d002      	beq.n	8009bb4 <USBD_StdEPReq+0x124>
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d016      	beq.n	8009be0 <USBD_StdEPReq+0x150>
 8009bb2:	e04b      	b.n	8009c4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <USBD_StdEPReq+0x146>
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b80      	cmp	r3, #128	; 0x80
 8009bbe:	d00a      	beq.n	8009bd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f002 fc03 	bl	800c3d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f002 fbff 	bl	800c3d0 <USBD_LL_StallEP>
 8009bd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bd4:	e040      	b.n	8009c58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fc3e 	bl	800a45a <USBD_CtlError>
              break;
 8009bde:	e03b      	b.n	8009c58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	885b      	ldrh	r3, [r3, #2]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d136      	bne.n	8009c56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d004      	beq.n	8009bfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f002 fc09 	bl	800c40e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fcf7 	bl	800a5f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fde2 	bl	80097d0 <USBD_CoreFindEP>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c10:	7b7b      	ldrb	r3, [r7, #13]
 8009c12:	2bff      	cmp	r3, #255	; 0xff
 8009c14:	d01f      	beq.n	8009c56 <USBD_StdEPReq+0x1c6>
 8009c16:	7b7b      	ldrb	r3, [r7, #13]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d11c      	bne.n	8009c56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c1c:	7b7a      	ldrb	r2, [r7, #13]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c24:	7b7a      	ldrb	r2, [r7, #13]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	32ae      	adds	r2, #174	; 0xae
 8009c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d010      	beq.n	8009c56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c34:	7b7a      	ldrb	r2, [r7, #13]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	32ae      	adds	r2, #174	; 0xae
 8009c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
 8009c46:	4603      	mov	r3, r0
 8009c48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c4a:	e004      	b.n	8009c56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c4c:	6839      	ldr	r1, [r7, #0]
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fc03 	bl	800a45a <USBD_CtlError>
              break;
 8009c54:	e000      	b.n	8009c58 <USBD_StdEPReq+0x1c8>
              break;
 8009c56:	bf00      	nop
          }
          break;
 8009c58:	e0ab      	b.n	8009db2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d002      	beq.n	8009c6c <USBD_StdEPReq+0x1dc>
 8009c66:	2b03      	cmp	r3, #3
 8009c68:	d032      	beq.n	8009cd0 <USBD_StdEPReq+0x240>
 8009c6a:	e097      	b.n	8009d9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d007      	beq.n	8009c82 <USBD_StdEPReq+0x1f2>
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b80      	cmp	r3, #128	; 0x80
 8009c76:	d004      	beq.n	8009c82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fbed 	bl	800a45a <USBD_CtlError>
                break;
 8009c80:	e091      	b.n	8009da6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da0b      	bge.n	8009ca2 <USBD_StdEPReq+0x212>
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
 8009c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	3310      	adds	r3, #16
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	e00b      	b.n	8009cba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3304      	adds	r3, #4
 8009cba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fc37 	bl	800a53c <USBD_CtlSendData>
              break;
 8009cce:	e06a      	b.n	8009da6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	da11      	bge.n	8009cfc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	f003 020f 	and.w	r2, r3, #15
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	3324      	adds	r3, #36	; 0x24
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d117      	bne.n	8009d22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fbb0 	bl	800a45a <USBD_CtlError>
                  break;
 8009cfa:	e054      	b.n	8009da6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cfc:	7bbb      	ldrb	r3, [r7, #14]
 8009cfe:	f003 020f 	and.w	r2, r3, #15
 8009d02:	6879      	ldr	r1, [r7, #4]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fb9d 	bl	800a45a <USBD_CtlError>
                  break;
 8009d20:	e041      	b.n	8009da6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	da0b      	bge.n	8009d42 <USBD_StdEPReq+0x2b2>
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	3310      	adds	r3, #16
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3304      	adds	r3, #4
 8009d40:	e00b      	b.n	8009d5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	4413      	add	r3, r2
 8009d58:	3304      	adds	r3, #4
 8009d5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <USBD_StdEPReq+0x2d8>
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	2b80      	cmp	r3, #128	; 0x80
 8009d66:	d103      	bne.n	8009d70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e00e      	b.n	8009d8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f002 fb69 	bl	800c44c <USBD_LL_IsStallEP>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d003      	beq.n	8009d88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2201      	movs	r2, #1
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	e002      	b.n	8009d8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	2202      	movs	r2, #2
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fbd1 	bl	800a53c <USBD_CtlSendData>
              break;
 8009d9a:	e004      	b.n	8009da6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fb5b 	bl	800a45a <USBD_CtlError>
              break;
 8009da4:	bf00      	nop
          }
          break;
 8009da6:	e004      	b.n	8009db2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fb55 	bl	800a45a <USBD_CtlError>
          break;
 8009db0:	bf00      	nop
      }
      break;
 8009db2:	e005      	b.n	8009dc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fb4f 	bl	800a45a <USBD_CtlError>
      break;
 8009dbc:	e000      	b.n	8009dc0 <USBD_StdEPReq+0x330>
      break;
 8009dbe:	bf00      	nop
  }

  return ret;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	2b06      	cmp	r3, #6
 8009dee:	f200 8128 	bhi.w	800a042 <USBD_GetDescriptor+0x276>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_GetDescriptor+0x2c>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e15 	.word	0x08009e15
 8009dfc:	08009e2d 	.word	0x08009e2d
 8009e00:	08009e6d 	.word	0x08009e6d
 8009e04:	0800a043 	.word	0x0800a043
 8009e08:	0800a043 	.word	0x0800a043
 8009e0c:	08009fe3 	.word	0x08009fe3
 8009e10:	0800a00f 	.word	0x0800a00f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	7c12      	ldrb	r2, [r2, #16]
 8009e20:	f107 0108 	add.w	r1, r7, #8
 8009e24:	4610      	mov	r0, r2
 8009e26:	4798      	blx	r3
 8009e28:	60f8      	str	r0, [r7, #12]
      break;
 8009e2a:	e112      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7c1b      	ldrb	r3, [r3, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10d      	bne.n	8009e50 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3c:	f107 0208 	add.w	r2, r7, #8
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3
 8009e44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e4e:	e100      	b.n	800a052 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	f107 0208 	add.w	r2, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3301      	adds	r3, #1
 8009e66:	2202      	movs	r2, #2
 8009e68:	701a      	strb	r2, [r3, #0]
      break;
 8009e6a:	e0f2      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	f200 80ac 	bhi.w	8009fd0 <USBD_GetDescriptor+0x204>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <USBD_GetDescriptor+0xb4>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009e99 	.word	0x08009e99
 8009e84:	08009ecd 	.word	0x08009ecd
 8009e88:	08009f01 	.word	0x08009f01
 8009e8c:	08009f35 	.word	0x08009f35
 8009e90:	08009f69 	.word	0x08009f69
 8009e94:	08009f9d 	.word	0x08009f9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	7c12      	ldrb	r2, [r2, #16]
 8009eb0:	f107 0108 	add.w	r1, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eba:	e091      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ebc:	6839      	ldr	r1, [r7, #0]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 facb 	bl	800a45a <USBD_CtlError>
            err++;
 8009ec4:	7afb      	ldrb	r3, [r7, #11]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eca:	e089      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00b      	beq.n	8009ef0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7c12      	ldrb	r2, [r2, #16]
 8009ee4:	f107 0108 	add.w	r1, r7, #8
 8009ee8:	4610      	mov	r0, r2
 8009eea:	4798      	blx	r3
 8009eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eee:	e077      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef0:	6839      	ldr	r1, [r7, #0]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fab1 	bl	800a45a <USBD_CtlError>
            err++;
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	3301      	adds	r3, #1
 8009efc:	72fb      	strb	r3, [r7, #11]
          break;
 8009efe:	e06f      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	7c12      	ldrb	r2, [r2, #16]
 8009f18:	f107 0108 	add.w	r1, r7, #8
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	4798      	blx	r3
 8009f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f22:	e05d      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa97 	bl	800a45a <USBD_CtlError>
            err++;
 8009f2c:	7afb      	ldrb	r3, [r7, #11]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	72fb      	strb	r3, [r7, #11]
          break;
 8009f32:	e055      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f56:	e043      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fa7d 	bl	800a45a <USBD_CtlError>
            err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
          break;
 8009f66:	e03b      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	7c12      	ldrb	r2, [r2, #16]
 8009f80:	f107 0108 	add.w	r1, r7, #8
 8009f84:	4610      	mov	r0, r2
 8009f86:	4798      	blx	r3
 8009f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f8a:	e029      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa63 	bl	800a45a <USBD_CtlError>
            err++;
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	3301      	adds	r3, #1
 8009f98:	72fb      	strb	r3, [r7, #11]
          break;
 8009f9a:	e021      	b.n	8009fe0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	7c12      	ldrb	r2, [r2, #16]
 8009fb4:	f107 0108 	add.w	r1, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fbe:	e00f      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa49 	bl	800a45a <USBD_CtlError>
            err++;
 8009fc8:	7afb      	ldrb	r3, [r7, #11]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009fce:	e007      	b.n	8009fe0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa41 	bl	800a45a <USBD_CtlError>
          err++;
 8009fd8:	7afb      	ldrb	r3, [r7, #11]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009fde:	bf00      	nop
      }
      break;
 8009fe0:	e037      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	7c1b      	ldrb	r3, [r3, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff2:	f107 0208 	add.w	r2, r7, #8
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4798      	blx	r3
 8009ffa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ffc:	e029      	b.n	800a052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fa2a 	bl	800a45a <USBD_CtlError>
        err++;
 800a006:	7afb      	ldrb	r3, [r7, #11]
 800a008:	3301      	adds	r3, #1
 800a00a:	72fb      	strb	r3, [r7, #11]
      break;
 800a00c:	e021      	b.n	800a052 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7c1b      	ldrb	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10d      	bne.n	800a032 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	4610      	mov	r0, r2
 800a024:	4798      	blx	r3
 800a026:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
 800a02c:	2207      	movs	r2, #7
 800a02e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a030:	e00f      	b.n	800a052 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fa10 	bl	800a45a <USBD_CtlError>
        err++;
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	3301      	adds	r3, #1
 800a03e:	72fb      	strb	r3, [r7, #11]
      break;
 800a040:	e007      	b.n	800a052 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a042:	6839      	ldr	r1, [r7, #0]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fa08 	bl	800a45a <USBD_CtlError>
      err++;
 800a04a:	7afb      	ldrb	r3, [r7, #11]
 800a04c:	3301      	adds	r3, #1
 800a04e:	72fb      	strb	r3, [r7, #11]
      break;
 800a050:	bf00      	nop
  }

  if (err != 0U)
 800a052:	7afb      	ldrb	r3, [r7, #11]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11e      	bne.n	800a096 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	88db      	ldrh	r3, [r3, #6]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d016      	beq.n	800a08e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00e      	beq.n	800a084 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	88da      	ldrh	r2, [r3, #6]
 800a06a:	893b      	ldrh	r3, [r7, #8]
 800a06c:	4293      	cmp	r3, r2
 800a06e:	bf28      	it	cs
 800a070:	4613      	movcs	r3, r2
 800a072:	b29b      	uxth	r3, r3
 800a074:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a076:	893b      	ldrh	r3, [r7, #8]
 800a078:	461a      	mov	r2, r3
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fa5d 	bl	800a53c <USBD_CtlSendData>
 800a082:	e009      	b.n	800a098 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f9e7 	bl	800a45a <USBD_CtlError>
 800a08c:	e004      	b.n	800a098 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 faae 	bl	800a5f0 <USBD_CtlSendStatus>
 800a094:	e000      	b.n	800a098 <USBD_GetDescriptor+0x2cc>
    return;
 800a096:	bf00      	nop
  }
}
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop

0800a0a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	889b      	ldrh	r3, [r3, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d131      	bne.n	800a116 <USBD_SetAddress+0x76>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	88db      	ldrh	r3, [r3, #6]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d12d      	bne.n	800a116 <USBD_SetAddress+0x76>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	885b      	ldrh	r3, [r3, #2]
 800a0be:	2b7f      	cmp	r3, #127	; 0x7f
 800a0c0:	d829      	bhi.n	800a116 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	885b      	ldrh	r3, [r3, #2]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d104      	bne.n	800a0e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f9bc 	bl	800a45a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e2:	e01d      	b.n	800a120 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7bfa      	ldrb	r2, [r7, #15]
 800a0e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f002 f9d7 	bl	800c4a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa7a 	bl	800a5f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10a:	e009      	b.n	800a120 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a114:	e004      	b.n	800a120 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f99e 	bl	800a45a <USBD_CtlError>
  }
}
 800a11e:	bf00      	nop
 800a120:	bf00      	nop
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	885b      	ldrh	r3, [r3, #2]
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	4b4e      	ldr	r3, [pc, #312]	; (800a278 <USBD_SetConfig+0x150>)
 800a13e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a140:	4b4d      	ldr	r3, [pc, #308]	; (800a278 <USBD_SetConfig+0x150>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d905      	bls.n	800a154 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f985 	bl	800a45a <USBD_CtlError>
    return USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	e08c      	b.n	800a26e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d002      	beq.n	800a166 <USBD_SetConfig+0x3e>
 800a160:	2b03      	cmp	r3, #3
 800a162:	d029      	beq.n	800a1b8 <USBD_SetConfig+0x90>
 800a164:	e075      	b.n	800a252 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a166:	4b44      	ldr	r3, [pc, #272]	; (800a278 <USBD_SetConfig+0x150>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d020      	beq.n	800a1b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a16e:	4b42      	ldr	r3, [pc, #264]	; (800a278 <USBD_SetConfig+0x150>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a178:	4b3f      	ldr	r3, [pc, #252]	; (800a278 <USBD_SetConfig+0x150>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fe ffe7 	bl	8009152 <USBD_SetClassConfig>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d008      	beq.n	800a1a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f962 	bl	800a45a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2202      	movs	r2, #2
 800a19a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a19e:	e065      	b.n	800a26c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fa25 	bl	800a5f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2203      	movs	r2, #3
 800a1aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1ae:	e05d      	b.n	800a26c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fa1d 	bl	800a5f0 <USBD_CtlSendStatus>
      break;
 800a1b6:	e059      	b.n	800a26c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1b8:	4b2f      	ldr	r3, [pc, #188]	; (800a278 <USBD_SetConfig+0x150>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d112      	bne.n	800a1e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a1c8:	4b2b      	ldr	r3, [pc, #172]	; (800a278 <USBD_SetConfig+0x150>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1d2:	4b29      	ldr	r3, [pc, #164]	; (800a278 <USBD_SetConfig+0x150>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7fe ffd6 	bl	800918a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa06 	bl	800a5f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1e4:	e042      	b.n	800a26c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a1e6:	4b24      	ldr	r3, [pc, #144]	; (800a278 <USBD_SetConfig+0x150>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d02a      	beq.n	800a24a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7fe ffc4 	bl	800918a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a202:	4b1d      	ldr	r3, [pc, #116]	; (800a278 <USBD_SetConfig+0x150>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a20c:	4b1a      	ldr	r3, [pc, #104]	; (800a278 <USBD_SetConfig+0x150>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7fe ff9d 	bl	8009152 <USBD_SetClassConfig>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00f      	beq.n	800a242 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f918 	bl	800a45a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7fe ffa9 	bl	800918a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a240:	e014      	b.n	800a26c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f9d4 	bl	800a5f0 <USBD_CtlSendStatus>
      break;
 800a248:	e010      	b.n	800a26c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f9d0 	bl	800a5f0 <USBD_CtlSendStatus>
      break;
 800a250:	e00c      	b.n	800a26c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f900 	bl	800a45a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <USBD_SetConfig+0x150>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7fe ff92 	bl	800918a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a266:	2303      	movs	r3, #3
 800a268:	73fb      	strb	r3, [r7, #15]
      break;
 800a26a:	bf00      	nop
  }

  return ret;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	200007d4 	.word	0x200007d4

0800a27c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	88db      	ldrh	r3, [r3, #6]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d004      	beq.n	800a298 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f8e2 	bl	800a45a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a296:	e023      	b.n	800a2e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	dc02      	bgt.n	800a2aa <USBD_GetConfig+0x2e>
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dc03      	bgt.n	800a2b0 <USBD_GetConfig+0x34>
 800a2a8:	e015      	b.n	800a2d6 <USBD_GetConfig+0x5a>
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d00b      	beq.n	800a2c6 <USBD_GetConfig+0x4a>
 800a2ae:	e012      	b.n	800a2d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f93c 	bl	800a53c <USBD_CtlSendData>
        break;
 800a2c4:	e00c      	b.n	800a2e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f934 	bl	800a53c <USBD_CtlSendData>
        break;
 800a2d4:	e004      	b.n	800a2e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f8be 	bl	800a45a <USBD_CtlError>
        break;
 800a2de:	bf00      	nop
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d81e      	bhi.n	800a33e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	88db      	ldrh	r3, [r3, #6]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d004      	beq.n	800a312 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f8a5 	bl	800a45a <USBD_CtlError>
        break;
 800a310:	e01a      	b.n	800a348 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f043 0202 	orr.w	r2, r3, #2
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	330c      	adds	r3, #12
 800a332:	2202      	movs	r2, #2
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f900 	bl	800a53c <USBD_CtlSendData>
      break;
 800a33c:	e004      	b.n	800a348 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f88a 	bl	800a45a <USBD_CtlError>
      break;
 800a346:	bf00      	nop
  }
}
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	885b      	ldrh	r3, [r3, #2]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d107      	bne.n	800a372 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f940 	bl	800a5f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a370:	e013      	b.n	800a39a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	885b      	ldrh	r3, [r3, #2]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d10b      	bne.n	800a392 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	889b      	ldrh	r3, [r3, #4]
 800a37e:	0a1b      	lsrs	r3, r3, #8
 800a380:	b29b      	uxth	r3, r3
 800a382:	b2da      	uxtb	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f930 	bl	800a5f0 <USBD_CtlSendStatus>
}
 800a390:	e003      	b.n	800a39a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f860 	bl	800a45a <USBD_CtlError>
}
 800a39a:	bf00      	nop
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b082      	sub	sp, #8
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d80b      	bhi.n	800a3d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d10c      	bne.n	800a3dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f910 	bl	800a5f0 <USBD_CtlSendStatus>
      }
      break;
 800a3d0:	e004      	b.n	800a3dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f840 	bl	800a45a <USBD_CtlError>
      break;
 800a3da:	e000      	b.n	800a3de <USBD_ClrFeature+0x3c>
      break;
 800a3dc:	bf00      	nop
  }
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	781a      	ldrb	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f7ff fa41 	bl	8009898 <SWAPBYTE>
 800a416:	4603      	mov	r3, r0
 800a418:	461a      	mov	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3301      	adds	r3, #1
 800a422:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f7ff fa34 	bl	8009898 <SWAPBYTE>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f7ff fa27 	bl	8009898 <SWAPBYTE>
 800a44a:	4603      	mov	r3, r0
 800a44c:	461a      	mov	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	80da      	strh	r2, [r3, #6]
}
 800a452:	bf00      	nop
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}

0800a45a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b082      	sub	sp, #8
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a464:	2180      	movs	r1, #128	; 0x80
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f001 ffb2 	bl	800c3d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a46c:	2100      	movs	r1, #0
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f001 ffae 	bl	800c3d0 <USBD_LL_StallEP>
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d036      	beq.n	800a500 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a496:	6938      	ldr	r0, [r7, #16]
 800a498:	f000 f836 	bl	800a508 <USBD_GetLen>
 800a49c:	4603      	mov	r3, r0
 800a49e:	3301      	adds	r3, #1
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	005b      	lsls	r3, r3, #1
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	7812      	ldrb	r2, [r2, #0]
 800a4b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	2203      	movs	r2, #3
 800a4c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a4cc:	e013      	b.n	800a4f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	7812      	ldrb	r2, [r2, #0]
 800a4d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
    idx++;
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e7      	bne.n	800a4ce <USBD_GetString+0x52>
 800a4fe:	e000      	b.n	800a502 <USBD_GetString+0x86>
    return;
 800a500:	bf00      	nop
  }
}
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a518:	e005      	b.n	800a526 <USBD_GetLen+0x1e>
  {
    len++;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	3301      	adds	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	3301      	adds	r3, #1
 800a524:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f5      	bne.n	800a51a <USBD_GetLen+0x12>
  }

  return len;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	2100      	movs	r1, #0
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f001 ffbd 	bl	800c4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	2100      	movs	r1, #0
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f001 ffac 	bl	800c4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2203      	movs	r2, #3
 800a5a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	2100      	movs	r1, #0
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f001 ffb0 	bl	800c524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	2100      	movs	r1, #0
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f001 ff9f 	bl	800c524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2204      	movs	r2, #4
 800a5fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a600:	2300      	movs	r3, #0
 800a602:	2200      	movs	r2, #0
 800a604:	2100      	movs	r1, #0
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 ff6b 	bl	800c4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3708      	adds	r7, #8
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b082      	sub	sp, #8
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2205      	movs	r2, #5
 800a622:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a626:	2300      	movs	r3, #0
 800a628:	2200      	movs	r2, #0
 800a62a:	2100      	movs	r1, #0
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f001 ff79 	bl	800c524 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a64a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a64e:	2b84      	cmp	r3, #132	; 0x84
 800a650:	d005      	beq.n	800a65e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	3303      	adds	r3, #3
 800a65c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a65e:	68fb      	ldr	r3, [r7, #12]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a670:	f000 fb02 	bl	800ac78 <vTaskStartScheduler>
  
  return osOK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	bd80      	pop	{r7, pc}

0800a67a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a67a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67c:	b089      	sub	sp, #36	; 0x24
 800a67e:	af04      	add	r7, sp, #16
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d020      	beq.n	800a6ce <osThreadCreate+0x54>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01c      	beq.n	800a6ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685c      	ldr	r4, [r3, #4]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681d      	ldr	r5, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	691e      	ldr	r6, [r3, #16]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff ffc8 	bl	800a63c <makeFreeRtosPriority>
 800a6ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6b6:	9202      	str	r2, [sp, #8]
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	9100      	str	r1, [sp, #0]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	4632      	mov	r2, r6
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 f8ed 	bl	800a8a2 <xTaskCreateStatic>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	e01c      	b.n	800a708 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	685c      	ldr	r4, [r3, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6da:	b29e      	uxth	r6, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff ffaa 	bl	800a63c <makeFreeRtosPriority>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	f107 030c 	add.w	r3, r7, #12
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	9200      	str	r2, [sp, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	4632      	mov	r2, r6
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f000 f92f 	bl	800a95c <xTaskCreate>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b01      	cmp	r3, #1
 800a702:	d001      	beq.n	800a708 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a704:	2300      	movs	r3, #0
 800a706:	e000      	b.n	800a70a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a708:	68fb      	ldr	r3, [r7, #12]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a712 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b084      	sub	sp, #16
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <osDelay+0x16>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	e000      	b.n	800a72a <osDelay+0x18>
 800a728:	2301      	movs	r3, #1
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fa70 	bl	800ac10 <vTaskDelay>
  
  return osOK;
 800a730:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f103 0208 	add.w	r2, r3, #8
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f04f 32ff 	mov.w	r2, #4294967295
 800a752:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f103 0208 	add.w	r2, r3, #8
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f103 0208 	add.w	r2, r3, #8
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	601a      	str	r2, [r3, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d103      	bne.n	800a7fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	e00c      	b.n	800a816 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3308      	adds	r3, #8
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	e002      	b.n	800a80a <vListInsert+0x2e>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	429a      	cmp	r2, r3
 800a814:	d2f6      	bcs.n	800a804 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	601a      	str	r2, [r3, #0]
}
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a84e:	b480      	push	{r7}
 800a850:	b085      	sub	sp, #20
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	6892      	ldr	r2, [r2, #8]
 800a864:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	6852      	ldr	r2, [r2, #4]
 800a86e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	429a      	cmp	r2, r3
 800a878:	d103      	bne.n	800a882 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	1e5a      	subs	r2, r3, #1
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b08e      	sub	sp, #56	; 0x38
 800a8a6:	af04      	add	r7, sp, #16
 800a8a8:	60f8      	str	r0, [r7, #12]
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ba:	f383 8811 	msr	BASEPRI, r3
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	f3bf 8f4f 	dsb	sy
 800a8c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8c8:	bf00      	nop
 800a8ca:	e7fe      	b.n	800a8ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <xTaskCreateStatic+0x46>
	__asm volatile
 800a8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
 800a8e2:	61fb      	str	r3, [r7, #28]
}
 800a8e4:	bf00      	nop
 800a8e6:	e7fe      	b.n	800a8e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8e8:	23b8      	movs	r3, #184	; 0xb8
 800a8ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2bb8      	cmp	r3, #184	; 0xb8
 800a8f0:	d00a      	beq.n	800a908 <xTaskCreateStatic+0x66>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	61bb      	str	r3, [r7, #24]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a908:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01e      	beq.n	800a94e <xTaskCreateStatic+0xac>
 800a910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a912:	2b00      	cmp	r3, #0
 800a914:	d01b      	beq.n	800a94e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a91e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	2202      	movs	r2, #2
 800a924:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a928:	2300      	movs	r3, #0
 800a92a:	9303      	str	r3, [sp, #12]
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	9302      	str	r3, [sp, #8]
 800a930:	f107 0314 	add.w	r3, r7, #20
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68b9      	ldr	r1, [r7, #8]
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 f851 	bl	800a9e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a946:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a948:	f000 f8f8 	bl	800ab3c <prvAddNewTaskToReadyList>
 800a94c:	e001      	b.n	800a952 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a952:	697b      	ldr	r3, [r7, #20]
	}
 800a954:	4618      	mov	r0, r3
 800a956:	3728      	adds	r7, #40	; 0x28
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08c      	sub	sp, #48	; 0x30
 800a960:	af04      	add	r7, sp, #16
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	603b      	str	r3, [r7, #0]
 800a968:	4613      	mov	r3, r2
 800a96a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a96c:	88fb      	ldrh	r3, [r7, #6]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4618      	mov	r0, r3
 800a972:	f000 ff29 	bl	800b7c8 <pvPortMalloc>
 800a976:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00e      	beq.n	800a99c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a97e:	20b8      	movs	r0, #184	; 0xb8
 800a980:	f000 ff22 	bl	800b7c8 <pvPortMalloc>
 800a984:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	631a      	str	r2, [r3, #48]	; 0x30
 800a992:	e005      	b.n	800a9a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a994:	6978      	ldr	r0, [r7, #20]
 800a996:	f000 ffe7 	bl	800b968 <vPortFree>
 800a99a:	e001      	b.n	800a9a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d017      	beq.n	800a9d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9ae:	88fa      	ldrh	r2, [r7, #6]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9303      	str	r3, [sp, #12]
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	9302      	str	r3, [sp, #8]
 800a9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f000 f80f 	bl	800a9e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9ca:	69f8      	ldr	r0, [r7, #28]
 800a9cc:	f000 f8b6 	bl	800ab3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	61bb      	str	r3, [r7, #24]
 800a9d4:	e002      	b.n	800a9dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a9da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
	}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3720      	adds	r7, #32
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	461a      	mov	r2, r3
 800aa00:	21a5      	movs	r1, #165	; 0xa5
 800aa02:	f001 fe2d 	bl	800c660 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa10:	3b01      	subs	r3, #1
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f023 0307 	bic.w	r3, r3, #7
 800aa1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	f003 0307 	and.w	r3, r3, #7
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00a      	beq.n	800aa40 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	617b      	str	r3, [r7, #20]
}
 800aa3c:	bf00      	nop
 800aa3e:	e7fe      	b.n	800aa3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01f      	beq.n	800aa86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa46:	2300      	movs	r3, #0
 800aa48:	61fb      	str	r3, [r7, #28]
 800aa4a:	e012      	b.n	800aa72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	4413      	add	r3, r2
 800aa52:	7819      	ldrb	r1, [r3, #0]
 800aa54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	4413      	add	r3, r2
 800aa5a:	3334      	adds	r3, #52	; 0x34
 800aa5c:	460a      	mov	r2, r1
 800aa5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	4413      	add	r3, r2
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d006      	beq.n	800aa7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	3301      	adds	r3, #1
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	2b0f      	cmp	r3, #15
 800aa76:	d9e9      	bls.n	800aa4c <prvInitialiseNewTask+0x64>
 800aa78:	e000      	b.n	800aa7c <prvInitialiseNewTask+0x94>
			{
				break;
 800aa7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa84:	e003      	b.n	800aa8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa90:	2b06      	cmp	r3, #6
 800aa92:	d901      	bls.n	800aa98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa94:	2306      	movs	r3, #6
 800aa96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	3304      	adds	r3, #4
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff fe63 	bl	800a77a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	3318      	adds	r3, #24
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7ff fe5e 	bl	800a77a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f1c3 0207 	rsb	r2, r3, #7
 800aaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aacc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aad2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800aad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad6:	2200      	movs	r2, #0
 800aad8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	2200      	movs	r2, #0
 800aade:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaec:	3350      	adds	r3, #80	; 0x50
 800aaee:	2260      	movs	r2, #96	; 0x60
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 fdb4 	bl	800c660 <memset>
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	4a0d      	ldr	r2, [pc, #52]	; (800ab30 <prvInitialiseNewTask+0x148>)
 800aafc:	655a      	str	r2, [r3, #84]	; 0x54
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <prvInitialiseNewTask+0x14c>)
 800ab02:	659a      	str	r2, [r3, #88]	; 0x58
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	4a0c      	ldr	r2, [pc, #48]	; (800ab38 <prvInitialiseNewTask+0x150>)
 800ab08:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab0a:	683a      	ldr	r2, [r7, #0]
 800ab0c:	68f9      	ldr	r1, [r7, #12]
 800ab0e:	69b8      	ldr	r0, [r7, #24]
 800ab10:	f000 fc48 	bl	800b3a4 <pxPortInitialiseStack>
 800ab14:	4602      	mov	r2, r0
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab26:	bf00      	nop
 800ab28:	3720      	adds	r7, #32
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	0800c940 	.word	0x0800c940
 800ab34:	0800c960 	.word	0x0800c960
 800ab38:	0800c920 	.word	0x0800c920

0800ab3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab44:	f000 fd5e 	bl	800b604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab48:	4b2a      	ldr	r3, [pc, #168]	; (800abf4 <prvAddNewTaskToReadyList+0xb8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	4a29      	ldr	r2, [pc, #164]	; (800abf4 <prvAddNewTaskToReadyList+0xb8>)
 800ab50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab52:	4b29      	ldr	r3, [pc, #164]	; (800abf8 <prvAddNewTaskToReadyList+0xbc>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab5a:	4a27      	ldr	r2, [pc, #156]	; (800abf8 <prvAddNewTaskToReadyList+0xbc>)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab60:	4b24      	ldr	r3, [pc, #144]	; (800abf4 <prvAddNewTaskToReadyList+0xb8>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d110      	bne.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab68:	f000 faf4 	bl	800b154 <prvInitialiseTaskLists>
 800ab6c:	e00d      	b.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab6e:	4b23      	ldr	r3, [pc, #140]	; (800abfc <prvAddNewTaskToReadyList+0xc0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab76:	4b20      	ldr	r3, [pc, #128]	; (800abf8 <prvAddNewTaskToReadyList+0xbc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d802      	bhi.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab84:	4a1c      	ldr	r2, [pc, #112]	; (800abf8 <prvAddNewTaskToReadyList+0xbc>)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab8a:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	4a1b      	ldr	r2, [pc, #108]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	2201      	movs	r2, #1
 800ab9a:	409a      	lsls	r2, r3
 800ab9c:	4b19      	ldr	r3, [pc, #100]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	4a18      	ldr	r2, [pc, #96]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800aba4:	6013      	str	r3, [r2, #0]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	009b      	lsls	r3, r3, #2
 800abb2:	4a15      	ldr	r2, [pc, #84]	; (800ac08 <prvAddNewTaskToReadyList+0xcc>)
 800abb4:	441a      	add	r2, r3
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3304      	adds	r3, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7ff fde9 	bl	800a794 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abc2:	f000 fd4f 	bl	800b664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abc6:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <prvAddNewTaskToReadyList+0xc0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00e      	beq.n	800abec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <prvAddNewTaskToReadyList+0xbc>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	429a      	cmp	r2, r3
 800abda:	d207      	bcs.n	800abec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abdc:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800abde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abec:	bf00      	nop
 800abee:	3708      	adds	r7, #8
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	200008d8 	.word	0x200008d8
 800abf8:	200007d8 	.word	0x200007d8
 800abfc:	200008e4 	.word	0x200008e4
 800ac00:	200008f4 	.word	0x200008f4
 800ac04:	200008e0 	.word	0x200008e0
 800ac08:	200007dc 	.word	0x200007dc
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d017      	beq.n	800ac52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <vTaskDelay+0x60>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <vTaskDelay+0x30>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	60bb      	str	r3, [r7, #8]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac40:	f000 f884 	bl	800ad4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fb46 	bl	800b2d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac4c:	f000 f88c 	bl	800ad68 <xTaskResumeAll>
 800ac50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d107      	bne.n	800ac68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac58:	4b06      	ldr	r3, [pc, #24]	; (800ac74 <vTaskDelay+0x64>)
 800ac5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac68:	bf00      	nop
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000900 	.word	0x20000900
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac86:	463a      	mov	r2, r7
 800ac88:	1d39      	adds	r1, r7, #4
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7f5 fdee 	bl	8000870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	9202      	str	r2, [sp, #8]
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	2300      	movs	r3, #0
 800aca4:	460a      	mov	r2, r1
 800aca6:	4921      	ldr	r1, [pc, #132]	; (800ad2c <vTaskStartScheduler+0xb4>)
 800aca8:	4821      	ldr	r0, [pc, #132]	; (800ad30 <vTaskStartScheduler+0xb8>)
 800acaa:	f7ff fdfa 	bl	800a8a2 <xTaskCreateStatic>
 800acae:	4603      	mov	r3, r0
 800acb0:	4a20      	ldr	r2, [pc, #128]	; (800ad34 <vTaskStartScheduler+0xbc>)
 800acb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acb4:	4b1f      	ldr	r3, [pc, #124]	; (800ad34 <vTaskStartScheduler+0xbc>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acbc:	2301      	movs	r3, #1
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e001      	b.n	800acc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d11b      	bne.n	800ad04 <vTaskStartScheduler+0x8c>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	613b      	str	r3, [r7, #16]
}
 800acde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ace0:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <vTaskStartScheduler+0xc0>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3350      	adds	r3, #80	; 0x50
 800ace6:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <vTaskStartScheduler+0xc4>)
 800ace8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800acea:	4b15      	ldr	r3, [pc, #84]	; (800ad40 <vTaskStartScheduler+0xc8>)
 800acec:	f04f 32ff 	mov.w	r2, #4294967295
 800acf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acf2:	4b14      	ldr	r3, [pc, #80]	; (800ad44 <vTaskStartScheduler+0xcc>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acf8:	4b13      	ldr	r3, [pc, #76]	; (800ad48 <vTaskStartScheduler+0xd0>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acfe:	f000 fbdf 	bl	800b4c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad02:	e00e      	b.n	800ad22 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d10a      	bne.n	800ad22 <vTaskStartScheduler+0xaa>
	__asm volatile
 800ad0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	60fb      	str	r3, [r7, #12]
}
 800ad1e:	bf00      	nop
 800ad20:	e7fe      	b.n	800ad20 <vTaskStartScheduler+0xa8>
}
 800ad22:	bf00      	nop
 800ad24:	3718      	adds	r7, #24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	0800c8b0 	.word	0x0800c8b0
 800ad30:	0800b121 	.word	0x0800b121
 800ad34:	200008fc 	.word	0x200008fc
 800ad38:	200007d8 	.word	0x200007d8
 800ad3c:	20000100 	.word	0x20000100
 800ad40:	200008f8 	.word	0x200008f8
 800ad44:	200008e4 	.word	0x200008e4
 800ad48:	200008dc 	.word	0x200008dc

0800ad4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <vTaskSuspendAll+0x18>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3301      	adds	r3, #1
 800ad56:	4a03      	ldr	r2, [pc, #12]	; (800ad64 <vTaskSuspendAll+0x18>)
 800ad58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad5a:	bf00      	nop
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	20000900 	.word	0x20000900

0800ad68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad72:	2300      	movs	r3, #0
 800ad74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad76:	4b41      	ldr	r3, [pc, #260]	; (800ae7c <xTaskResumeAll+0x114>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <xTaskResumeAll+0x2c>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	603b      	str	r3, [r7, #0]
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad94:	f000 fc36 	bl	800b604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad98:	4b38      	ldr	r3, [pc, #224]	; (800ae7c <xTaskResumeAll+0x114>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	4a37      	ldr	r2, [pc, #220]	; (800ae7c <xTaskResumeAll+0x114>)
 800ada0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ada2:	4b36      	ldr	r3, [pc, #216]	; (800ae7c <xTaskResumeAll+0x114>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d161      	bne.n	800ae6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adaa:	4b35      	ldr	r3, [pc, #212]	; (800ae80 <xTaskResumeAll+0x118>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d05d      	beq.n	800ae6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adb2:	e02e      	b.n	800ae12 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb4:	4b33      	ldr	r3, [pc, #204]	; (800ae84 <xTaskResumeAll+0x11c>)
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3318      	adds	r3, #24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fd44 	bl	800a84e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3304      	adds	r3, #4
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fd3f 	bl	800a84e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	2201      	movs	r2, #1
 800add6:	409a      	lsls	r2, r3
 800add8:	4b2b      	ldr	r3, [pc, #172]	; (800ae88 <xTaskResumeAll+0x120>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4313      	orrs	r3, r2
 800adde:	4a2a      	ldr	r2, [pc, #168]	; (800ae88 <xTaskResumeAll+0x120>)
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4a27      	ldr	r2, [pc, #156]	; (800ae8c <xTaskResumeAll+0x124>)
 800adf0:	441a      	add	r2, r3
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4619      	mov	r1, r3
 800adf8:	4610      	mov	r0, r2
 800adfa:	f7ff fccb 	bl	800a794 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae02:	4b23      	ldr	r3, [pc, #140]	; (800ae90 <xTaskResumeAll+0x128>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d302      	bcc.n	800ae12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ae0c:	4b21      	ldr	r3, [pc, #132]	; (800ae94 <xTaskResumeAll+0x12c>)
 800ae0e:	2201      	movs	r2, #1
 800ae10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <xTaskResumeAll+0x11c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d1cc      	bne.n	800adb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae20:	f000 fa3a 	bl	800b298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae24:	4b1c      	ldr	r3, [pc, #112]	; (800ae98 <xTaskResumeAll+0x130>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae30:	f000 f836 	bl	800aea0 <xTaskIncrementTick>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ae3a:	4b16      	ldr	r3, [pc, #88]	; (800ae94 <xTaskResumeAll+0x12c>)
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f1      	bne.n	800ae30 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ae4c:	4b12      	ldr	r3, [pc, #72]	; (800ae98 <xTaskResumeAll+0x130>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae52:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <xTaskResumeAll+0x12c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d009      	beq.n	800ae6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae5e:	4b0f      	ldr	r3, [pc, #60]	; (800ae9c <xTaskResumeAll+0x134>)
 800ae60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae6e:	f000 fbf9 	bl	800b664 <vPortExitCritical>

	return xAlreadyYielded;
 800ae72:	68bb      	ldr	r3, [r7, #8]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	20000900 	.word	0x20000900
 800ae80:	200008d8 	.word	0x200008d8
 800ae84:	20000898 	.word	0x20000898
 800ae88:	200008e0 	.word	0x200008e0
 800ae8c:	200007dc 	.word	0x200007dc
 800ae90:	200007d8 	.word	0x200007d8
 800ae94:	200008ec 	.word	0x200008ec
 800ae98:	200008e8 	.word	0x200008e8
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aea6:	2300      	movs	r3, #0
 800aea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeaa:	4b4e      	ldr	r3, [pc, #312]	; (800afe4 <xTaskIncrementTick+0x144>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f040 808e 	bne.w	800afd0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aeb4:	4b4c      	ldr	r3, [pc, #304]	; (800afe8 <xTaskIncrementTick+0x148>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aebc:	4a4a      	ldr	r2, [pc, #296]	; (800afe8 <xTaskIncrementTick+0x148>)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d120      	bne.n	800af0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aec8:	4b48      	ldr	r3, [pc, #288]	; (800afec <xTaskIncrementTick+0x14c>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00a      	beq.n	800aee8 <xTaskIncrementTick+0x48>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	603b      	str	r3, [r7, #0]
}
 800aee4:	bf00      	nop
 800aee6:	e7fe      	b.n	800aee6 <xTaskIncrementTick+0x46>
 800aee8:	4b40      	ldr	r3, [pc, #256]	; (800afec <xTaskIncrementTick+0x14c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	60fb      	str	r3, [r7, #12]
 800aeee:	4b40      	ldr	r3, [pc, #256]	; (800aff0 <xTaskIncrementTick+0x150>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a3e      	ldr	r2, [pc, #248]	; (800afec <xTaskIncrementTick+0x14c>)
 800aef4:	6013      	str	r3, [r2, #0]
 800aef6:	4a3e      	ldr	r2, [pc, #248]	; (800aff0 <xTaskIncrementTick+0x150>)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	4b3d      	ldr	r3, [pc, #244]	; (800aff4 <xTaskIncrementTick+0x154>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3301      	adds	r3, #1
 800af02:	4a3c      	ldr	r2, [pc, #240]	; (800aff4 <xTaskIncrementTick+0x154>)
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	f000 f9c7 	bl	800b298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af0a:	4b3b      	ldr	r3, [pc, #236]	; (800aff8 <xTaskIncrementTick+0x158>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	429a      	cmp	r2, r3
 800af12:	d348      	bcc.n	800afa6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af14:	4b35      	ldr	r3, [pc, #212]	; (800afec <xTaskIncrementTick+0x14c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d104      	bne.n	800af28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af1e:	4b36      	ldr	r3, [pc, #216]	; (800aff8 <xTaskIncrementTick+0x158>)
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	601a      	str	r2, [r3, #0]
					break;
 800af26:	e03e      	b.n	800afa6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af28:	4b30      	ldr	r3, [pc, #192]	; (800afec <xTaskIncrementTick+0x14c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d203      	bcs.n	800af48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af40:	4a2d      	ldr	r2, [pc, #180]	; (800aff8 <xTaskIncrementTick+0x158>)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af46:	e02e      	b.n	800afa6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	3304      	adds	r3, #4
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7ff fc7e 	bl	800a84e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	2b00      	cmp	r3, #0
 800af58:	d004      	beq.n	800af64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	3318      	adds	r3, #24
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fc75 	bl	800a84e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af68:	2201      	movs	r2, #1
 800af6a:	409a      	lsls	r2, r3
 800af6c:	4b23      	ldr	r3, [pc, #140]	; (800affc <xTaskIncrementTick+0x15c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4313      	orrs	r3, r2
 800af72:	4a22      	ldr	r2, [pc, #136]	; (800affc <xTaskIncrementTick+0x15c>)
 800af74:	6013      	str	r3, [r2, #0]
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7a:	4613      	mov	r3, r2
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4a1f      	ldr	r2, [pc, #124]	; (800b000 <xTaskIncrementTick+0x160>)
 800af84:	441a      	add	r2, r3
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	3304      	adds	r3, #4
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f7ff fc01 	bl	800a794 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af96:	4b1b      	ldr	r3, [pc, #108]	; (800b004 <xTaskIncrementTick+0x164>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d3b9      	bcc.n	800af14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afa0:	2301      	movs	r3, #1
 800afa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afa4:	e7b6      	b.n	800af14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afa6:	4b17      	ldr	r3, [pc, #92]	; (800b004 <xTaskIncrementTick+0x164>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afac:	4914      	ldr	r1, [pc, #80]	; (800b000 <xTaskIncrementTick+0x160>)
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d901      	bls.n	800afc2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800afbe:	2301      	movs	r3, #1
 800afc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800afc2:	4b11      	ldr	r3, [pc, #68]	; (800b008 <xTaskIncrementTick+0x168>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800afca:	2301      	movs	r3, #1
 800afcc:	617b      	str	r3, [r7, #20]
 800afce:	e004      	b.n	800afda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800afd0:	4b0e      	ldr	r3, [pc, #56]	; (800b00c <xTaskIncrementTick+0x16c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <xTaskIncrementTick+0x16c>)
 800afd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800afda:	697b      	ldr	r3, [r7, #20]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20000900 	.word	0x20000900
 800afe8:	200008dc 	.word	0x200008dc
 800afec:	20000890 	.word	0x20000890
 800aff0:	20000894 	.word	0x20000894
 800aff4:	200008f0 	.word	0x200008f0
 800aff8:	200008f8 	.word	0x200008f8
 800affc:	200008e0 	.word	0x200008e0
 800b000:	200007dc 	.word	0x200007dc
 800b004:	200007d8 	.word	0x200007d8
 800b008:	200008ec 	.word	0x200008ec
 800b00c:	200008e8 	.word	0x200008e8

0800b010 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b016:	4b3c      	ldr	r3, [pc, #240]	; (800b108 <vTaskSwitchContext+0xf8>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b01e:	4b3b      	ldr	r3, [pc, #236]	; (800b10c <vTaskSwitchContext+0xfc>)
 800b020:	2201      	movs	r2, #1
 800b022:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b024:	e06b      	b.n	800b0fe <vTaskSwitchContext+0xee>
		xYieldPending = pdFALSE;
 800b026:	4b39      	ldr	r3, [pc, #228]	; (800b10c <vTaskSwitchContext+0xfc>)
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800b02c:	4b38      	ldr	r3, [pc, #224]	; (800b110 <vTaskSwitchContext+0x100>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b032:	61fb      	str	r3, [r7, #28]
 800b034:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	429a      	cmp	r2, r3
 800b042:	d111      	bne.n	800b068 <vTaskSwitchContext+0x58>
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	3304      	adds	r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d10b      	bne.n	800b068 <vTaskSwitchContext+0x58>
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	3308      	adds	r3, #8
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d105      	bne.n	800b068 <vTaskSwitchContext+0x58>
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	330c      	adds	r3, #12
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	429a      	cmp	r2, r3
 800b066:	d008      	beq.n	800b07a <vTaskSwitchContext+0x6a>
 800b068:	4b29      	ldr	r3, [pc, #164]	; (800b110 <vTaskSwitchContext+0x100>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	4b28      	ldr	r3, [pc, #160]	; (800b110 <vTaskSwitchContext+0x100>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	3334      	adds	r3, #52	; 0x34
 800b072:	4619      	mov	r1, r3
 800b074:	4610      	mov	r0, r2
 800b076:	f7f5 fbe8 	bl	800084a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07a:	4b26      	ldr	r3, [pc, #152]	; (800b114 <vTaskSwitchContext+0x104>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	fab3 f383 	clz	r3, r3
 800b086:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	f1c3 031f 	rsb	r3, r3, #31
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	4921      	ldr	r1, [pc, #132]	; (800b118 <vTaskSwitchContext+0x108>)
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10a      	bne.n	800b0ba <vTaskSwitchContext+0xaa>
	__asm volatile
 800b0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a8:	f383 8811 	msr	BASEPRI, r3
 800b0ac:	f3bf 8f6f 	isb	sy
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	607b      	str	r3, [r7, #4]
}
 800b0b6:	bf00      	nop
 800b0b8:	e7fe      	b.n	800b0b8 <vTaskSwitchContext+0xa8>
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4a14      	ldr	r2, [pc, #80]	; (800b118 <vTaskSwitchContext+0x108>)
 800b0c6:	4413      	add	r3, r2
 800b0c8:	613b      	str	r3, [r7, #16]
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	605a      	str	r2, [r3, #4]
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	685a      	ldr	r2, [r3, #4]
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d104      	bne.n	800b0ea <vTaskSwitchContext+0xda>
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	605a      	str	r2, [r3, #4]
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	4a07      	ldr	r2, [pc, #28]	; (800b110 <vTaskSwitchContext+0x100>)
 800b0f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0f4:	4b06      	ldr	r3, [pc, #24]	; (800b110 <vTaskSwitchContext+0x100>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3350      	adds	r3, #80	; 0x50
 800b0fa:	4a08      	ldr	r2, [pc, #32]	; (800b11c <vTaskSwitchContext+0x10c>)
 800b0fc:	6013      	str	r3, [r2, #0]
}
 800b0fe:	bf00      	nop
 800b100:	3720      	adds	r7, #32
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20000900 	.word	0x20000900
 800b10c:	200008ec 	.word	0x200008ec
 800b110:	200007d8 	.word	0x200007d8
 800b114:	200008e0 	.word	0x200008e0
 800b118:	200007dc 	.word	0x200007dc
 800b11c:	20000100 	.word	0x20000100

0800b120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b128:	f000 f854 	bl	800b1d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b12c:	4b07      	ldr	r3, [pc, #28]	; (800b14c <prvIdleTask+0x2c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d907      	bls.n	800b144 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <prvIdleTask+0x30>)
 800b136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b144:	f7f5 fb7a 	bl	800083c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b148:	e7ee      	b.n	800b128 <prvIdleTask+0x8>
 800b14a:	bf00      	nop
 800b14c:	200007dc 	.word	0x200007dc
 800b150:	e000ed04 	.word	0xe000ed04

0800b154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b15a:	2300      	movs	r3, #0
 800b15c:	607b      	str	r3, [r7, #4]
 800b15e:	e00c      	b.n	800b17a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4a12      	ldr	r2, [pc, #72]	; (800b1b4 <prvInitialiseTaskLists+0x60>)
 800b16c:	4413      	add	r3, r2
 800b16e:	4618      	mov	r0, r3
 800b170:	f7ff fae3 	bl	800a73a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3301      	adds	r3, #1
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b06      	cmp	r3, #6
 800b17e:	d9ef      	bls.n	800b160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b180:	480d      	ldr	r0, [pc, #52]	; (800b1b8 <prvInitialiseTaskLists+0x64>)
 800b182:	f7ff fada 	bl	800a73a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b186:	480d      	ldr	r0, [pc, #52]	; (800b1bc <prvInitialiseTaskLists+0x68>)
 800b188:	f7ff fad7 	bl	800a73a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b18c:	480c      	ldr	r0, [pc, #48]	; (800b1c0 <prvInitialiseTaskLists+0x6c>)
 800b18e:	f7ff fad4 	bl	800a73a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b192:	480c      	ldr	r0, [pc, #48]	; (800b1c4 <prvInitialiseTaskLists+0x70>)
 800b194:	f7ff fad1 	bl	800a73a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b198:	480b      	ldr	r0, [pc, #44]	; (800b1c8 <prvInitialiseTaskLists+0x74>)
 800b19a:	f7ff face 	bl	800a73a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b19e:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <prvInitialiseTaskLists+0x78>)
 800b1a0:	4a05      	ldr	r2, [pc, #20]	; (800b1b8 <prvInitialiseTaskLists+0x64>)
 800b1a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b1a4:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <prvInitialiseTaskLists+0x7c>)
 800b1a6:	4a05      	ldr	r2, [pc, #20]	; (800b1bc <prvInitialiseTaskLists+0x68>)
 800b1a8:	601a      	str	r2, [r3, #0]
}
 800b1aa:	bf00      	nop
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	200007dc 	.word	0x200007dc
 800b1b8:	20000868 	.word	0x20000868
 800b1bc:	2000087c 	.word	0x2000087c
 800b1c0:	20000898 	.word	0x20000898
 800b1c4:	200008ac 	.word	0x200008ac
 800b1c8:	200008c4 	.word	0x200008c4
 800b1cc:	20000890 	.word	0x20000890
 800b1d0:	20000894 	.word	0x20000894

0800b1d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1da:	e019      	b.n	800b210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1dc:	f000 fa12 	bl	800b604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1e0:	4b10      	ldr	r3, [pc, #64]	; (800b224 <prvCheckTasksWaitingTermination+0x50>)
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fb2e 	bl	800a84e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <prvCheckTasksWaitingTermination+0x54>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	4a0b      	ldr	r2, [pc, #44]	; (800b228 <prvCheckTasksWaitingTermination+0x54>)
 800b1fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1fc:	4b0b      	ldr	r3, [pc, #44]	; (800b22c <prvCheckTasksWaitingTermination+0x58>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3b01      	subs	r3, #1
 800b202:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <prvCheckTasksWaitingTermination+0x58>)
 800b204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b206:	f000 fa2d 	bl	800b664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f810 	bl	800b230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b210:	4b06      	ldr	r3, [pc, #24]	; (800b22c <prvCheckTasksWaitingTermination+0x58>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e1      	bne.n	800b1dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	200008ac 	.word	0x200008ac
 800b228:	200008d8 	.word	0x200008d8
 800b22c:	200008c0 	.word	0x200008c0

0800b230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3350      	adds	r3, #80	; 0x50
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 fa25 	bl	800c68c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d108      	bne.n	800b25e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fb89 	bl	800b968 <vPortFree>
				vPortFree( pxTCB );
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fb86 	bl	800b968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b25c:	e018      	b.n	800b290 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b264:	2b01      	cmp	r3, #1
 800b266:	d103      	bne.n	800b270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fb7d 	bl	800b968 <vPortFree>
	}
 800b26e:	e00f      	b.n	800b290 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800b276:	2b02      	cmp	r3, #2
 800b278:	d00a      	beq.n	800b290 <prvDeleteTCB+0x60>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60fb      	str	r3, [r7, #12]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <prvDeleteTCB+0x5e>
	}
 800b290:	bf00      	nop
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b29e:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <prvResetNextTaskUnblockTime+0x38>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b2a8:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b2aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b2b0:	e008      	b.n	800b2c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b2:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <prvResetNextTaskUnblockTime+0x38>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	4a04      	ldr	r2, [pc, #16]	; (800b2d4 <prvResetNextTaskUnblockTime+0x3c>)
 800b2c2:	6013      	str	r3, [r2, #0]
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	20000890 	.word	0x20000890
 800b2d4:	200008f8 	.word	0x200008f8

0800b2d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2e2:	4b29      	ldr	r3, [pc, #164]	; (800b388 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2e8:	4b28      	ldr	r3, [pc, #160]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7ff faad 	bl	800a84e <uxListRemove>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10b      	bne.n	800b312 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b2fa:	4b24      	ldr	r3, [pc, #144]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	2201      	movs	r2, #1
 800b302:	fa02 f303 	lsl.w	r3, r2, r3
 800b306:	43da      	mvns	r2, r3
 800b308:	4b21      	ldr	r3, [pc, #132]	; (800b390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4013      	ands	r3, r2
 800b30e:	4a20      	ldr	r2, [pc, #128]	; (800b390 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b310:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b318:	d10a      	bne.n	800b330 <prvAddCurrentTaskToDelayedList+0x58>
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d007      	beq.n	800b330 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b320:	4b1a      	ldr	r3, [pc, #104]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3304      	adds	r3, #4
 800b326:	4619      	mov	r1, r3
 800b328:	481a      	ldr	r0, [pc, #104]	; (800b394 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b32a:	f7ff fa33 	bl	800a794 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b32e:	e026      	b.n	800b37e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4413      	add	r3, r2
 800b336:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b338:	4b14      	ldr	r3, [pc, #80]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	429a      	cmp	r2, r3
 800b346:	d209      	bcs.n	800b35c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b348:	4b13      	ldr	r3, [pc, #76]	; (800b398 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3304      	adds	r3, #4
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f7ff fa41 	bl	800a7dc <vListInsert>
}
 800b35a:	e010      	b.n	800b37e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b35c:	4b0f      	ldr	r3, [pc, #60]	; (800b39c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3304      	adds	r3, #4
 800b366:	4619      	mov	r1, r3
 800b368:	4610      	mov	r0, r2
 800b36a:	f7ff fa37 	bl	800a7dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b36e:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	429a      	cmp	r2, r3
 800b376:	d202      	bcs.n	800b37e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b378:	4a09      	ldr	r2, [pc, #36]	; (800b3a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	6013      	str	r3, [r2, #0]
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	200008dc 	.word	0x200008dc
 800b38c:	200007d8 	.word	0x200007d8
 800b390:	200008e0 	.word	0x200008e0
 800b394:	200008c4 	.word	0x200008c4
 800b398:	20000894 	.word	0x20000894
 800b39c:	20000890 	.word	0x20000890
 800b3a0:	200008f8 	.word	0x200008f8

0800b3a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3b04      	subs	r3, #4
 800b3b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3b04      	subs	r3, #4
 800b3c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	f023 0201 	bic.w	r2, r3, #1
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3b04      	subs	r3, #4
 800b3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3d4:	4a0c      	ldr	r2, [pc, #48]	; (800b408 <pxPortInitialiseStack+0x64>)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	3b14      	subs	r3, #20
 800b3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f06f 0202 	mvn.w	r2, #2
 800b3f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	3b20      	subs	r3, #32
 800b3f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	0800b40d 	.word	0x0800b40d

0800b40c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b416:	4b12      	ldr	r3, [pc, #72]	; (800b460 <prvTaskExitError+0x54>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b41e:	d00a      	beq.n	800b436 <prvTaskExitError+0x2a>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	60fb      	str	r3, [r7, #12]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <prvTaskExitError+0x28>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60bb      	str	r3, [r7, #8]
}
 800b448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b44a:	bf00      	nop
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d0fc      	beq.n	800b44c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	20000098 	.word	0x20000098
	...

0800b470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b470:	4b07      	ldr	r3, [pc, #28]	; (800b490 <pxCurrentTCBConst2>)
 800b472:	6819      	ldr	r1, [r3, #0]
 800b474:	6808      	ldr	r0, [r1, #0]
 800b476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47a:	f380 8809 	msr	PSP, r0
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f04f 0000 	mov.w	r0, #0
 800b486:	f380 8811 	msr	BASEPRI, r0
 800b48a:	4770      	bx	lr
 800b48c:	f3af 8000 	nop.w

0800b490 <pxCurrentTCBConst2>:
 800b490:	200007d8 	.word	0x200007d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop

0800b498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b498:	4808      	ldr	r0, [pc, #32]	; (800b4bc <prvPortStartFirstTask+0x24>)
 800b49a:	6800      	ldr	r0, [r0, #0]
 800b49c:	6800      	ldr	r0, [r0, #0]
 800b49e:	f380 8808 	msr	MSP, r0
 800b4a2:	f04f 0000 	mov.w	r0, #0
 800b4a6:	f380 8814 	msr	CONTROL, r0
 800b4aa:	b662      	cpsie	i
 800b4ac:	b661      	cpsie	f
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	f3bf 8f6f 	isb	sy
 800b4b6:	df00      	svc	0
 800b4b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4ba:	bf00      	nop
 800b4bc:	e000ed08 	.word	0xe000ed08

0800b4c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4c6:	4b46      	ldr	r3, [pc, #280]	; (800b5e0 <xPortStartScheduler+0x120>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a46      	ldr	r2, [pc, #280]	; (800b5e4 <xPortStartScheduler+0x124>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10a      	bne.n	800b4e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d4:	f383 8811 	msr	BASEPRI, r3
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	613b      	str	r3, [r7, #16]
}
 800b4e2:	bf00      	nop
 800b4e4:	e7fe      	b.n	800b4e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b4e6:	4b3e      	ldr	r3, [pc, #248]	; (800b5e0 <xPortStartScheduler+0x120>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a3f      	ldr	r2, [pc, #252]	; (800b5e8 <xPortStartScheduler+0x128>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d10a      	bne.n	800b506 <xPortStartScheduler+0x46>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	60fb      	str	r3, [r7, #12]
}
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b506:	4b39      	ldr	r3, [pc, #228]	; (800b5ec <xPortStartScheduler+0x12c>)
 800b508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	22ff      	movs	r2, #255	; 0xff
 800b516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	b2db      	uxtb	r3, r3
 800b524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	4b31      	ldr	r3, [pc, #196]	; (800b5f0 <xPortStartScheduler+0x130>)
 800b52c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b52e:	4b31      	ldr	r3, [pc, #196]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b530:	2207      	movs	r2, #7
 800b532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b534:	e009      	b.n	800b54a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b536:	4b2f      	ldr	r3, [pc, #188]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	4a2d      	ldr	r2, [pc, #180]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b53e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b540:	78fb      	ldrb	r3, [r7, #3]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	b2db      	uxtb	r3, r3
 800b548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b54a:	78fb      	ldrb	r3, [r7, #3]
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b552:	2b80      	cmp	r3, #128	; 0x80
 800b554:	d0ef      	beq.n	800b536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b556:	4b27      	ldr	r3, [pc, #156]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f1c3 0307 	rsb	r3, r3, #7
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d00a      	beq.n	800b578 <xPortStartScheduler+0xb8>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	60bb      	str	r3, [r7, #8]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b578:	4b1e      	ldr	r3, [pc, #120]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	021b      	lsls	r3, r3, #8
 800b57e:	4a1d      	ldr	r2, [pc, #116]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b582:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b58a:	4a1a      	ldr	r2, [pc, #104]	; (800b5f4 <xPortStartScheduler+0x134>)
 800b58c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	b2da      	uxtb	r2, r3
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b596:	4b18      	ldr	r3, [pc, #96]	; (800b5f8 <xPortStartScheduler+0x138>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a17      	ldr	r2, [pc, #92]	; (800b5f8 <xPortStartScheduler+0x138>)
 800b59c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5a2:	4b15      	ldr	r3, [pc, #84]	; (800b5f8 <xPortStartScheduler+0x138>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a14      	ldr	r2, [pc, #80]	; (800b5f8 <xPortStartScheduler+0x138>)
 800b5a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5ae:	f000 f8dd 	bl	800b76c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5b2:	4b12      	ldr	r3, [pc, #72]	; (800b5fc <xPortStartScheduler+0x13c>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5b8:	f000 f8fc 	bl	800b7b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5bc:	4b10      	ldr	r3, [pc, #64]	; (800b600 <xPortStartScheduler+0x140>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a0f      	ldr	r2, [pc, #60]	; (800b600 <xPortStartScheduler+0x140>)
 800b5c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5c8:	f7ff ff66 	bl	800b498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5cc:	f7ff fd20 	bl	800b010 <vTaskSwitchContext>
	prvTaskExitError();
 800b5d0:	f7ff ff1c 	bl	800b40c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	e000ed00 	.word	0xe000ed00
 800b5e4:	410fc271 	.word	0x410fc271
 800b5e8:	410fc270 	.word	0x410fc270
 800b5ec:	e000e400 	.word	0xe000e400
 800b5f0:	20000904 	.word	0x20000904
 800b5f4:	20000908 	.word	0x20000908
 800b5f8:	e000ed20 	.word	0xe000ed20
 800b5fc:	20000098 	.word	0x20000098
 800b600:	e000ef34 	.word	0xe000ef34

0800b604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	607b      	str	r3, [r7, #4]
}
 800b61c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b61e:	4b0f      	ldr	r3, [pc, #60]	; (800b65c <vPortEnterCritical+0x58>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	3301      	adds	r3, #1
 800b624:	4a0d      	ldr	r2, [pc, #52]	; (800b65c <vPortEnterCritical+0x58>)
 800b626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b628:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <vPortEnterCritical+0x58>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d10f      	bne.n	800b650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b630:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <vPortEnterCritical+0x5c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	b2db      	uxtb	r3, r3
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00a      	beq.n	800b650 <vPortEnterCritical+0x4c>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	603b      	str	r3, [r7, #0]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <vPortEnterCritical+0x4a>
	}
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	20000098 	.word	0x20000098
 800b660:	e000ed04 	.word	0xe000ed04

0800b664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b66a:	4b12      	ldr	r3, [pc, #72]	; (800b6b4 <vPortExitCritical+0x50>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10a      	bne.n	800b688 <vPortExitCritical+0x24>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	607b      	str	r3, [r7, #4]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b688:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <vPortExitCritical+0x50>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <vPortExitCritical+0x50>)
 800b690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b692:	4b08      	ldr	r3, [pc, #32]	; (800b6b4 <vPortExitCritical+0x50>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d105      	bne.n	800b6a6 <vPortExitCritical+0x42>
 800b69a:	2300      	movs	r3, #0
 800b69c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000098 	.word	0x20000098
	...

0800b6c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6c0:	f3ef 8009 	mrs	r0, PSP
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	4b15      	ldr	r3, [pc, #84]	; (800b720 <pxCurrentTCBConst>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	f01e 0f10 	tst.w	lr, #16
 800b6d0:	bf08      	it	eq
 800b6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	6010      	str	r0, [r2, #0]
 800b6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b6e4:	f380 8811 	msr	BASEPRI, r0
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f7ff fc8e 	bl	800b010 <vTaskSwitchContext>
 800b6f4:	f04f 0000 	mov.w	r0, #0
 800b6f8:	f380 8811 	msr	BASEPRI, r0
 800b6fc:	bc09      	pop	{r0, r3}
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	6808      	ldr	r0, [r1, #0]
 800b702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b706:	f01e 0f10 	tst.w	lr, #16
 800b70a:	bf08      	it	eq
 800b70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b710:	f380 8809 	msr	PSP, r0
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	f3af 8000 	nop.w

0800b720 <pxCurrentTCBConst>:
 800b720:	200007d8 	.word	0x200007d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop

0800b728 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	607b      	str	r3, [r7, #4]
}
 800b740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b742:	f7ff fbad 	bl	800aea0 <xTaskIncrementTick>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b74c:	4b06      	ldr	r3, [pc, #24]	; (800b768 <SysTick_Handler+0x40>)
 800b74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	2300      	movs	r3, #0
 800b756:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	f383 8811 	msr	BASEPRI, r3
}
 800b75e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	e000ed04 	.word	0xe000ed04

0800b76c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <vPortSetupTimerInterrupt+0x34>)
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b776:	4b0b      	ldr	r3, [pc, #44]	; (800b7a4 <vPortSetupTimerInterrupt+0x38>)
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <vPortSetupTimerInterrupt+0x3c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <vPortSetupTimerInterrupt+0x40>)
 800b782:	fba2 2303 	umull	r2, r3, r2, r3
 800b786:	099b      	lsrs	r3, r3, #6
 800b788:	4a09      	ldr	r2, [pc, #36]	; (800b7b0 <vPortSetupTimerInterrupt+0x44>)
 800b78a:	3b01      	subs	r3, #1
 800b78c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b78e:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <vPortSetupTimerInterrupt+0x34>)
 800b790:	2207      	movs	r2, #7
 800b792:	601a      	str	r2, [r3, #0]
}
 800b794:	bf00      	nop
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	e000e010 	.word	0xe000e010
 800b7a4:	e000e018 	.word	0xe000e018
 800b7a8:	20000000 	.word	0x20000000
 800b7ac:	10624dd3 	.word	0x10624dd3
 800b7b0:	e000e014 	.word	0xe000e014

0800b7b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7c4 <vPortEnableVFP+0x10>
 800b7b8:	6801      	ldr	r1, [r0, #0]
 800b7ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7be:	6001      	str	r1, [r0, #0]
 800b7c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7c2:	bf00      	nop
 800b7c4:	e000ed88 	.word	0xe000ed88

0800b7c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08a      	sub	sp, #40	; 0x28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7d4:	f7ff faba 	bl	800ad4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7d8:	4b5d      	ldr	r3, [pc, #372]	; (800b950 <pvPortMalloc+0x188>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7e0:	f000 f924 	bl	800ba2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7e4:	4b5b      	ldr	r3, [pc, #364]	; (800b954 <pvPortMalloc+0x18c>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f040 8093 	bne.w	800b918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01d      	beq.n	800b834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7f8:	2208      	movs	r2, #8
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f003 0307 	and.w	r3, r3, #7
 800b806:	2b00      	cmp	r3, #0
 800b808:	d014      	beq.n	800b834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f023 0307 	bic.w	r3, r3, #7
 800b810:	3308      	adds	r3, #8
 800b812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <pvPortMalloc+0x6c>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	617b      	str	r3, [r7, #20]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d06e      	beq.n	800b918 <pvPortMalloc+0x150>
 800b83a:	4b47      	ldr	r3, [pc, #284]	; (800b958 <pvPortMalloc+0x190>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	429a      	cmp	r2, r3
 800b842:	d869      	bhi.n	800b918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b844:	4b45      	ldr	r3, [pc, #276]	; (800b95c <pvPortMalloc+0x194>)
 800b846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b848:	4b44      	ldr	r3, [pc, #272]	; (800b95c <pvPortMalloc+0x194>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b84e:	e004      	b.n	800b85a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	429a      	cmp	r2, r3
 800b862:	d903      	bls.n	800b86c <pvPortMalloc+0xa4>
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f1      	bne.n	800b850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b86c:	4b38      	ldr	r3, [pc, #224]	; (800b950 <pvPortMalloc+0x188>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b872:	429a      	cmp	r2, r3
 800b874:	d050      	beq.n	800b918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2208      	movs	r2, #8
 800b87c:	4413      	add	r3, r2
 800b87e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	1ad2      	subs	r2, r2, r3
 800b890:	2308      	movs	r3, #8
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	429a      	cmp	r2, r3
 800b896:	d91f      	bls.n	800b8d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4413      	add	r3, r2
 800b89e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	f003 0307 	and.w	r3, r3, #7
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00a      	beq.n	800b8c0 <pvPortMalloc+0xf8>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	f383 8811 	msr	BASEPRI, r3
 800b8b2:	f3bf 8f6f 	isb	sy
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	613b      	str	r3, [r7, #16]
}
 800b8bc:	bf00      	nop
 800b8be:	e7fe      	b.n	800b8be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	685a      	ldr	r2, [r3, #4]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	1ad2      	subs	r2, r2, r3
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8d2:	69b8      	ldr	r0, [r7, #24]
 800b8d4:	f000 f90c 	bl	800baf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8d8:	4b1f      	ldr	r3, [pc, #124]	; (800b958 <pvPortMalloc+0x190>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	4a1d      	ldr	r2, [pc, #116]	; (800b958 <pvPortMalloc+0x190>)
 800b8e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8e6:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <pvPortMalloc+0x190>)
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	4b1d      	ldr	r3, [pc, #116]	; (800b960 <pvPortMalloc+0x198>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d203      	bcs.n	800b8fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8f2:	4b19      	ldr	r3, [pc, #100]	; (800b958 <pvPortMalloc+0x190>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a1a      	ldr	r2, [pc, #104]	; (800b960 <pvPortMalloc+0x198>)
 800b8f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	685a      	ldr	r2, [r3, #4]
 800b8fe:	4b15      	ldr	r3, [pc, #84]	; (800b954 <pvPortMalloc+0x18c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	431a      	orrs	r2, r3
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	2200      	movs	r2, #0
 800b90c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b90e:	4b15      	ldr	r3, [pc, #84]	; (800b964 <pvPortMalloc+0x19c>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3301      	adds	r3, #1
 800b914:	4a13      	ldr	r2, [pc, #76]	; (800b964 <pvPortMalloc+0x19c>)
 800b916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b918:	f7ff fa26 	bl	800ad68 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800b922:	f7f4 ff9d 	bl	8000860 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <pvPortMalloc+0x17e>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	60fb      	str	r3, [r7, #12]
}
 800b942:	bf00      	nop
 800b944:	e7fe      	b.n	800b944 <pvPortMalloc+0x17c>
	return pvReturn;
 800b946:	69fb      	ldr	r3, [r7, #28]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3728      	adds	r7, #40	; 0x28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20008914 	.word	0x20008914
 800b954:	20008928 	.word	0x20008928
 800b958:	20008918 	.word	0x20008918
 800b95c:	2000890c 	.word	0x2000890c
 800b960:	2000891c 	.word	0x2000891c
 800b964:	20008920 	.word	0x20008920

0800b968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d04d      	beq.n	800ba16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b97a:	2308      	movs	r3, #8
 800b97c:	425b      	negs	r3, r3
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	4b24      	ldr	r3, [pc, #144]	; (800ba20 <vPortFree+0xb8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4013      	ands	r3, r2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <vPortFree+0x44>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60fb      	str	r3, [r7, #12]
}
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00a      	beq.n	800b9ca <vPortFree+0x62>
	__asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	60bb      	str	r3, [r7, #8]
}
 800b9c6:	bf00      	nop
 800b9c8:	e7fe      	b.n	800b9c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	4b14      	ldr	r3, [pc, #80]	; (800ba20 <vPortFree+0xb8>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d01e      	beq.n	800ba16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d11a      	bne.n	800ba16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <vPortFree+0xb8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	43db      	mvns	r3, r3
 800b9ea:	401a      	ands	r2, r3
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9f0:	f7ff f9ac 	bl	800ad4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	685a      	ldr	r2, [r3, #4]
 800b9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ba24 <vPortFree+0xbc>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	4a09      	ldr	r2, [pc, #36]	; (800ba24 <vPortFree+0xbc>)
 800ba00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba02:	6938      	ldr	r0, [r7, #16]
 800ba04:	f000 f874 	bl	800baf0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba08:	4b07      	ldr	r3, [pc, #28]	; (800ba28 <vPortFree+0xc0>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	4a06      	ldr	r2, [pc, #24]	; (800ba28 <vPortFree+0xc0>)
 800ba10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba12:	f7ff f9a9 	bl	800ad68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba16:	bf00      	nop
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20008928 	.word	0x20008928
 800ba24:	20008918 	.word	0x20008918
 800ba28:	20008924 	.word	0x20008924

0800ba2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba38:	4b27      	ldr	r3, [pc, #156]	; (800bad8 <prvHeapInit+0xac>)
 800ba3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d00c      	beq.n	800ba60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	3307      	adds	r3, #7
 800ba4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0307 	bic.w	r3, r3, #7
 800ba52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	4a1f      	ldr	r2, [pc, #124]	; (800bad8 <prvHeapInit+0xac>)
 800ba5c:	4413      	add	r3, r2
 800ba5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba64:	4a1d      	ldr	r2, [pc, #116]	; (800badc <prvHeapInit+0xb0>)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba6a:	4b1c      	ldr	r3, [pc, #112]	; (800badc <prvHeapInit+0xb0>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	4413      	add	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba78:	2208      	movs	r2, #8
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 0307 	bic.w	r3, r3, #7
 800ba86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4a15      	ldr	r2, [pc, #84]	; (800bae0 <prvHeapInit+0xb4>)
 800ba8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba8e:	4b14      	ldr	r3, [pc, #80]	; (800bae0 <prvHeapInit+0xb4>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba96:	4b12      	ldr	r3, [pc, #72]	; (800bae0 <prvHeapInit+0xb4>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	1ad2      	subs	r2, r2, r3
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800baac:	4b0c      	ldr	r3, [pc, #48]	; (800bae0 <prvHeapInit+0xb4>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	4a0a      	ldr	r2, [pc, #40]	; (800bae4 <prvHeapInit+0xb8>)
 800baba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	4a09      	ldr	r2, [pc, #36]	; (800bae8 <prvHeapInit+0xbc>)
 800bac2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bac4:	4b09      	ldr	r3, [pc, #36]	; (800baec <prvHeapInit+0xc0>)
 800bac6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800baca:	601a      	str	r2, [r3, #0]
}
 800bacc:	bf00      	nop
 800bace:	3714      	adds	r7, #20
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	2000090c 	.word	0x2000090c
 800badc:	2000890c 	.word	0x2000890c
 800bae0:	20008914 	.word	0x20008914
 800bae4:	2000891c 	.word	0x2000891c
 800bae8:	20008918 	.word	0x20008918
 800baec:	20008928 	.word	0x20008928

0800baf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800baf8:	4b28      	ldr	r3, [pc, #160]	; (800bb9c <prvInsertBlockIntoFreeList+0xac>)
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	e002      	b.n	800bb04 <prvInsertBlockIntoFreeList+0x14>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d8f7      	bhi.n	800bafe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	4413      	add	r3, r2
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d108      	bne.n	800bb32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	685a      	ldr	r2, [r3, #4]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	441a      	add	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	441a      	add	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d118      	bne.n	800bb78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	4b15      	ldr	r3, [pc, #84]	; (800bba0 <prvInsertBlockIntoFreeList+0xb0>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d00d      	beq.n	800bb6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	441a      	add	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	e008      	b.n	800bb80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb6e:	4b0c      	ldr	r3, [pc, #48]	; (800bba0 <prvInsertBlockIntoFreeList+0xb0>)
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	e003      	b.n	800bb80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d002      	beq.n	800bb8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb8e:	bf00      	nop
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	2000890c 	.word	0x2000890c
 800bba0:	20008914 	.word	0x20008914

0800bba4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800bba8:	2201      	movs	r2, #1
 800bbaa:	4912      	ldr	r1, [pc, #72]	; (800bbf4 <MX_USB_DEVICE_Init+0x50>)
 800bbac:	4812      	ldr	r0, [pc, #72]	; (800bbf8 <MX_USB_DEVICE_Init+0x54>)
 800bbae:	f7fd fa53 	bl	8009058 <USBD_Init>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d001      	beq.n	800bbbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbb8:	f7f5 fb66 	bl	8001288 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800bbbc:	490f      	ldr	r1, [pc, #60]	; (800bbfc <MX_USB_DEVICE_Init+0x58>)
 800bbbe:	480e      	ldr	r0, [pc, #56]	; (800bbf8 <MX_USB_DEVICE_Init+0x54>)
 800bbc0:	f7fd fa7a 	bl	80090b8 <USBD_RegisterClass>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbca:	f7f5 fb5d 	bl	8001288 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800bbce:	490c      	ldr	r1, [pc, #48]	; (800bc00 <MX_USB_DEVICE_Init+0x5c>)
 800bbd0:	4809      	ldr	r0, [pc, #36]	; (800bbf8 <MX_USB_DEVICE_Init+0x54>)
 800bbd2:	f7fd f9b1 	bl	8008f38 <USBD_CDC_RegisterInterface>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbdc:	f7f5 fb54 	bl	8001288 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800bbe0:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <MX_USB_DEVICE_Init+0x54>)
 800bbe2:	f7fd fa9f 	bl	8009124 <USBD_Start>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbec:	f7f5 fb4c 	bl	8001288 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbf0:	bf00      	nop
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	200000b0 	.word	0x200000b0
 800bbf8:	2000892c 	.word	0x2000892c
 800bbfc:	20000018 	.word	0x20000018
 800bc00:	2000009c 	.word	0x2000009c

0800bc04 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4905      	ldr	r1, [pc, #20]	; (800bc20 <CDC_Init_HS+0x1c>)
 800bc0c:	4805      	ldr	r0, [pc, #20]	; (800bc24 <CDC_Init_HS+0x20>)
 800bc0e:	f7fd f9ad 	bl	8008f6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800bc12:	4905      	ldr	r1, [pc, #20]	; (800bc28 <CDC_Init_HS+0x24>)
 800bc14:	4803      	ldr	r0, [pc, #12]	; (800bc24 <CDC_Init_HS+0x20>)
 800bc16:	f7fd f9cb 	bl	8008fb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc1a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20009408 	.word	0x20009408
 800bc24:	2000892c 	.word	0x2000892c
 800bc28:	20008c08 	.word	0x20008c08

0800bc2c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800bc30:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	6039      	str	r1, [r7, #0]
 800bc46:	71fb      	strb	r3, [r7, #7]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	2b23      	cmp	r3, #35	; 0x23
 800bc50:	d84a      	bhi.n	800bce8 <CDC_Control_HS+0xac>
 800bc52:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <CDC_Control_HS+0x1c>)
 800bc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc58:	0800bce9 	.word	0x0800bce9
 800bc5c:	0800bce9 	.word	0x0800bce9
 800bc60:	0800bce9 	.word	0x0800bce9
 800bc64:	0800bce9 	.word	0x0800bce9
 800bc68:	0800bce9 	.word	0x0800bce9
 800bc6c:	0800bce9 	.word	0x0800bce9
 800bc70:	0800bce9 	.word	0x0800bce9
 800bc74:	0800bce9 	.word	0x0800bce9
 800bc78:	0800bce9 	.word	0x0800bce9
 800bc7c:	0800bce9 	.word	0x0800bce9
 800bc80:	0800bce9 	.word	0x0800bce9
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bce9 	.word	0x0800bce9
 800bc8c:	0800bce9 	.word	0x0800bce9
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bce9 	.word	0x0800bce9
 800bc98:	0800bce9 	.word	0x0800bce9
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bce9 	.word	0x0800bce9
 800bca4:	0800bce9 	.word	0x0800bce9
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bce9 	.word	0x0800bce9
 800bcb0:	0800bce9 	.word	0x0800bce9
 800bcb4:	0800bce9 	.word	0x0800bce9
 800bcb8:	0800bce9 	.word	0x0800bce9
 800bcbc:	0800bce9 	.word	0x0800bce9
 800bcc0:	0800bce9 	.word	0x0800bce9
 800bcc4:	0800bce9 	.word	0x0800bce9
 800bcc8:	0800bce9 	.word	0x0800bce9
 800bccc:	0800bce9 	.word	0x0800bce9
 800bcd0:	0800bce9 	.word	0x0800bce9
 800bcd4:	0800bce9 	.word	0x0800bce9
 800bcd8:	0800bce9 	.word	0x0800bce9
 800bcdc:	0800bce9 	.word	0x0800bce9
 800bce0:	0800bce9 	.word	0x0800bce9
 800bce4:	0800bce9 	.word	0x0800bce9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bce8:	bf00      	nop
  }

  return (USBD_OK);
 800bcea:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bd02:	6879      	ldr	r1, [r7, #4]
 800bd04:	4805      	ldr	r0, [pc, #20]	; (800bd1c <CDC_Receive_HS+0x24>)
 800bd06:	f7fd f953 	bl	8008fb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bd0a:	4804      	ldr	r0, [pc, #16]	; (800bd1c <CDC_Receive_HS+0x24>)
 800bd0c:	f7fd f96e 	bl	8008fec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd10:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	2000892c 	.word	0x2000892c

0800bd20 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b087      	sub	sp, #28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800bd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	371c      	adds	r7, #28
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
	...

0800bd44 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	2212      	movs	r2, #18
 800bd54:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bd56:	4b03      	ldr	r3, [pc, #12]	; (800bd64 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	200000cc 	.word	0x200000cc

0800bd68 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6039      	str	r1, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2204      	movs	r2, #4
 800bd78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd7a:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	200000e0 	.word	0x200000e0

0800bd8c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	6039      	str	r1, [r7, #0]
 800bd96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd98:	79fb      	ldrb	r3, [r7, #7]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d105      	bne.n	800bdaa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4907      	ldr	r1, [pc, #28]	; (800bdc0 <USBD_HS_ProductStrDescriptor+0x34>)
 800bda2:	4808      	ldr	r0, [pc, #32]	; (800bdc4 <USBD_HS_ProductStrDescriptor+0x38>)
 800bda4:	f7fe fb6a 	bl	800a47c <USBD_GetString>
 800bda8:	e004      	b.n	800bdb4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	4904      	ldr	r1, [pc, #16]	; (800bdc0 <USBD_HS_ProductStrDescriptor+0x34>)
 800bdae:	4805      	ldr	r0, [pc, #20]	; (800bdc4 <USBD_HS_ProductStrDescriptor+0x38>)
 800bdb0:	f7fe fb64 	bl	800a47c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdb4:	4b02      	ldr	r3, [pc, #8]	; (800bdc0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20009c08 	.word	0x20009c08
 800bdc4:	0800c8b8 	.word	0x0800c8b8

0800bdc8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	4904      	ldr	r1, [pc, #16]	; (800bde8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bdd8:	4804      	ldr	r0, [pc, #16]	; (800bdec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bdda:	f7fe fb4f 	bl	800a47c <USBD_GetString>
  return USBD_StrDesc;
 800bdde:	4b02      	ldr	r3, [pc, #8]	; (800bde8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20009c08 	.word	0x20009c08
 800bdec:	0800c8d0 	.word	0x0800c8d0

0800bdf0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	221a      	movs	r2, #26
 800be00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be02:	f000 f843 	bl	800be8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800be06:	4b02      	ldr	r3, [pc, #8]	; (800be10 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	200000e4 	.word	0x200000e4

0800be14 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d105      	bne.n	800be32 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4907      	ldr	r1, [pc, #28]	; (800be48 <USBD_HS_ConfigStrDescriptor+0x34>)
 800be2a:	4808      	ldr	r0, [pc, #32]	; (800be4c <USBD_HS_ConfigStrDescriptor+0x38>)
 800be2c:	f7fe fb26 	bl	800a47c <USBD_GetString>
 800be30:	e004      	b.n	800be3c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4904      	ldr	r1, [pc, #16]	; (800be48 <USBD_HS_ConfigStrDescriptor+0x34>)
 800be36:	4805      	ldr	r0, [pc, #20]	; (800be4c <USBD_HS_ConfigStrDescriptor+0x38>)
 800be38:	f7fe fb20 	bl	800a47c <USBD_GetString>
  }
  return USBD_StrDesc;
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	20009c08 	.word	0x20009c08
 800be4c:	0800c8e4 	.word	0x0800c8e4

0800be50 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d105      	bne.n	800be6e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4907      	ldr	r1, [pc, #28]	; (800be84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800be66:	4808      	ldr	r0, [pc, #32]	; (800be88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800be68:	f7fe fb08 	bl	800a47c <USBD_GetString>
 800be6c:	e004      	b.n	800be78 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	4904      	ldr	r1, [pc, #16]	; (800be84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800be72:	4805      	ldr	r0, [pc, #20]	; (800be88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800be74:	f7fe fb02 	bl	800a47c <USBD_GetString>
  }
  return USBD_StrDesc;
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20009c08 	.word	0x20009c08
 800be88:	0800c8f0 	.word	0x0800c8f0

0800be8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be92:	4b0f      	ldr	r3, [pc, #60]	; (800bed0 <Get_SerialNum+0x44>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be98:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <Get_SerialNum+0x48>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be9e:	4b0e      	ldr	r3, [pc, #56]	; (800bed8 <Get_SerialNum+0x4c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4413      	add	r3, r2
 800beaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d009      	beq.n	800bec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800beb2:	2208      	movs	r2, #8
 800beb4:	4909      	ldr	r1, [pc, #36]	; (800bedc <Get_SerialNum+0x50>)
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f000 f814 	bl	800bee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bebc:	2204      	movs	r2, #4
 800bebe:	4908      	ldr	r1, [pc, #32]	; (800bee0 <Get_SerialNum+0x54>)
 800bec0:	68b8      	ldr	r0, [r7, #8]
 800bec2:	f000 f80f 	bl	800bee4 <IntToUnicode>
  }
}
 800bec6:	bf00      	nop
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	1fff7a10 	.word	0x1fff7a10
 800bed4:	1fff7a14 	.word	0x1fff7a14
 800bed8:	1fff7a18 	.word	0x1fff7a18
 800bedc:	200000e6 	.word	0x200000e6
 800bee0:	200000f6 	.word	0x200000f6

0800bee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bef6:	2300      	movs	r3, #0
 800bef8:	75fb      	strb	r3, [r7, #23]
 800befa:	e027      	b.n	800bf4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	0f1b      	lsrs	r3, r3, #28
 800bf00:	2b09      	cmp	r3, #9
 800bf02:	d80b      	bhi.n	800bf1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	0f1b      	lsrs	r3, r3, #28
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4619      	mov	r1, r3
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	440b      	add	r3, r1
 800bf14:	3230      	adds	r2, #48	; 0x30
 800bf16:	b2d2      	uxtb	r2, r2
 800bf18:	701a      	strb	r2, [r3, #0]
 800bf1a:	e00a      	b.n	800bf32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	0f1b      	lsrs	r3, r3, #28
 800bf20:	b2da      	uxtb	r2, r3
 800bf22:	7dfb      	ldrb	r3, [r7, #23]
 800bf24:	005b      	lsls	r3, r3, #1
 800bf26:	4619      	mov	r1, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	440b      	add	r3, r1
 800bf2c:	3237      	adds	r2, #55	; 0x37
 800bf2e:	b2d2      	uxtb	r2, r2
 800bf30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	011b      	lsls	r3, r3, #4
 800bf36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	4413      	add	r3, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	75fb      	strb	r3, [r7, #23]
 800bf4c:	7dfa      	ldrb	r2, [r7, #23]
 800bf4e:	79fb      	ldrb	r3, [r7, #7]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d3d3      	bcc.n	800befc <IntToUnicode+0x18>
  }
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop
 800bf58:	371c      	adds	r7, #28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
	...

0800bf64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08a      	sub	sp, #40	; 0x28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf6c:	f107 0314 	add.w	r3, r7, #20
 800bf70:	2200      	movs	r2, #0
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	605a      	str	r2, [r3, #4]
 800bf76:	609a      	str	r2, [r3, #8]
 800bf78:	60da      	str	r2, [r3, #12]
 800bf7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a3d      	ldr	r2, [pc, #244]	; (800c078 <HAL_PCD_MspInit+0x114>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d173      	bne.n	800c06e <HAL_PCD_MspInit+0x10a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf86:	2300      	movs	r3, #0
 800bf88:	613b      	str	r3, [r7, #16]
 800bf8a:	4b3c      	ldr	r3, [pc, #240]	; (800c07c <HAL_PCD_MspInit+0x118>)
 800bf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8e:	4a3b      	ldr	r2, [pc, #236]	; (800c07c <HAL_PCD_MspInit+0x118>)
 800bf90:	f043 0302 	orr.w	r3, r3, #2
 800bf94:	6313      	str	r3, [r2, #48]	; 0x30
 800bf96:	4b39      	ldr	r3, [pc, #228]	; (800c07c <HAL_PCD_MspInit+0x118>)
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	613b      	str	r3, [r7, #16]
 800bfa0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800bfa2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800bfa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfa8:	2302      	movs	r3, #2
 800bfaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfac:	2300      	movs	r3, #0
 800bfae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfb8:	f107 0314 	add.w	r3, r7, #20
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4830      	ldr	r0, [pc, #192]	; (800c080 <HAL_PCD_MspInit+0x11c>)
 800bfc0:	f7f6 fb74 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800bfc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800bfd2:	f107 0314 	add.w	r3, r7, #20
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4829      	ldr	r0, [pc, #164]	; (800c080 <HAL_PCD_MspInit+0x11c>)
 800bfda:	f7f6 fb67 	bl	80026ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60fb      	str	r3, [r7, #12]
 800bfe2:	4b26      	ldr	r3, [pc, #152]	; (800c07c <HAL_PCD_MspInit+0x118>)
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe6:	4a25      	ldr	r2, [pc, #148]	; (800c07c <HAL_PCD_MspInit+0x118>)
 800bfe8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfec:	6313      	str	r3, [r2, #48]	; 0x30
 800bfee:	4b23      	ldr	r3, [pc, #140]	; (800c07c <HAL_PCD_MspInit+0x118>)
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 5, 0);
 800bffa:	2200      	movs	r2, #0
 800bffc:	2105      	movs	r1, #5
 800bffe:	204a      	movs	r0, #74	; 0x4a
 800c000:	f7f5 fe38 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800c004:	204a      	movs	r0, #74	; 0x4a
 800c006:	f7f5 fe51 	bl	8001cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 5, 0);
 800c00a:	2200      	movs	r2, #0
 800c00c:	2105      	movs	r1, #5
 800c00e:	204b      	movs	r0, #75	; 0x4b
 800c010:	f7f5 fe30 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800c014:	204b      	movs	r0, #75	; 0x4b
 800c016:	f7f5 fe49 	bl	8001cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800c01a:	2200      	movs	r2, #0
 800c01c:	2105      	movs	r1, #5
 800c01e:	204d      	movs	r0, #77	; 0x4d
 800c020:	f7f5 fe28 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c024:	204d      	movs	r0, #77	; 0x4d
 800c026:	f7f5 fe41 	bl	8001cac <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d11d      	bne.n	800c06e <HAL_PCD_MspInit+0x10a>
    {
      /* Enable EXTI Line 20 for USB wakeup */
      __HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG();
 800c032:	4b14      	ldr	r3, [pc, #80]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c034:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c038:	615a      	str	r2, [r3, #20]
      __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE();
 800c03a:	4b12      	ldr	r3, [pc, #72]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	4a11      	ldr	r2, [pc, #68]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c040:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c044:	60d3      	str	r3, [r2, #12]
 800c046:	4b0f      	ldr	r3, [pc, #60]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	4a0e      	ldr	r2, [pc, #56]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c050:	6093      	str	r3, [r2, #8]
      __HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT();
 800c052:	4b0c      	ldr	r3, [pc, #48]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a0b      	ldr	r2, [pc, #44]	; (800c084 <HAL_PCD_MspInit+0x120>)
 800c058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c05c:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(OTG_HS_WKUP_IRQn, 5, 0);
 800c05e:	2200      	movs	r2, #0
 800c060:	2105      	movs	r1, #5
 800c062:	204c      	movs	r0, #76	; 0x4c
 800c064:	f7f5 fe06 	bl	8001c74 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(OTG_HS_WKUP_IRQn);
 800c068:	204c      	movs	r0, #76	; 0x4c
 800c06a:	f7f5 fe1f 	bl	8001cac <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c06e:	bf00      	nop
 800c070:	3728      	adds	r7, #40	; 0x28
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40040000 	.word	0x40040000
 800c07c:	40023800 	.word	0x40023800
 800c080:	40020400 	.word	0x40020400
 800c084:	40013c00 	.word	0x40013c00

0800c088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c09c:	4619      	mov	r1, r3
 800c09e:	4610      	mov	r0, r2
 800c0a0:	f7fd f88d 	bl	80091be <USBD_LL_SetupStage>
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	4413      	add	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	440b      	add	r3, r1
 800c0cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	f7fd f8c7 	bl	8009268 <USBD_LL_DataOutStage>
}
 800c0da:	bf00      	nop
 800c0dc:	3708      	adds	r7, #8
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0f4:	78fa      	ldrb	r2, [r7, #3]
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	4413      	add	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	440b      	add	r3, r1
 800c102:	334c      	adds	r3, #76	; 0x4c
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	78fb      	ldrb	r3, [r7, #3]
 800c108:	4619      	mov	r1, r3
 800c10a:	f7fd f960 	bl	80093ce <USBD_LL_DataInStage>
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c124:	4618      	mov	r0, r3
 800c126:	f7fd fa94 	bl	8009652 <USBD_LL_SOF>
}
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c13a:	2301      	movs	r3, #1
 800c13c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d102      	bne.n	800c14c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c146:	2300      	movs	r3, #0
 800c148:	73fb      	strb	r3, [r7, #15]
 800c14a:	e008      	b.n	800c15e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	2b02      	cmp	r3, #2
 800c152:	d102      	bne.n	800c15a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c154:	2301      	movs	r3, #1
 800c156:	73fb      	strb	r3, [r7, #15]
 800c158:	e001      	b.n	800c15e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c15a:	f7f5 f895 	bl	8001288 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c164:	7bfa      	ldrb	r2, [r7, #15]
 800c166:	4611      	mov	r1, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fd fa34 	bl	80095d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c174:	4618      	mov	r0, r3
 800c176:	f7fd f9dc 	bl	8009532 <USBD_LL_Reset>
}
 800c17a:	bf00      	nop
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
	...

0800c184 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c192:	4618      	mov	r0, r3
 800c194:	f7fd fa2f 	bl	80095f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	6812      	ldr	r2, [r2, #0]
 800c1a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1aa:	f043 0301 	orr.w	r3, r3, #1
 800c1ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d005      	beq.n	800c1c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1b8:	4b04      	ldr	r3, [pc, #16]	; (800c1cc <HAL_PCD_SuspendCallback+0x48>)
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	4a03      	ldr	r2, [pc, #12]	; (800c1cc <HAL_PCD_SuspendCallback+0x48>)
 800c1be:	f043 0306 	orr.w	r3, r3, #6
 800c1c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1c4:	bf00      	nop
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	e000ed00 	.word	0xe000ed00

0800c1d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fd fa1f 	bl	8009622 <USBD_LL_Resume>
}
 800c1e4:	bf00      	nop
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1fe:	78fa      	ldrb	r2, [r7, #3]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7fd fa77 	bl	80096f6 <USBD_LL_IsoOUTIncomplete>
}
 800c208:	bf00      	nop
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c222:	78fa      	ldrb	r2, [r7, #3]
 800c224:	4611      	mov	r1, r2
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fa33 	bl	8009692 <USBD_LL_IsoINIncomplete>
}
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c242:	4618      	mov	r0, r3
 800c244:	f7fd fa89 	bl	800975a <USBD_LL_DevConnected>
}
 800c248:	bf00      	nop
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd fa86 	bl	8009770 <USBD_LL_DevDisconnected>
}
 800c264:	bf00      	nop
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d140      	bne.n	800c2fe <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c27c:	4a22      	ldr	r2, [pc, #136]	; (800c308 <USBD_LL_Init+0x9c>)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a20      	ldr	r2, [pc, #128]	; (800c308 <USBD_LL_Init+0x9c>)
 800c288:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c28c:	4b1e      	ldr	r3, [pc, #120]	; (800c308 <USBD_LL_Init+0x9c>)
 800c28e:	4a1f      	ldr	r2, [pc, #124]	; (800c30c <USBD_LL_Init+0xa0>)
 800c290:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800c292:	4b1d      	ldr	r3, [pc, #116]	; (800c308 <USBD_LL_Init+0x9c>)
 800c294:	2206      	movs	r2, #6
 800c296:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c298:	4b1b      	ldr	r3, [pc, #108]	; (800c308 <USBD_LL_Init+0x9c>)
 800c29a:	2202      	movs	r2, #2
 800c29c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 800c29e:	4b1a      	ldr	r3, [pc, #104]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c2a4:	4b18      	ldr	r3, [pc, #96]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = ENABLE;
 800c2aa:	4b17      	ldr	r3, [pc, #92]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = ENABLE;
 800c2b0:	4b15      	ldr	r3, [pc, #84]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = ENABLE;
 800c2b6:	4b14      	ldr	r3, [pc, #80]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800c2bc:	4b12      	ldr	r3, [pc, #72]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2be:	2201      	movs	r2, #1
 800c2c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = ENABLE;
 800c2c2:	4b11      	ldr	r3, [pc, #68]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c2c8:	4b0f      	ldr	r3, [pc, #60]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c2ce:	480e      	ldr	r0, [pc, #56]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2d0:	f7f7 f8f3 	bl	80034ba <HAL_PCD_Init>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d001      	beq.n	800c2de <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c2da:	f7f4 ffd5 	bl	8001288 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c2de:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2e2:	4809      	ldr	r0, [pc, #36]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2e4:	f7f8 fb49 	bl	800497a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c2e8:	2280      	movs	r2, #128	; 0x80
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	4806      	ldr	r0, [pc, #24]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2ee:	f7f8 fafd 	bl	80048ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c2f2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c2f6:	2101      	movs	r1, #1
 800c2f8:	4803      	ldr	r0, [pc, #12]	; (800c308 <USBD_LL_Init+0x9c>)
 800c2fa:	f7f8 faf7 	bl	80048ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3708      	adds	r7, #8
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20009e08 	.word	0x20009e08
 800c30c:	40040000 	.word	0x40040000

0800c310 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c31c:	2300      	movs	r3, #0
 800c31e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c326:	4618      	mov	r0, r3
 800c328:	f7f7 f9e4 	bl	80036f4 <HAL_PCD_Start>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 f942 	bl	800c5bc <USBD_Get_USB_Status>
 800c338:	4603      	mov	r3, r0
 800c33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
 800c34e:	4608      	mov	r0, r1
 800c350:	4611      	mov	r1, r2
 800c352:	461a      	mov	r2, r3
 800c354:	4603      	mov	r3, r0
 800c356:	70fb      	strb	r3, [r7, #3]
 800c358:	460b      	mov	r3, r1
 800c35a:	70bb      	strb	r3, [r7, #2]
 800c35c:	4613      	mov	r3, r2
 800c35e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c36e:	78bb      	ldrb	r3, [r7, #2]
 800c370:	883a      	ldrh	r2, [r7, #0]
 800c372:	78f9      	ldrb	r1, [r7, #3]
 800c374:	f7f7 feb5 	bl	80040e2 <HAL_PCD_EP_Open>
 800c378:	4603      	mov	r3, r0
 800c37a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 f91c 	bl	800c5bc <USBD_Get_USB_Status>
 800c384:	4603      	mov	r3, r0
 800c386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c388:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	460b      	mov	r3, r1
 800c39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3ac:	78fa      	ldrb	r2, [r7, #3]
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f7 fefe 	bl	80041b2 <HAL_PCD_EP_Close>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 f8fd 	bl	800c5bc <USBD_Get_USB_Status>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3ea:	78fa      	ldrb	r2, [r7, #3]
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f7 ffd6 	bl	80043a0 <HAL_PCD_EP_SetStall>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 f8de 	bl	800c5bc <USBD_Get_USB_Status>
 800c400:	4603      	mov	r3, r0
 800c402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c404:	7bbb      	ldrb	r3, [r7, #14]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	460b      	mov	r3, r1
 800c418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c428:	78fa      	ldrb	r2, [r7, #3]
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7f8 f81b 	bl	8004468 <HAL_PCD_EP_ClrStall>
 800c432:	4603      	mov	r3, r0
 800c434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c436:	7bfb      	ldrb	r3, [r7, #15]
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 f8bf 	bl	800c5bc <USBD_Get_USB_Status>
 800c43e:	4603      	mov	r3, r0
 800c440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c442:	7bbb      	ldrb	r3, [r7, #14]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c45e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c460:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c464:	2b00      	cmp	r3, #0
 800c466:	da0b      	bge.n	800c480 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c46e:	68f9      	ldr	r1, [r7, #12]
 800c470:	4613      	mov	r3, r2
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	4413      	add	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	440b      	add	r3, r1
 800c47a:	333e      	adds	r3, #62	; 0x3e
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	e00b      	b.n	800c498 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c480:	78fb      	ldrb	r3, [r7, #3]
 800c482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c486:	68f9      	ldr	r1, [r7, #12]
 800c488:	4613      	mov	r3, r2
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c496:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4be:	78fa      	ldrb	r2, [r7, #3]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f7 fde8 	bl	8004098 <HAL_PCD_SetAddress>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 f874 	bl	800c5bc <USBD_Get_USB_Status>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b086      	sub	sp, #24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	603b      	str	r3, [r7, #0]
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c500:	7af9      	ldrb	r1, [r7, #11]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	f7f7 ff01 	bl	800430c <HAL_PCD_EP_Transmit>
 800c50a:	4603      	mov	r3, r0
 800c50c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	4618      	mov	r0, r3
 800c512:	f000 f853 	bl	800c5bc <USBD_Get_USB_Status>
 800c516:	4603      	mov	r3, r0
 800c518:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c51a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	607a      	str	r2, [r7, #4]
 800c52e:	603b      	str	r3, [r7, #0]
 800c530:	460b      	mov	r3, r1
 800c532:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c538:	2300      	movs	r3, #0
 800c53a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c542:	7af9      	ldrb	r1, [r7, #11]
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	f7f7 fe7d 	bl	8004246 <HAL_PCD_EP_Receive>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 f832 	bl	800c5bc <USBD_Get_USB_Status>
 800c558:	4603      	mov	r3, r0
 800c55a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c55c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3718      	adds	r7, #24
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b082      	sub	sp, #8
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	460b      	mov	r3, r1
 800c570:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c578:	78fa      	ldrb	r2, [r7, #3]
 800c57a:	4611      	mov	r1, r2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7f7 fead 	bl	80042dc <HAL_PCD_EP_GetRxCount>
 800c582:	4603      	mov	r3, r0
}
 800c584:	4618      	mov	r0, r3
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c594:	4b03      	ldr	r3, [pc, #12]	; (800c5a4 <USBD_static_malloc+0x18>)
}
 800c596:	4618      	mov	r0, r3
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	2000a314 	.word	0x2000a314

0800c5a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]

}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5ca:	79fb      	ldrb	r3, [r7, #7]
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d817      	bhi.n	800c600 <USBD_Get_USB_Status+0x44>
 800c5d0:	a201      	add	r2, pc, #4	; (adr r2, 800c5d8 <USBD_Get_USB_Status+0x1c>)
 800c5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d6:	bf00      	nop
 800c5d8:	0800c5e9 	.word	0x0800c5e9
 800c5dc:	0800c5ef 	.word	0x0800c5ef
 800c5e0:	0800c5f5 	.word	0x0800c5f5
 800c5e4:	0800c5fb 	.word	0x0800c5fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ec:	e00b      	b.n	800c606 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f2:	e008      	b.n	800c606 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5f8:	e005      	b.n	800c606 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5fe:	e002      	b.n	800c606 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c600:	2303      	movs	r3, #3
 800c602:	73fb      	strb	r3, [r7, #15]
    break;
 800c604:	bf00      	nop
  }
  return usb_status;
 800c606:	7bfb      	ldrb	r3, [r7, #15]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3714      	adds	r7, #20
 800c60c:	46bd      	mov	sp, r7
 800c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c612:	4770      	bx	lr

0800c614 <__libc_init_array>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	4d0d      	ldr	r5, [pc, #52]	; (800c64c <__libc_init_array+0x38>)
 800c618:	4c0d      	ldr	r4, [pc, #52]	; (800c650 <__libc_init_array+0x3c>)
 800c61a:	1b64      	subs	r4, r4, r5
 800c61c:	10a4      	asrs	r4, r4, #2
 800c61e:	2600      	movs	r6, #0
 800c620:	42a6      	cmp	r6, r4
 800c622:	d109      	bne.n	800c638 <__libc_init_array+0x24>
 800c624:	4d0b      	ldr	r5, [pc, #44]	; (800c654 <__libc_init_array+0x40>)
 800c626:	4c0c      	ldr	r4, [pc, #48]	; (800c658 <__libc_init_array+0x44>)
 800c628:	f000 f8e4 	bl	800c7f4 <_init>
 800c62c:	1b64      	subs	r4, r4, r5
 800c62e:	10a4      	asrs	r4, r4, #2
 800c630:	2600      	movs	r6, #0
 800c632:	42a6      	cmp	r6, r4
 800c634:	d105      	bne.n	800c642 <__libc_init_array+0x2e>
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	f855 3b04 	ldr.w	r3, [r5], #4
 800c63c:	4798      	blx	r3
 800c63e:	3601      	adds	r6, #1
 800c640:	e7ee      	b.n	800c620 <__libc_init_array+0xc>
 800c642:	f855 3b04 	ldr.w	r3, [r5], #4
 800c646:	4798      	blx	r3
 800c648:	3601      	adds	r6, #1
 800c64a:	e7f2      	b.n	800c632 <__libc_init_array+0x1e>
 800c64c:	0800c988 	.word	0x0800c988
 800c650:	0800c988 	.word	0x0800c988
 800c654:	0800c988 	.word	0x0800c988
 800c658:	0800c98c 	.word	0x0800c98c

0800c65c <__retarget_lock_acquire_recursive>:
 800c65c:	4770      	bx	lr

0800c65e <__retarget_lock_release_recursive>:
 800c65e:	4770      	bx	lr

0800c660 <memset>:
 800c660:	4402      	add	r2, r0
 800c662:	4603      	mov	r3, r0
 800c664:	4293      	cmp	r3, r2
 800c666:	d100      	bne.n	800c66a <memset+0xa>
 800c668:	4770      	bx	lr
 800c66a:	f803 1b01 	strb.w	r1, [r3], #1
 800c66e:	e7f9      	b.n	800c664 <memset+0x4>

0800c670 <cleanup_glue>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	460c      	mov	r4, r1
 800c674:	6809      	ldr	r1, [r1, #0]
 800c676:	4605      	mov	r5, r0
 800c678:	b109      	cbz	r1, 800c67e <cleanup_glue+0xe>
 800c67a:	f7ff fff9 	bl	800c670 <cleanup_glue>
 800c67e:	4621      	mov	r1, r4
 800c680:	4628      	mov	r0, r5
 800c682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c686:	f000 b869 	b.w	800c75c <_free_r>
	...

0800c68c <_reclaim_reent>:
 800c68c:	4b2c      	ldr	r3, [pc, #176]	; (800c740 <_reclaim_reent+0xb4>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4283      	cmp	r3, r0
 800c692:	b570      	push	{r4, r5, r6, lr}
 800c694:	4604      	mov	r4, r0
 800c696:	d051      	beq.n	800c73c <_reclaim_reent+0xb0>
 800c698:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c69a:	b143      	cbz	r3, 800c6ae <_reclaim_reent+0x22>
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d14a      	bne.n	800c738 <_reclaim_reent+0xac>
 800c6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6a4:	6819      	ldr	r1, [r3, #0]
 800c6a6:	b111      	cbz	r1, 800c6ae <_reclaim_reent+0x22>
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 f857 	bl	800c75c <_free_r>
 800c6ae:	6961      	ldr	r1, [r4, #20]
 800c6b0:	b111      	cbz	r1, 800c6b8 <_reclaim_reent+0x2c>
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 f852 	bl	800c75c <_free_r>
 800c6b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c6ba:	b111      	cbz	r1, 800c6c2 <_reclaim_reent+0x36>
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f000 f84d 	bl	800c75c <_free_r>
 800c6c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c6c4:	b111      	cbz	r1, 800c6cc <_reclaim_reent+0x40>
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 f848 	bl	800c75c <_free_r>
 800c6cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c6ce:	b111      	cbz	r1, 800c6d6 <_reclaim_reent+0x4a>
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 f843 	bl	800c75c <_free_r>
 800c6d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c6d8:	b111      	cbz	r1, 800c6e0 <_reclaim_reent+0x54>
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 f83e 	bl	800c75c <_free_r>
 800c6e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c6e2:	b111      	cbz	r1, 800c6ea <_reclaim_reent+0x5e>
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f000 f839 	bl	800c75c <_free_r>
 800c6ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c6ec:	b111      	cbz	r1, 800c6f4 <_reclaim_reent+0x68>
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 f834 	bl	800c75c <_free_r>
 800c6f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c6f6:	b111      	cbz	r1, 800c6fe <_reclaim_reent+0x72>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 f82f 	bl	800c75c <_free_r>
 800c6fe:	69a3      	ldr	r3, [r4, #24]
 800c700:	b1e3      	cbz	r3, 800c73c <_reclaim_reent+0xb0>
 800c702:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c704:	4620      	mov	r0, r4
 800c706:	4798      	blx	r3
 800c708:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c70a:	b1b9      	cbz	r1, 800c73c <_reclaim_reent+0xb0>
 800c70c:	4620      	mov	r0, r4
 800c70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c712:	f7ff bfad 	b.w	800c670 <cleanup_glue>
 800c716:	5949      	ldr	r1, [r1, r5]
 800c718:	b941      	cbnz	r1, 800c72c <_reclaim_reent+0xa0>
 800c71a:	3504      	adds	r5, #4
 800c71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c71e:	2d80      	cmp	r5, #128	; 0x80
 800c720:	68d9      	ldr	r1, [r3, #12]
 800c722:	d1f8      	bne.n	800c716 <_reclaim_reent+0x8a>
 800c724:	4620      	mov	r0, r4
 800c726:	f000 f819 	bl	800c75c <_free_r>
 800c72a:	e7ba      	b.n	800c6a2 <_reclaim_reent+0x16>
 800c72c:	680e      	ldr	r6, [r1, #0]
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 f814 	bl	800c75c <_free_r>
 800c734:	4631      	mov	r1, r6
 800c736:	e7ef      	b.n	800c718 <_reclaim_reent+0x8c>
 800c738:	2500      	movs	r5, #0
 800c73a:	e7ef      	b.n	800c71c <_reclaim_reent+0x90>
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
 800c73e:	bf00      	nop
 800c740:	20000100 	.word	0x20000100

0800c744 <__malloc_lock>:
 800c744:	4801      	ldr	r0, [pc, #4]	; (800c74c <__malloc_lock+0x8>)
 800c746:	f7ff bf89 	b.w	800c65c <__retarget_lock_acquire_recursive>
 800c74a:	bf00      	nop
 800c74c:	2000a534 	.word	0x2000a534

0800c750 <__malloc_unlock>:
 800c750:	4801      	ldr	r0, [pc, #4]	; (800c758 <__malloc_unlock+0x8>)
 800c752:	f7ff bf84 	b.w	800c65e <__retarget_lock_release_recursive>
 800c756:	bf00      	nop
 800c758:	2000a534 	.word	0x2000a534

0800c75c <_free_r>:
 800c75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c75e:	2900      	cmp	r1, #0
 800c760:	d044      	beq.n	800c7ec <_free_r+0x90>
 800c762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c766:	9001      	str	r0, [sp, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	f1a1 0404 	sub.w	r4, r1, #4
 800c76e:	bfb8      	it	lt
 800c770:	18e4      	addlt	r4, r4, r3
 800c772:	f7ff ffe7 	bl	800c744 <__malloc_lock>
 800c776:	4a1e      	ldr	r2, [pc, #120]	; (800c7f0 <_free_r+0x94>)
 800c778:	9801      	ldr	r0, [sp, #4]
 800c77a:	6813      	ldr	r3, [r2, #0]
 800c77c:	b933      	cbnz	r3, 800c78c <_free_r+0x30>
 800c77e:	6063      	str	r3, [r4, #4]
 800c780:	6014      	str	r4, [r2, #0]
 800c782:	b003      	add	sp, #12
 800c784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c788:	f7ff bfe2 	b.w	800c750 <__malloc_unlock>
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d908      	bls.n	800c7a2 <_free_r+0x46>
 800c790:	6825      	ldr	r5, [r4, #0]
 800c792:	1961      	adds	r1, r4, r5
 800c794:	428b      	cmp	r3, r1
 800c796:	bf01      	itttt	eq
 800c798:	6819      	ldreq	r1, [r3, #0]
 800c79a:	685b      	ldreq	r3, [r3, #4]
 800c79c:	1949      	addeq	r1, r1, r5
 800c79e:	6021      	streq	r1, [r4, #0]
 800c7a0:	e7ed      	b.n	800c77e <_free_r+0x22>
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	b10b      	cbz	r3, 800c7ac <_free_r+0x50>
 800c7a8:	42a3      	cmp	r3, r4
 800c7aa:	d9fa      	bls.n	800c7a2 <_free_r+0x46>
 800c7ac:	6811      	ldr	r1, [r2, #0]
 800c7ae:	1855      	adds	r5, r2, r1
 800c7b0:	42a5      	cmp	r5, r4
 800c7b2:	d10b      	bne.n	800c7cc <_free_r+0x70>
 800c7b4:	6824      	ldr	r4, [r4, #0]
 800c7b6:	4421      	add	r1, r4
 800c7b8:	1854      	adds	r4, r2, r1
 800c7ba:	42a3      	cmp	r3, r4
 800c7bc:	6011      	str	r1, [r2, #0]
 800c7be:	d1e0      	bne.n	800c782 <_free_r+0x26>
 800c7c0:	681c      	ldr	r4, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	6053      	str	r3, [r2, #4]
 800c7c6:	4421      	add	r1, r4
 800c7c8:	6011      	str	r1, [r2, #0]
 800c7ca:	e7da      	b.n	800c782 <_free_r+0x26>
 800c7cc:	d902      	bls.n	800c7d4 <_free_r+0x78>
 800c7ce:	230c      	movs	r3, #12
 800c7d0:	6003      	str	r3, [r0, #0]
 800c7d2:	e7d6      	b.n	800c782 <_free_r+0x26>
 800c7d4:	6825      	ldr	r5, [r4, #0]
 800c7d6:	1961      	adds	r1, r4, r5
 800c7d8:	428b      	cmp	r3, r1
 800c7da:	bf04      	itt	eq
 800c7dc:	6819      	ldreq	r1, [r3, #0]
 800c7de:	685b      	ldreq	r3, [r3, #4]
 800c7e0:	6063      	str	r3, [r4, #4]
 800c7e2:	bf04      	itt	eq
 800c7e4:	1949      	addeq	r1, r1, r5
 800c7e6:	6021      	streq	r1, [r4, #0]
 800c7e8:	6054      	str	r4, [r2, #4]
 800c7ea:	e7ca      	b.n	800c782 <_free_r+0x26>
 800c7ec:	b003      	add	sp, #12
 800c7ee:	bd30      	pop	{r4, r5, pc}
 800c7f0:	2000a538 	.word	0x2000a538

0800c7f4 <_init>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	bf00      	nop
 800c7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7fa:	bc08      	pop	{r3}
 800c7fc:	469e      	mov	lr, r3
 800c7fe:	4770      	bx	lr

0800c800 <_fini>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr
